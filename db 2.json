{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechatpay.jpeg","path":"uploads/wechatpay.jpeg","modified":0,"renderable":0},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d956134c1e15d6ef24b90f7f9b1a42acbeaa5ce5","modified":1524536717661},{"_id":"source/robots.txt","hash":"667d0518529f5c5d5501535db7681a5946808223","modified":1492744455000},{"_id":"themes/next-reloaded/.DS_Store","hash":"c59c05169cc0f10288bbbea6f2117a54c633d450","modified":1524538356702},{"_id":"themes/next-reloaded/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1524531129690},{"_id":"themes/next-reloaded/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1524531129691},{"_id":"themes/next-reloaded/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1524531129691},{"_id":"themes/next-reloaded/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1524531129693},{"_id":"themes/next-reloaded/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1524531129693},{"_id":"themes/next-reloaded/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1524531129694},{"_id":"themes/next-reloaded/.jshintrc","hash":"ed3cce243df27e8d54fe1b8e6deb191136766333","modified":1524531129694},{"_id":"themes/next-reloaded/.stickler.yml","hash":"a94dcbac9fb71bbad94fff5e5abc07492c0ff11f","modified":1524531129694},{"_id":"themes/next-reloaded/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1524531129694},{"_id":"themes/next-reloaded/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1524531129695},{"_id":"themes/next-reloaded/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1524531129695},{"_id":"themes/next-reloaded/README.md","hash":"baca21096e80db221fbed5f8eb9bd789049e4d6e","modified":1524531129695},{"_id":"themes/next-reloaded/_config.yml","hash":"9181d47e286177acea24fbce6c4368938bc30065","modified":1524539137332},{"_id":"themes/next-reloaded/bower.json","hash":"29515e8a97ae28e07a934e38d0fc79af695d14fc","modified":1524531129696},{"_id":"themes/next-reloaded/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1524531129696},{"_id":"themes/next-reloaded/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1524531129703},{"_id":"themes/next-reloaded/package.json","hash":"d2eccdf5f241a3b42f2c9a873e3a063e54316ea9","modified":1524531129726},{"_id":"source/_posts/American-Football-101.md","hash":"19d308ad408161314c97bb64393ba25f8425374f","modified":1515544923123},{"_id":"source/_posts/BFS-Maze类型总结.md","hash":"f2cf1fa117a5214602bf12abf3af819e8af956d5","modified":1505776191709},{"_id":"source/_posts/Backtracking总结.md","hash":"db319abe793ec597c5b2e65fa791608d9134fe8d","modified":1521764455813},{"_id":"source/_posts/DFS-BFS-总结.md","hash":"96aede88cb40a0d76dfc39ab417852e962dd7931","modified":1520815476070},{"_id":"source/_posts/DP总结.md","hash":"c64ca403010939b14fb2d643d2597bb602741554","modified":1520815478230},{"_id":"source/_posts/Design-问题.md","hash":"5824953013dd87aba8318bb8950911ccf31550cf","modified":1521781143006},{"_id":"source/_posts/Google面经不断更新.md","hash":"e112b4dc08f6a71813eb9954d805f0548a4cd918","modified":1499557286000},{"_id":"source/_posts/Heap总结.md","hash":"32d4dbf37c9f635cdda3ace8e6bf2df60c1dd867","modified":1521933639706},{"_id":"source/_posts/Hexo配置-2.md","hash":"fc91a4ec6c168063593074a086f2f773e678c510","modified":1492815072000},{"_id":"source/_posts/Indeed面试总结.md","hash":"0b5e16d7b28858f7795eefe2d59edac0d8fceb7e","modified":1509321355532},{"_id":"source/_posts/Joshua之美东探索I-罗德岛.md","hash":"0d48d6c5bf14ffbfab06a6af38f9b5f583d436c1","modified":1496284387000},{"_id":"source/_posts/Joshua之美东探索II-纽约波士顿.md","hash":"f43506697c98573eefa80958efc261606e9735bf","modified":1496433178000},{"_id":"source/_posts/Joshua美东探索IV-Haskell-Free-Library.md","hash":"b8a90678dd23d98522e53d7bd05accf75c8ac3bd","modified":1496619783000},{"_id":"source/_posts/Leetcode-Solution-Reference-Website.md","hash":"16c4a555b90ec02d081500fa80d2a2c11914f466","modified":1513388885982},{"_id":"source/_posts/LinkedList系列.md","hash":"f2cfff222aa3dec398548f709720729289cea379","modified":1500339817000},{"_id":"source/_posts/Longest-Substring系列.md","hash":"9dd44e30e13fca905712fa26c54100511d786544","modified":1524536623716},{"_id":"source/_posts/NewsLetter-Make-a-product.md","hash":"77e6c0ea0e22a442813c83a7504a6ee2a411cbaa","modified":1492756338000},{"_id":"source/_posts/Opinion-about-Love.md","hash":"c2d50fc47a186b0dfa27a543035472114dd060b4","modified":1508438835644},{"_id":"source/_posts/Quote-John-Adams-Education.md","hash":"83f31acffb00a45065ad21779005d3b02ebcd37a","modified":1493840011000},{"_id":"source/_posts/Stack总结.md","hash":"a37b343b4d26586babe5e60b4b62b86ef794399b","modified":1524536623717},{"_id":"source/_posts/String总结.md","hash":"56e5e297df43cc22ddf010081bcebb8b00e53074","modified":1508907882770},{"_id":"source/_posts/TEST.md","hash":"a49466c94a5bc056e92b24f070425b2c8abf16e6","modified":1496554260000},{"_id":"source/_posts/TopLogicalSort-总结.md","hash":"e18f3e1d1682c0fc252590af5f37822a73261ca2","modified":1521588921665},{"_id":"source/_posts/Tree总结.md","hash":"2cb5f99580e4ecaa58d330ef4a2aad3fa683a9e5","modified":1524536623717},{"_id":"source/_posts/Trie-类型总结.md","hash":"ab33e34ab4a3298bdc1a0f628546ebc358d54ca7","modified":1524536623718},{"_id":"source/_posts/Two-Pointer问题总结.md","hash":"ed71264a3c416b7200afcb469eda0b3836fae3a7","modified":1524536623720},{"_id":"source/_posts/USC生活小技巧.md","hash":"e8eea7019f5c1efaf4c88a67325751ea6d9d803d","modified":1492905094000},{"_id":"source/_posts/Union-Find总结.md","hash":"39370ccef400cea436df8dfcb4f6827fd800d5bf","modified":1505776141772},{"_id":"source/_posts/hello-world.md","hash":"293995a2494e6f4118c11833893b885eb129f495","modified":1492745401000},{"_id":"source/_posts/关厢村野间切割出的方正家园.md","hash":"72bbad246fa917de199dc3f30528f972d52bdd42","modified":1492815151000},{"_id":"source/_posts/曾经的签名.md","hash":"c0e08cef33611619595afbb8fdacced2342f00a3","modified":1492756901000},{"_id":"source/_posts/最初的自己要到哪里去找.md","hash":"431e2876edb8d92110255d725913dc3b1413289b","modified":1492815147000},{"_id":"source/_posts/湾区玩什么.md","hash":"8f4f37596b6276dbcc8094136228c9d02eef482a","modified":1512718796103},{"_id":"source/_posts/理财规划-信用卡.md","hash":"1ceccbce26ad1bd458f7af99b36850646b00fb2f","modified":1492799741000},{"_id":"source/_posts/生产力与实用性工具.md","hash":"4fb8036d2f1fc1ccf7268e4bf41e5ef903f50c8c","modified":1492906874000},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1509176620321},{"_id":"source/about/index.md","hash":"9b72bb6f8feb0dc0ad019891f1c11aae0556f30b","modified":1509176626148},{"_id":"source/categories/index.md","hash":"d7032808dca7dafc66fc1950a8343fc60ee69776","modified":1524537074712},{"_id":"source/tags/index.md","hash":"f6438a4c3825599506486b002ffb7ec24bd14606","modified":1493094811000},{"_id":"source/uploads/avatar.jpg","hash":"6606af16fb9b3f0e35ba8c3299441b1f5a438781","modified":1471122732000},{"_id":"themes/next-reloaded/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524531129681},{"_id":"themes/next-reloaded/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1524531129684},{"_id":"themes/next-reloaded/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524531126644},{"_id":"themes/next-reloaded/.git/index","hash":"6c1fa697e9962ff09b05e0971f4aa78febcf0587","modified":1524538339568},{"_id":"themes/next-reloaded/.git/packed-refs","hash":"706e31ca7d179fc3f60b81aef4780d2ea168c400","modified":1524531129678},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1524531129691},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1524531129692},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1524531129692},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1524531129692},{"_id":"themes/next-reloaded/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524531129693},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1524531129693},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1524531129697},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1524531129697},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1524531129697},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1524531129698},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1524531129698},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1524531129698},{"_id":"themes/next-reloaded/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1524531129699},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1524531129699},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1524531129699},{"_id":"themes/next-reloaded/languages/de.yml","hash":"1bdc91fdd74f41c2432273e0f469e27613e79962","modified":1524531129704},{"_id":"themes/next-reloaded/languages/default.yml","hash":"527902104af2444106ddaa2c4f24309f9c103c6b","modified":1524531129704},{"_id":"themes/next-reloaded/languages/en.yml","hash":"527902104af2444106ddaa2c4f24309f9c103c6b","modified":1524531129704},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"52e8cfc1984e1fe8235f97983693fe4ef724d002","modified":1524531129704},{"_id":"themes/next-reloaded/languages/id.yml","hash":"f457487bb96130b7efb7125275e2d26e106c9071","modified":1524531129704},{"_id":"themes/next-reloaded/languages/it.yml","hash":"d16885be837e99d44c8c004b07b53ac78e443087","modified":1524531129704},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"567b2b57ffcbea409c897b74b41f82d3bd35d7ac","modified":1524531129705},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"65aea531d1e2cbb79d15cec8c4f5c3d615a11fa6","modified":1524531129705},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"446dd4bc56efbb8bf0b8e7acf1a077b3e7643edf","modified":1524531129705},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"2ef3d965569d727047b310a2c5dfff15cbc4d653","modified":1524531129705},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"b50964d3fbee2a2f83be7a2842333556bc971839","modified":1524531129705},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"056da24924342926cbb7f3cab123e3a116a855e7","modified":1524531129706},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"0664fe016b30be41e6f73e4fc5171d748df09269","modified":1524531129706},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"d305b5f55aeffc879ca3405cbe660a00f1914255","modified":1524531129706},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"65f9b33eaef2f99944c16d84d44fd9a3027af762","modified":1524531129706},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"4323f8b8ed7a52b6bb0dc938acf58b15eab85abc","modified":1524531129707},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"69455c196d0d06b717b614ba4d49d1980d251429","modified":1524531129707},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"541c4e65b52e6e5fdd164791267275b2e22de57b","modified":1524531129708},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1524531129725},{"_id":"themes/next-reloaded/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1524531129725},{"_id":"themes/next-reloaded/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1524531129726},{"_id":"themes/next-reloaded/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1524531129726},{"_id":"themes/next-reloaded/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1524531129726},{"_id":"themes/next-reloaded/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1524531129726},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1524531129726},{"_id":"themes/next-reloaded/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1524531129727},{"_id":"themes/next-reloaded/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1524531129727},{"_id":"themes/next-reloaded/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1524531129727},{"_id":"themes/next-reloaded/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1524531129775},{"_id":"themes/next-reloaded/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1524531129776},{"_id":"themes/next-reloaded/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1524531129776},{"_id":"source/uploads/wechatpay.jpeg","hash":"a00e5263ce598b82abf1f61db0ea28f69f3dba9d","modified":1492743696000},{"_id":"themes/next-reloaded/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129757},{"_id":"themes/next-reloaded/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524531126656},{"_id":"themes/next-reloaded/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524531126648},{"_id":"themes/next-reloaded/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524531126658},{"_id":"themes/next-reloaded/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524531126659},{"_id":"themes/next-reloaded/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524531126655},{"_id":"themes/next-reloaded/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524531126659},{"_id":"themes/next-reloaded/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524531126655},{"_id":"themes/next-reloaded/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524531126657},{"_id":"themes/next-reloaded/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524531126657},{"_id":"themes/next-reloaded/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524531126660},{"_id":"themes/next-reloaded/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524531126636},{"_id":"themes/next-reloaded/.git/logs/HEAD","hash":"5e9cc4fe7745e493de9aa88ce934de60521b4d06","modified":1524531129682},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1524531129700},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1524531129700},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"9a024758752e3baa487fab6b8f4b504bcef7a935","modified":1524531129700},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1524531129701},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1524531129701},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1524531129701},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1524531129701},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1524531129702},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1524531129702},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1524531129702},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1524531129703},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"024eca07939ae6be22909fea7c2f0826b8859bfe","modified":1524531129703},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1524531129703},{"_id":"themes/next-reloaded/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1524531129707},{"_id":"themes/next-reloaded/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524531129707},{"_id":"themes/next-reloaded/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524531129708},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1524531129709},{"_id":"themes/next-reloaded/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1524531129709},{"_id":"themes/next-reloaded/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1524531129709},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"d231ae3e9663af04042676506ad44619f4b52c68","modified":1524531129709},{"_id":"themes/next-reloaded/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1524531129710},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1524531129710},{"_id":"themes/next-reloaded/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1524531129710},{"_id":"themes/next-reloaded/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1524531129710},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1524531129711},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"2d7209b15377fa1dac9ac5f759aa6b0506021789","modified":1524531129711},{"_id":"themes/next-reloaded/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1524531129713},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1524531129713},{"_id":"themes/next-reloaded/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1524531129715},{"_id":"themes/next-reloaded/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1524531129715},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1524531129715},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1524531129717},{"_id":"themes/next-reloaded/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1524531129720},{"_id":"themes/next-reloaded/layout/_third-party/copy-code.swig","hash":"08cbad4bb66196f2597682ca793e8c9f24b35c31","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1524531129722},{"_id":"themes/next-reloaded/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1524531129722},{"_id":"themes/next-reloaded/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1524531129723},{"_id":"themes/next-reloaded/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1524531129723},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1524531129723},{"_id":"themes/next-reloaded/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1524531129723},{"_id":"themes/next-reloaded/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1524531129723},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1524531129728},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1524531129728},{"_id":"themes/next-reloaded/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1524531129728},{"_id":"themes/next-reloaded/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1524531129728},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1524531129729},{"_id":"themes/next-reloaded/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1524531129729},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1524531129729},{"_id":"themes/next-reloaded/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1524531129729},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1524531129729},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1524531129729},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1524531129757},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1524531129758},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524531129758},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524531129758},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524531129758},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524531129759},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524531129759},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524531129759},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524531129759},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524531129760},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524531129760},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524531129760},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524531129760},{"_id":"themes/next-reloaded/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524531129760},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1524531129761},{"_id":"themes/next-reloaded/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524531129761},{"_id":"themes/next-reloaded/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524531129761},{"_id":"themes/next-reloaded/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524531129761},{"_id":"themes/next-reloaded/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524531129762},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129716},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129716},{"_id":"themes/next-reloaded/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129746},{"_id":"themes/next-reloaded/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129749},{"_id":"themes/next-reloaded/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129749},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129756},{"_id":"themes/next-reloaded/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524531129757},{"_id":"themes/next-reloaded/.git/refs/heads/master","hash":"ff4c932fa6b2219e53bfd2250504cb8091414e6d","modified":1524531129681},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1524531129708},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1524531129708},{"_id":"themes/next-reloaded/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1524531129711},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1524531129711},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1524531129712},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"b5c9f191c55622d778a1f4fb14008f858b87e8f7","modified":1524531129712},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"e76745ff68fc017c250d749880ab67a68a9f2695","modified":1524531129712},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1524531129712},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1524531129713},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1524531129713},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1524531129714},{"_id":"themes/next-reloaded/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1524531129714},{"_id":"themes/next-reloaded/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1524531129714},{"_id":"themes/next-reloaded/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1524531129714},{"_id":"themes/next-reloaded/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1524531129714},{"_id":"themes/next-reloaded/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1524531129715},{"_id":"themes/next-reloaded/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1524531129715},{"_id":"themes/next-reloaded/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1524531129716},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1524531129716},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1524531129717},{"_id":"themes/next-reloaded/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1524531129717},{"_id":"themes/next-reloaded/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1524531129717},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1524531129718},{"_id":"themes/next-reloaded/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1524531129718},{"_id":"themes/next-reloaded/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1524531129718},{"_id":"themes/next-reloaded/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1524531129718},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1524531129719},{"_id":"themes/next-reloaded/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1524531129718},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1524531129719},{"_id":"themes/next-reloaded/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1524531129719},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1524531129719},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1524531129719},{"_id":"themes/next-reloaded/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1524531129720},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1524531129720},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1524531129720},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1524531129720},{"_id":"themes/next-reloaded/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1524531129721},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1524531129722},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1524531129722},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1524531129722},{"_id":"themes/next-reloaded/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1524531129724},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1524531129724},{"_id":"themes/next-reloaded/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1524531129725},{"_id":"themes/next-reloaded/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1524531129725},{"_id":"themes/next-reloaded/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1524531129746},{"_id":"themes/next-reloaded/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1524531129746},{"_id":"themes/next-reloaded/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1524531129749},{"_id":"themes/next-reloaded/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1524531129749},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1524531129756},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1524531129756},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1524531129756},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1524531129757},{"_id":"themes/next-reloaded/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524531129762},{"_id":"themes/next-reloaded/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524531129762},{"_id":"themes/next-reloaded/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1524531129762},{"_id":"themes/next-reloaded/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524531129762},{"_id":"themes/next-reloaded/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524531129763},{"_id":"themes/next-reloaded/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1524531129763},{"_id":"themes/next-reloaded/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1524531129763},{"_id":"themes/next-reloaded/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524531129764},{"_id":"themes/next-reloaded/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524531129764},{"_id":"themes/next-reloaded/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1524531129764},{"_id":"themes/next-reloaded/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1524531129765},{"_id":"themes/next-reloaded/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1524531129765},{"_id":"themes/next-reloaded/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1524531129765},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524531129765},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1524531129765},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524531129774},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524531129775},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524531129775},{"_id":"themes/next-reloaded/.git/objects/pack/pack-18483f5c5172d64f2a3bc1f0a48cd69046e66345.idx","hash":"6f060df40ca18365e93e52b4d85d4d447e10c3cc","modified":1524531129670},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524531129771},{"_id":"themes/next-reloaded/.git/logs/refs/heads/master","hash":"5e9cc4fe7745e493de9aa88ce934de60521b4d06","modified":1524531129682},{"_id":"themes/next-reloaded/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524531129680},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1524531129724},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1524531129724},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1524531129730},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1524531129730},{"_id":"themes/next-reloaded/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1524531129730},{"_id":"themes/next-reloaded/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1524531129730},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1524531129731},{"_id":"themes/next-reloaded/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1524531129735},{"_id":"themes/next-reloaded/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1524531129740},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1524531129744},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1524531129744},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1524531129745},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1524531129745},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1524531129745},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1524531129745},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1524531129746},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1524531129750},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1524531129750},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1524531129750},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1524531129750},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1524531129751},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1524531129751},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524531129751},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1524531129751},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1524531129753},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1524531129753},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1524531129753},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524531129753},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1524531129754},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1524531129754},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1524531129755},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1524531129755},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1524531129755},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1524531129755},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1524531129755},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1524531129756},{"_id":"themes/next-reloaded/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524531129764},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524531129766},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524531129766},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524531129767},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524531129771},{"_id":"themes/next-reloaded/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524531129772},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524531129770},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524531129770},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524531129773},{"_id":"themes/next-reloaded/.git/logs/refs/remotes/origin/HEAD","hash":"5e9cc4fe7745e493de9aa88ce934de60521b4d06","modified":1524531129680},{"_id":"themes/next-reloaded/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1524531129731},{"_id":"themes/next-reloaded/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1524531129731},{"_id":"themes/next-reloaded/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1524531129732},{"_id":"themes/next-reloaded/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1524531129732},{"_id":"themes/next-reloaded/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1524531129732},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1524531129732},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1524531129732},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1524531129733},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1524531129733},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1524531129733},{"_id":"themes/next-reloaded/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1524531129733},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1524531129734},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1524531129734},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1524531129734},{"_id":"themes/next-reloaded/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1524531129734},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1524531129734},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1524531129735},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1524531129735},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1524531129736},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1524531129736},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1524531129736},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1524531129736},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1524531129737},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1524531129738},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1524531129738},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1524531129738},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1524531129738},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1524531129738},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1524531129739},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1524531129740},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1524531129740},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1524531129740},{"_id":"themes/next-reloaded/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1524531129740},{"_id":"themes/next-reloaded/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1524531129741},{"_id":"themes/next-reloaded/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1524531129741},{"_id":"themes/next-reloaded/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1524531129741},{"_id":"themes/next-reloaded/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1524531129741},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1524531129741},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1524531129742},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1524531129742},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1524531129742},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1524531129742},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1524531129742},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1524531129743},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1524531129744},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1524531129744},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1524531129752},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524531129752},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524531129754},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524531129769},{"_id":"themes/next-reloaded/.git/objects/pack/pack-18483f5c5172d64f2a3bc1f0a48cd69046e66345.pack","hash":"66b1531046039f86043d30cbd790ccd1f91a3c56","modified":1524531129669},{"_id":"public/baidusitemap.xml","hash":"ecb97d6ea59163d985889aab707b524edc2e7b37","modified":1524539551871},{"_id":"public/search.xml","hash":"70cbcadbed7ad11e05c322107521f4ac37fa0afb","modified":1524539551902},{"_id":"public/sitemap.xml","hash":"eb4ff5e60705949a238665cefbf5e2cd7ed6f110","modified":1524539551902},{"_id":"public/archives/2017/05/index.html","hash":"79abf050deb6d938116f55a2d2272875efa89619","modified":1524539551915},{"_id":"public/archives/2017/06/index.html","hash":"ad33f80dcb479a5039336b57e9faee825b4cbbe1","modified":1524539551915},{"_id":"public/archives/2017/07/index.html","hash":"fae188bce9a4e651aaa6aba96f206d39ac72a151","modified":1524539551916},{"_id":"public/archives/2017/12/index.html","hash":"0e307d9c02d4b9c2e9a67fe22aee2ae2fc8e8b6d","modified":1524539551916},{"_id":"public/archives/2018/01/index.html","hash":"08034b8a343fcf54afcb6c6069df5bffce68a00b","modified":1524539551916},{"_id":"public/archives/2018/03/index.html","hash":"4469ae8000c0a7c10aea68ab9228e17f06fbfaae","modified":1524539551916},{"_id":"public/archives/2018/04/index.html","hash":"82f021ccfe8bab86229b7abd430c6213c4a396e5","modified":1524539551916},{"_id":"public/categories/Sports/index.html","hash":"3c554abd6ad1c240fa93473677ddde50e2a2aee3","modified":1524539551916},{"_id":"public/categories/BFS/index.html","hash":"486bfe89eab81b5407c970c9522d7ff883cceffd","modified":1524539551916},{"_id":"public/categories/Leetcode/page/2/index.html","hash":"1ffc9700b74847ce0381a811ec4e69f4a1fa7086","modified":1524539551916},{"_id":"public/categories/BFS/DFS/index.html","hash":"2b9711beac5dead058d96aa15a3ce98a2dcee1f2","modified":1524539551916},{"_id":"public/categories/heap/index.html","hash":"2bf1d916052f3e82bae32c863f7d5362029e75f0","modified":1524539551916},{"_id":"public/categories/Technology/index.html","hash":"290fa74942d5a239221e8bc40f04da09806ee9ab","modified":1524539551917},{"_id":"public/categories/Interview/index.html","hash":"9dfc36b2fffcb14d36dd5a4a4170f8e17b69a5c2","modified":1524539551917},{"_id":"public/categories/Thinking/index.html","hash":"bd37c9f358e26eef21b82d14a0368484e1177a13","modified":1524539551917},{"_id":"public/categories/Living/index.html","hash":"028a087900d3edf89d28982f68689cfd43400fdc","modified":1524539551917},{"_id":"public/categories/Trie/index.html","hash":"863a23adf69b5ba637cb8edd41477df7d6418fea","modified":1524539551917},{"_id":"public/categories/Tree/index.html","hash":"ea35baf6647ac6f6b92d4b73a82b9cc36aaae22c","modified":1524539551917},{"_id":"public/categories/Union-Find/index.html","hash":"0d6aabba8246d7acda9cc5af85dfbda31cb55bec","modified":1524539551917},{"_id":"public/categories/History/index.html","hash":"2cfc53c5fff09e177cafdc74ef8ff578f77d1eba","modified":1524539551917},{"_id":"public/categories/Movie/index.html","hash":"0c98ab67d119c618e42c182aca03707f3c497fe2","modified":1524539551917},{"_id":"public/categories/Finance/index.html","hash":"58f0ef2e2bac66874a3db8c3c2e9c666600b4227","modified":1524539551917},{"_id":"public/categories/Tree/DFS/index.html","hash":"d086dcf6e31837c8299c1a6dfb16ead1bb4375a0","modified":1524539551917},{"_id":"public/categories/Union-Find/DFS/index.html","hash":"4d5b861bdf086eece08eb61cd2b62ab08dcca840","modified":1524539551918},{"_id":"public/categories/Tree/DFS/BFS/index.html","hash":"27f2918d9a24a451324b854c03cb93c5311cc537","modified":1524539551918},{"_id":"public/tags/Football/index.html","hash":"246adfbfe2eab121b3a0565befd9a5fc97de6293","modified":1524539551918},{"_id":"public/tags/Backtracking/index.html","hash":"7e68eafc30cd64c67b9035cb32644073d785a260","modified":1524539551918},{"_id":"public/tags/DFS/index.html","hash":"df1e8a8cc2dd77aea33902ce00dcaa02df627182","modified":1524539551918},{"_id":"public/tags/BFS/index.html","hash":"0b4ecbbe6399f88296f221223aba6a80296ee808","modified":1524539551918},{"_id":"public/tags/DP/index.html","hash":"b0653c08d23367485edf45391cbfb329f6dc4bf2","modified":1524539551918},{"_id":"public/tags/Design/index.html","hash":"91afa49128880110bc2d401db1fc6265db251bb2","modified":1524539551918},{"_id":"public/tags/String/index.html","hash":"04b57e20b67c10c3c418d0d088fbceb23656f2da","modified":1524539551918},{"_id":"public/tags/配置/index.html","hash":"cac7df8dcfc596898d9d298c9af0cbdaad25f937","modified":1524539551919},{"_id":"public/tags/Indeed/index.html","hash":"a954ed85c089866a74c32688aeef29914221c78e","modified":1524539551919},{"_id":"public/tags/New-York/index.html","hash":"294c30fe8ace7416276203a033ec496a5f760a77","modified":1524539551919},{"_id":"public/tags/Boston/index.html","hash":"63e963909685a61bb188d8156273a01e4e6b1c76","modified":1524539551919},{"_id":"public/tags/RhodeIsland/index.html","hash":"4c22a1ee2cfbb313290491349c80a2fbbd157744","modified":1524539551919},{"_id":"public/tags/border/index.html","hash":"f74a90240c798ac6b32dd687f6310609c8b0d83a","modified":1524539551919},{"_id":"public/tags/library/index.html","hash":"6985e0125a1456b47098d736e9f39340620781b5","modified":1524539551919},{"_id":"public/tags/Vermont/index.html","hash":"db7d3f080106148dde1f93c21b12fed1fa1afb65","modified":1524539551919},{"_id":"public/tags/Website/index.html","hash":"48c9654771333ac62473acdedfe19407d91eab09","modified":1524539551919},{"_id":"public/tags/LinkedList/index.html","hash":"d9d3704c0b1da342a566711898c451d6bc682577","modified":1524539551919},{"_id":"public/tags/TwoPointer/index.html","hash":"dd32d01914b4ae854f6bb978dff9d2bec1b75d82","modified":1524539551919},{"_id":"public/tags/SlidingWindow/index.html","hash":"133b1dadafe1a5d4929b614245a8f3f0f4712f85","modified":1524539551919},{"_id":"public/tags/Newsletter/index.html","hash":"bf2ac98d87cf37546fd457790106449ed9e30ef6","modified":1524539551919},{"_id":"public/tags/Product/index.html","hash":"0032f8e8a1f1271d0ce24a7d02ea3fcaddc50479","modified":1524539551919},{"_id":"public/tags/Love/index.html","hash":"c30c68455bd087a21440591e85daa6f109ac2aba","modified":1524539551919},{"_id":"public/tags/Quote/index.html","hash":"f256765e7a2c607bde6492654d1f1a579aeb9f2b","modified":1524539551920},{"_id":"public/tags/stack/index.html","hash":"590cd7990299525cf956b208a733588cda230df5","modified":1524539551920},{"_id":"public/tags/TopLogicalSort/index.html","hash":"e33fce230cad67a5ec756a5414d98308d90f0dcb","modified":1524539551920},{"_id":"public/tags/USC/index.html","hash":"6960b812983fc55010c77e2aa639e75a3a6c011f","modified":1524539551920},{"_id":"public/tags/Rental/index.html","hash":"0e915687c92b19fe030a15f30b5143b400eede4c","modified":1524539551920},{"_id":"public/tags/方庄/index.html","hash":"dccfa04b5d36f6963f218beb81f0dda7bab47662","modified":1524539551920},{"_id":"public/tags/签名/index.html","hash":"0c5aba0588d00fc76b99029fb8451dc6f7d3afb8","modified":1524539551920},{"_id":"public/tags/过往/index.html","hash":"c1b6b57268448e7c34853255b593a679b0d4e937","modified":1524539551920},{"_id":"public/tags/影评/index.html","hash":"18ef098266003f5b499faf5bf0f114e53a2b02bd","modified":1524539551920},{"_id":"public/tags/英剧/index.html","hash":"1f3cee994568aabcea783923c88e553b53b62cbd","modified":1524539551920},{"_id":"public/tags/credit-card/index.html","hash":"379e95321fbe652fc011d8225786f35999695f56","modified":1524539551920},{"_id":"public/tags/Chase/index.html","hash":"af9cb25e8205bed5a5ac8e38c42d856e459ff8d5","modified":1524539551920},{"_id":"public/tags/Amex/index.html","hash":"0a20ddac7db6e6becd5486a9fc2d705cc40ec537","modified":1524539551920},{"_id":"public/tags/Tools/index.html","hash":"3387699fc32476a9c453bfa52dd9032bb3088244","modified":1524539551920},{"_id":"public/tags/Mac/index.html","hash":"5a158d89abb21cb174cbf8ce5eb7adecc02dcacb","modified":1524539551921},{"_id":"public/tags/IOS/index.html","hash":"4c2bf2499ccdf373737f4923a5deaba755ffbb4f","modified":1524539551921},{"_id":"public/about/index.html","hash":"7eb1a29c3fc2a2797f262bd6fddf53da2b78d1fb","modified":1524539551921},{"_id":"public/categories/index.html","hash":"2fb614b9753c0f1031fcc7da1294bf4681ff0966","modified":1524539551921},{"_id":"public/tags/index.html","hash":"108c1464581782c36dbcadfa1f6db66706938e94","modified":1524539551921},{"_id":"public/2018/04/22/Trie-类型总结/index.html","hash":"0a8c368bf61aa23ac37f2191df29f1f2a4cbe370","modified":1524539551921},{"_id":"public/2018/03/22/Design-问题/index.html","hash":"7829a9f916f7982d6b810eb4f434236e26a96dcb","modified":1524539551921},{"_id":"public/2018/03/11/TopLogicalSort-总结/index.html","hash":"8aab9e4df76865383767458a38b7a6f5704c2508","modified":1524539551921},{"_id":"public/2018/03/10/DFS-BFS-总结/index.html","hash":"86a2c37524d63c1b0318de86cf48d5cb7c67cdba","modified":1524539551921},{"_id":"public/2018/01/09/American-Football-101/index.html","hash":"31c6aea34e7e5c4c4ed1661e51ce466404ff4bdf","modified":1524539551921},{"_id":"public/2017/12/15/Leetcode-Solution-Reference-Website/index.html","hash":"f1a708e6825aab5536a4650d9d110b481ffbcedf","modified":1524539551921},{"_id":"public/2017/10/24/Two-Pointer问题总结/index.html","hash":"983c62bcb0df8ff93f53d717739ca245100c94f4","modified":1524539551921},{"_id":"public/2017/10/24/String总结/index.html","hash":"9208542400508398807281e193bda1dbaf735737","modified":1524539551922},{"_id":"public/2017/10/24/Stack总结/index.html","hash":"93be21a4b9f909001869b1eb69c960e8e78f3f96","modified":1524539551922},{"_id":"public/2017/10/19/DP总结/index.html","hash":"84dffd083c625b9f0db350aaa9b0e4f1a81d82d6","modified":1524539551922},{"_id":"public/2017/10/19/Indeed面试总结/index.html","hash":"e1ddcafd7f690f6c88b9ad738bfe32cd0aa6bc51","modified":1524539551922},{"_id":"public/2017/10/19/Opinion-about-Love/index.html","hash":"e310043da93d3d2e30174231975e140a3ef33014","modified":1524539551922},{"_id":"public/2017/09/25/湾区玩什么/index.html","hash":"44eac8df505922957e287b50c6b611193ebe6ed3","modified":1524539551922},{"_id":"public/2017/09/24/Tree总结/index.html","hash":"67eae604fc5a0f0d8f04f11e50baa15c97d53f5d","modified":1524539551922},{"_id":"public/2017/09/20/Heap总结/index.html","hash":"cfd058a07fc82c647704cf48eba8ba6636bb1c71","modified":1524539551922},{"_id":"public/2017/09/18/Union-Find总结/index.html","hash":"9cbfbe757d9e32628f7d11c4bc5cf74605bb769e","modified":1524539551923},{"_id":"public/2017/09/10/BFS-Maze类型总结/index.html","hash":"ecb40a64fd46b8fc6bbd49dab0af6004379e2d77","modified":1524539551923},{"_id":"public/2017/09/06/Backtracking总结/index.html","hash":"dd1b484fcdb7851e2091fe87ee5b217297d6042d","modified":1524539551923},{"_id":"public/2017/07/10/LinkedList系列/index.html","hash":"00cc57d25e0e18f362bfb1ee352896505b174e9e","modified":1524539551923},{"_id":"public/2017/07/08/Google面经不断更新/index.html","hash":"2662028db79dba4ff5ab778e98dcc67bef3e7cd9","modified":1524539551923},{"_id":"public/2017/07/07/Longest-Substring系列/index.html","hash":"e706972a24f042ea77fc6b03f31e4c4de76f495f","modified":1524539551923},{"_id":"public/2017/06/03/TEST/index.html","hash":"78c35680bfada1fd21a661ec5c8b4c00490054db","modified":1524539551923},{"_id":"public/2017/06/02/Joshua美东探索IV-Haskell-Free-Library/index.html","hash":"b76e6fdbe7fbff9e1e1f47918fa00fbaeafba2a3","modified":1524539551924},{"_id":"public/2017/05/31/Joshua之美东探索II-纽约波士顿/index.html","hash":"2b30fc15737a40c6529b29eb76f8c02f7512ae1c","modified":1524539551924},{"_id":"public/2017/05/29/Joshua之美东探索I-罗德岛/index.html","hash":"9f51e23c8fbcc87f85102a898e49e477f6c6a5bc","modified":1524539551924},{"_id":"public/2017/05/03/Quote-John-Adams-Education/index.html","hash":"d401e62000424b9b66c9031ca5ed06ad23e7bf15","modified":1524539551925},{"_id":"public/2017/04/22/USC生活小技巧/index.html","hash":"1484f1eb77e4d6d3647485a5b7219e0523eed00f","modified":1524539551925},{"_id":"public/2017/04/21/理财规划-信用卡/index.html","hash":"3a161c3bda648b909875a0c34beb5982b04a665c","modified":1524539551925},{"_id":"public/2017/04/20/生产力与实用性工具/index.html","hash":"1d6b70e26c9bd5f27a9c7c273e715008030cc1e4","modified":1524539551926},{"_id":"public/2017/04/20/曾经的签名/index.html","hash":"228c48d2dbe61ca14172d890ce28d2eec9ce2f63","modified":1524539551926},{"_id":"public/2017/04/20/NewsLetter-Make-a-product/index.html","hash":"bb95690e320e066dfd489174f391d88ed964a9f4","modified":1524539551926},{"_id":"public/2017/04/20/最初的自己要到哪里去找/index.html","hash":"b25cf35832e9c52eced8afab9fb32e1463198076","modified":1524539551926},{"_id":"public/2017/04/20/关厢村野间切割出的方正家园/index.html","hash":"3f04425b385131c1dfccaaf4e2a91786e3a92358","modified":1524539551926},{"_id":"public/2017/04/20/Hexo配置-2/index.html","hash":"debb4f75855c7e658e2b89ae1e605afc09d68aa1","modified":1524539551927},{"_id":"public/2017/04/20/hello-world/index.html","hash":"a33a219edfc45a0b50f9c798266495d997822805","modified":1524539551927},{"_id":"public/archives/index.html","hash":"983d7c383063069cc4e61e4503bf21487ac7a959","modified":1524539551927},{"_id":"public/archives/page/2/index.html","hash":"ffd5c154d25f5ba2d1076c5fdfd884511d012b59","modified":1524539551927},{"_id":"public/archives/page/3/index.html","hash":"4f9555ebf84c8dad82d7d678beaf3257d0f44220","modified":1524539551927},{"_id":"public/archives/page/4/index.html","hash":"dc62277aa1047d822b5246cf6c2412de86b57402","modified":1524539551927},{"_id":"public/archives/2017/index.html","hash":"46a025d521d20f4c3fcd0246d2f23efcd871922d","modified":1524539551927},{"_id":"public/archives/2017/page/2/index.html","hash":"a802bd425975d197e08f970fe74b926ddb03e7da","modified":1524539551927},{"_id":"public/archives/2017/page/3/index.html","hash":"b6c9f61f4404efc1b3b6b13d1ea0a6da9bff88ff","modified":1524539551927},{"_id":"public/archives/2017/04/index.html","hash":"b66414691848c03e6788d725ce897abdae4bd440","modified":1524539551927},{"_id":"public/archives/2017/09/index.html","hash":"ea79a2f213ad8c7e0425d052046c036ce5e1d9b0","modified":1524539551927},{"_id":"public/archives/2017/10/index.html","hash":"d629c0d7cf39e26fad860f59ebd19527e6aa98df","modified":1524539551928},{"_id":"public/archives/2018/index.html","hash":"9c4957a2930447d15e21ac05e5c2a4acfeb9ed67","modified":1524539551928},{"_id":"public/categories/Leetcode/index.html","hash":"ce004383603075ecc8d4a3c86f733607f1e505ce","modified":1524539551928},{"_id":"public/categories/Travel/index.html","hash":"110c238f70efd170383a55646b2ce078ad0500cc","modified":1524539551928},{"_id":"public/index.html","hash":"df96aa18769d22cd0787f3e0fdf5fa0bbc3a8830","modified":1524539551928},{"_id":"public/page/2/index.html","hash":"2a64461368e79b7d8914de5ffa2cad357181cd0d","modified":1524539551928},{"_id":"public/page/3/index.html","hash":"d52a1812989c2331055206c701b0bd4a76dc11f7","modified":1524539551928},{"_id":"public/page/4/index.html","hash":"6705f71edabd646b9424ce458f8e85e8afc4a136","modified":1524539551928},{"_id":"public/tags/Leetcode/index.html","hash":"375372316945aabeae23d56cc560d7e7686d52cd","modified":1524539551928},{"_id":"public/uploads/avatar.jpg","hash":"6606af16fb9b3f0e35ba8c3299441b1f5a438781","modified":1524539551935},{"_id":"public/robots.txt","hash":"667d0518529f5c5d5501535db7681a5946808223","modified":1524539551935},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1524539551935},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524539551935},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524539551935},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524539551935},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524539551936},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524539551936},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524539551936},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524539551936},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524539551936},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524539551936},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524539551936},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524539551936},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524539551936},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1524539551936},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524539551936},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524539551936},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524539551936},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524539551937},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524539551937},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524539551937},{"_id":"public/uploads/wechatpay.jpeg","hash":"a00e5263ce598b82abf1f61db0ea28f69f3dba9d","modified":1524539552378},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524539552378},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524539552381},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524539552440},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524539552440},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1524539552440},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524539552440},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524539552440},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1524539552440},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1524539552440},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524539552440},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524539552441},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1524539552441},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1524539552441},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524539552441},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524539552441},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524539552441},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524539552441},{"_id":"public/css/main.css","hash":"2654a196c9ca051773d3323810cd061ddd2eee39","modified":1524539552441},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524539552441},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524539552442},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524539552442},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524539552442},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524539552442},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524539552442},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524539552442}],"Category":[{"name":"Sports","_id":"cjgd3hdek0004m2cac5xj3f2z"},{"name":"BFS","_id":"cjgd3hdep000am2ca6r491hez"},{"name":"Leetcode","_id":"cjgd3hdes000gm2ca8xni5pvg"},{"name":"DFS","parent":"cjgd3hdep000am2ca6r491hez","_id":"cjgd3hdf30012m2capmshp8ng"},{"name":"heap","_id":"cjgd3hdf8001hm2cad6vxqq34"},{"name":"Technology","_id":"cjgd3hdfb001qm2caie9yax5l"},{"name":"Interview","_id":"cjgd3hdff001xm2caedhimgl8"},{"name":"Travel","_id":"cjgd3hdfi0024m2cayf647cq1"},{"name":"Thinking","_id":"cjgd3hdfp002qm2cahgbpllq8"},{"name":"Living","_id":"cjgd3hdfv003cm2can0z3vfhm"},{"name":"Trie","_id":"cjgd3hdfw003gm2ca13aspryv"},{"name":"Tree","_id":"cjgd3hdfx003jm2cahvy8aaw0"},{"name":"Union-Find","_id":"cjgd3hdfx003pm2cayt6zt5ox"},{"name":"History","_id":"cjgd3hdfy003sm2cankfvdjhs"},{"name":"Movie","_id":"cjgd3hdg0003ym2cal81rg1cf"},{"name":"Finance","_id":"cjgd3hdg00042m2caeb9ri2qr"},{"name":"DFS","parent":"cjgd3hdfx003jm2cahvy8aaw0","_id":"cjgd3hdg20047m2ca9299nyf1"},{"name":"DFS","parent":"cjgd3hdfx003pm2cayt6zt5ox","_id":"cjgd3hdg3004am2cabstnvguy"},{"name":"BFS","parent":"cjgd3hdg20047m2ca9299nyf1","_id":"cjgd3hdg4004em2caf56o7qtw"}],"Data":[],"Page":[{"title":"关于","_content":"# 关于本博客\n立志于系统整理技术知识脉络，并记录过往点滴以及思考。  \n感谢Hexo以及NexT主题的帮助才得以构建这个博客。\n\n# 关于我\n![](/uploads/avatar.jpg)\n90后，生于北京，长于北京，现居于洛杉矶。  \n中学就读于[北京师大附中](http://www.bjsdfz.com)，本科就读于[北京工商大学](http://www.btbu.edu.cn),研究生就读于[南加大大学](http://www.usc.edu)。  \n喜爱户外探险，橄榄球，篮球；平时也向往探索各地各种美食。  \n介凌，我的字，也是我的文章之后常有的落款  \n介：何孤行之茕茕兮，孑不群而介立。耿介  \n凌：凌霄  \nYouhsuky， you：你；husky，哈士奇  \n\n出没于:  \n\n- 邮箱 bozhaoli1022@gmail.com\n- GitHub: [youhusky@GitHub](https://www.github.com/youhusky)\n- Instagram: [Joshua@Instagram](https://www.instagram.com/joshuali_youhusky/)\n- Linkedin: [Bozhao Li@Linkedin](https://www.linkedin.com/in/bozhaoli)\n- 展示页面: [Static Page](http://www.bozhaoli.info)\n","source":"about/index.md","raw":"---\ntitle: 关于\n---\n# 关于本博客\n立志于系统整理技术知识脉络，并记录过往点滴以及思考。  \n感谢Hexo以及NexT主题的帮助才得以构建这个博客。\n\n# 关于我\n![](/uploads/avatar.jpg)\n90后，生于北京，长于北京，现居于洛杉矶。  \n中学就读于[北京师大附中](http://www.bjsdfz.com)，本科就读于[北京工商大学](http://www.btbu.edu.cn),研究生就读于[南加大大学](http://www.usc.edu)。  \n喜爱户外探险，橄榄球，篮球；平时也向往探索各地各种美食。  \n介凌，我的字，也是我的文章之后常有的落款  \n介：何孤行之茕茕兮，孑不群而介立。耿介  \n凌：凌霄  \nYouhsuky， you：你；husky，哈士奇  \n\n出没于:  \n\n- 邮箱 bozhaoli1022@gmail.com\n- GitHub: [youhusky@GitHub](https://www.github.com/youhusky)\n- Instagram: [Joshua@Instagram](https://www.instagram.com/joshuali_youhusky/)\n- Linkedin: [Bozhao Li@Linkedin](https://www.linkedin.com/in/bozhaoli)\n- 展示页面: [Static Page](http://www.bozhaoli.info)\n","date":"2017-10-28T07:43:46.174Z","updated":"2017-10-28T07:43:46.148Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgd3hdei0001m2cam82zf6nz","content":"<h1 id=\"关于本博客\"><a href=\"#关于本博客\" class=\"headerlink\" title=\"关于本博客\"></a>关于本博客</h1><p>立志于系统整理技术知识脉络，并记录过往点滴以及思考。<br>感谢Hexo以及NexT主题的帮助才得以构建这个博客。</p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><img src=\"/uploads/avatar.jpg\" alt=\"\"><br>90后，生于北京，长于北京，现居于洛杉矶。<br>中学就读于<a href=\"http://www.bjsdfz.com\" target=\"_blank\" rel=\"noopener\">北京师大附中</a>，本科就读于<a href=\"http://www.btbu.edu.cn\" target=\"_blank\" rel=\"noopener\">北京工商大学</a>,研究生就读于<a href=\"http://www.usc.edu\" target=\"_blank\" rel=\"noopener\">南加大大学</a>。<br>喜爱户外探险，橄榄球，篮球；平时也向往探索各地各种美食。<br>介凌，我的字，也是我的文章之后常有的落款<br>介：何孤行之茕茕兮，孑不群而介立。耿介<br>凌：凌霄<br>Youhsuky， you：你；husky，哈士奇  </p>\n<p>出没于:  </p>\n<ul>\n<li>邮箱 bozhaoli1022@gmail.com</li>\n<li>GitHub: <a href=\"https://www.github.com/youhusky\" target=\"_blank\" rel=\"noopener\">youhusky@GitHub</a></li>\n<li>Instagram: <a href=\"https://www.instagram.com/joshuali_youhusky/\" target=\"_blank\" rel=\"noopener\">Joshua@Instagram</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/bozhaoli\" target=\"_blank\" rel=\"noopener\">Bozhao Li@Linkedin</a></li>\n<li>展示页面: <a href=\"http://www.bozhaoli.info\" target=\"_blank\" rel=\"noopener\">Static Page</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于本博客\"><a href=\"#关于本博客\" class=\"headerlink\" title=\"关于本博客\"></a>关于本博客</h1><p>立志于系统整理技术知识脉络，并记录过往点滴以及思考。<br>感谢Hexo以及NexT主题的帮助才得以构建这个博客。</p>\n<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h1><p><img src=\"/uploads/avatar.jpg\" alt=\"\"><br>90后，生于北京，长于北京，现居于洛杉矶。<br>中学就读于<a href=\"http://www.bjsdfz.com\" target=\"_blank\" rel=\"noopener\">北京师大附中</a>，本科就读于<a href=\"http://www.btbu.edu.cn\" target=\"_blank\" rel=\"noopener\">北京工商大学</a>,研究生就读于<a href=\"http://www.usc.edu\" target=\"_blank\" rel=\"noopener\">南加大大学</a>。<br>喜爱户外探险，橄榄球，篮球；平时也向往探索各地各种美食。<br>介凌，我的字，也是我的文章之后常有的落款<br>介：何孤行之茕茕兮，孑不群而介立。耿介<br>凌：凌霄<br>Youhsuky， you：你；husky，哈士奇  </p>\n<p>出没于:  </p>\n<ul>\n<li>邮箱 bozhaoli1022@gmail.com</li>\n<li>GitHub: <a href=\"https://www.github.com/youhusky\" target=\"_blank\" rel=\"noopener\">youhusky@GitHub</a></li>\n<li>Instagram: <a href=\"https://www.instagram.com/joshuali_youhusky/\" target=\"_blank\" rel=\"noopener\">Joshua@Instagram</a></li>\n<li>Linkedin: <a href=\"https://www.linkedin.com/in/bozhaoli\" target=\"_blank\" rel=\"noopener\">Bozhao Li@Linkedin</a></li>\n<li>展示页面: <a href=\"http://www.bozhaoli.info\" target=\"_blank\" rel=\"noopener\">Static Page</a></li>\n</ul>\n"},{"title":"categories","date":"2017-04-21T02:53:29.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-20 19:53:29\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-04-24T02:31:14.712Z","path":"categories/index.html","layout":"page","_id":"cjgd3hdek0003m2ca6foj2h5l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2017-04-21T02:53:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2017-04-20 19:53:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-04-25T04:33:31.000Z","path":"tags/index.html","layout":"page","_id":"cjgd3hdem0007m2cajmp7dxzv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"American Football 101","comments":1,"date":"2018-01-09T23:52:05.000Z","updated":"2018-01-09T23:52:05.000Z","_content":"# 起因\n开始看橄榄球主要是缘起于在上大学的时候每年在CCTV-5播放的超级碗决赛，当时也是从看着好爽-一群人互相撞，叠罗汉到慢慢了解规则，看出战术的路程。  \n到了来USC上学的这两年，只要是重要的比赛我都会买票(USC作为私立学校，每场比赛的票价还不低....)或者看电视直播。现场的氛围还是很棒的，毕竟在历史悠久的主场，满场的红色与加油声。  \n当然NFL(职业橄榄球)我是一直是New England Patriots的粉丝，Tom Brady Fans。（邦辰的老公）原因不仅仅是一直常年位居高位，而是丰富多变的战术和比利切克与布雷迪长达20年的合作(尽管最近传出来的消息说是有矛盾...而且确实是布雷迪和老板罗伯特卡夫关系更近)\n\n# 规则101\n\n我觉得靠着我自己贫瘠的文字水平容易误导，所以我摘要几个别人的介绍来给大家，既有蚊子也有视频。 \n\n- [美式橄榄球有哪些基本扫盲的知识？](https://www.zhihu.com/question/19965963) 来自知乎\n- [观赛指南——3分钟教你看橄榄球](http://www.nflchina.com/video/detail/1877764.html) 来自NFLChina官网，另外也可以看看它别的介绍视频，觉得很不错\n\n其实核心来说就是把球放进端区，达阵得分并且只能有一次向前传球的机会。核心人物是传球手四分卫，接球手Wide-Receiver，持球向前跑的跑锋和防守组成员角卫-防守对方外接手...\n\n# 经典比赛\n\n这两年我看过的经典比赛还不少..我来慢慢数\n\n- 2017 `Rose Bowl` #9 USC vs #5 Penn State `52-49` [最跌宕起伏的玫瑰碗--剧情一波三折] \n- 2017 `SuperBowl LI` New England Patriots vs Atlanta Falcons `34-28` [超级碗史上最大的反超 从第三节3-28落后开始反击]\n- 2018 `College Football Playoff National Championship` #4 Alabama vs #3 Georgia `26-23` [本来有机会常规时间靠着踢球扳平的]\n\n# 私人感受\n## USC\n作为Trojin来说，这两年是USC最近10年来最好的时光，自从Pete Carroll走后，我们承接了因为Reggie Bush收礼物被NCAA惩罚的后果而一直无法兴起，USC从02年到08年的统治就像这10年Alabama的统治一样。我们这两年有着豪华的:\n\n- Quarterback: Sam Darnold\n- Wide Receiver: Juju Smith-Schuster, Deontay Burrnett\n- Cornerback: Adoree' Jackson\n- Tailback: Ronald Jones II \n\n## Patriots\n当然作为爱国者的粉丝无疑是幸福的，#1 四分卫Tom Brady，进攻阵中明星球员不少，而且都有着出色的表现，防守组同样功不可没。\n\n- Quarterback: Tom Brady\n- Wide Receiver: Danny Amendola, Julian Edelman, Randy Moss\n- Tight Ends: Rob Gronkowski\n- Linebackers:  Dont'a Hightowe\n- Kicker: Stephen Gostkowski, Adam Vinatieri","source":"_posts/American-Football-101.md","raw":"---\ntitle: American Football 101\ncomments: true\ndate: 2018-01-09 15:52:05\nupdated: 2018-01-09 15:52:05\ncategories: Sports\ntags: Football\n---\n# 起因\n开始看橄榄球主要是缘起于在上大学的时候每年在CCTV-5播放的超级碗决赛，当时也是从看着好爽-一群人互相撞，叠罗汉到慢慢了解规则，看出战术的路程。  \n到了来USC上学的这两年，只要是重要的比赛我都会买票(USC作为私立学校，每场比赛的票价还不低....)或者看电视直播。现场的氛围还是很棒的，毕竟在历史悠久的主场，满场的红色与加油声。  \n当然NFL(职业橄榄球)我是一直是New England Patriots的粉丝，Tom Brady Fans。（邦辰的老公）原因不仅仅是一直常年位居高位，而是丰富多变的战术和比利切克与布雷迪长达20年的合作(尽管最近传出来的消息说是有矛盾...而且确实是布雷迪和老板罗伯特卡夫关系更近)\n\n# 规则101\n\n我觉得靠着我自己贫瘠的文字水平容易误导，所以我摘要几个别人的介绍来给大家，既有蚊子也有视频。 \n\n- [美式橄榄球有哪些基本扫盲的知识？](https://www.zhihu.com/question/19965963) 来自知乎\n- [观赛指南——3分钟教你看橄榄球](http://www.nflchina.com/video/detail/1877764.html) 来自NFLChina官网，另外也可以看看它别的介绍视频，觉得很不错\n\n其实核心来说就是把球放进端区，达阵得分并且只能有一次向前传球的机会。核心人物是传球手四分卫，接球手Wide-Receiver，持球向前跑的跑锋和防守组成员角卫-防守对方外接手...\n\n# 经典比赛\n\n这两年我看过的经典比赛还不少..我来慢慢数\n\n- 2017 `Rose Bowl` #9 USC vs #5 Penn State `52-49` [最跌宕起伏的玫瑰碗--剧情一波三折] \n- 2017 `SuperBowl LI` New England Patriots vs Atlanta Falcons `34-28` [超级碗史上最大的反超 从第三节3-28落后开始反击]\n- 2018 `College Football Playoff National Championship` #4 Alabama vs #3 Georgia `26-23` [本来有机会常规时间靠着踢球扳平的]\n\n# 私人感受\n## USC\n作为Trojin来说，这两年是USC最近10年来最好的时光，自从Pete Carroll走后，我们承接了因为Reggie Bush收礼物被NCAA惩罚的后果而一直无法兴起，USC从02年到08年的统治就像这10年Alabama的统治一样。我们这两年有着豪华的:\n\n- Quarterback: Sam Darnold\n- Wide Receiver: Juju Smith-Schuster, Deontay Burrnett\n- Cornerback: Adoree' Jackson\n- Tailback: Ronald Jones II \n\n## Patriots\n当然作为爱国者的粉丝无疑是幸福的，#1 四分卫Tom Brady，进攻阵中明星球员不少，而且都有着出色的表现，防守组同样功不可没。\n\n- Quarterback: Tom Brady\n- Wide Receiver: Danny Amendola, Julian Edelman, Randy Moss\n- Tight Ends: Rob Gronkowski\n- Linebackers:  Dont'a Hightowe\n- Kicker: Stephen Gostkowski, Adam Vinatieri","slug":"American-Football-101","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdef0000m2cae3lku92c","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>开始看橄榄球主要是缘起于在上大学的时候每年在CCTV-5播放的超级碗决赛，当时也是从看着好爽-一群人互相撞，叠罗汉到慢慢了解规则，看出战术的路程。<br>到了来USC上学的这两年，只要是重要的比赛我都会买票(USC作为私立学校，每场比赛的票价还不低….)或者看电视直播。现场的氛围还是很棒的，毕竟在历史悠久的主场，满场的红色与加油声。<br>当然NFL(职业橄榄球)我是一直是New England Patriots的粉丝，Tom Brady Fans。（邦辰的老公）原因不仅仅是一直常年位居高位，而是丰富多变的战术和比利切克与布雷迪长达20年的合作(尽管最近传出来的消息说是有矛盾…而且确实是布雷迪和老板罗伯特卡夫关系更近)</p>\n<h1 id=\"规则101\"><a href=\"#规则101\" class=\"headerlink\" title=\"规则101\"></a>规则101</h1><p>我觉得靠着我自己贫瘠的文字水平容易误导，所以我摘要几个别人的介绍来给大家，既有蚊子也有视频。 </p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/19965963\" target=\"_blank\" rel=\"noopener\">美式橄榄球有哪些基本扫盲的知识？</a> 来自知乎</li>\n<li><a href=\"http://www.nflchina.com/video/detail/1877764.html\" target=\"_blank\" rel=\"noopener\">观赛指南——3分钟教你看橄榄球</a> 来自NFLChina官网，另外也可以看看它别的介绍视频，觉得很不错</li>\n</ul>\n<p>其实核心来说就是把球放进端区，达阵得分并且只能有一次向前传球的机会。核心人物是传球手四分卫，接球手Wide-Receiver，持球向前跑的跑锋和防守组成员角卫-防守对方外接手…</p>\n<h1 id=\"经典比赛\"><a href=\"#经典比赛\" class=\"headerlink\" title=\"经典比赛\"></a>经典比赛</h1><p>这两年我看过的经典比赛还不少..我来慢慢数</p>\n<ul>\n<li>2017 <code>Rose Bowl</code> #9 USC vs #5 Penn State <code>52-49</code> [最跌宕起伏的玫瑰碗–剧情一波三折] </li>\n<li>2017 <code>SuperBowl LI</code> New England Patriots vs Atlanta Falcons <code>34-28</code> [超级碗史上最大的反超 从第三节3-28落后开始反击]</li>\n<li>2018 <code>College Football Playoff National Championship</code> #4 Alabama vs #3 Georgia <code>26-23</code> [本来有机会常规时间靠着踢球扳平的]</li>\n</ul>\n<h1 id=\"私人感受\"><a href=\"#私人感受\" class=\"headerlink\" title=\"私人感受\"></a>私人感受</h1><h2 id=\"USC\"><a href=\"#USC\" class=\"headerlink\" title=\"USC\"></a>USC</h2><p>作为Trojin来说，这两年是USC最近10年来最好的时光，自从Pete Carroll走后，我们承接了因为Reggie Bush收礼物被NCAA惩罚的后果而一直无法兴起，USC从02年到08年的统治就像这10年Alabama的统治一样。我们这两年有着豪华的:</p>\n<ul>\n<li>Quarterback: Sam Darnold</li>\n<li>Wide Receiver: Juju Smith-Schuster, Deontay Burrnett</li>\n<li>Cornerback: Adoree’ Jackson</li>\n<li>Tailback: Ronald Jones II </li>\n</ul>\n<h2 id=\"Patriots\"><a href=\"#Patriots\" class=\"headerlink\" title=\"Patriots\"></a>Patriots</h2><p>当然作为爱国者的粉丝无疑是幸福的，#1 四分卫Tom Brady，进攻阵中明星球员不少，而且都有着出色的表现，防守组同样功不可没。</p>\n<ul>\n<li>Quarterback: Tom Brady</li>\n<li>Wide Receiver: Danny Amendola, Julian Edelman, Randy Moss</li>\n<li>Tight Ends: Rob Gronkowski</li>\n<li>Linebackers:  Dont’a Hightowe</li>\n<li>Kicker: Stephen Gostkowski, Adam Vinatieri</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>开始看橄榄球主要是缘起于在上大学的时候每年在CCTV-5播放的超级碗决赛，当时也是从看着好爽-一群人互相撞，叠罗汉到慢慢了解规则，看出战术的路程。<br>到了来USC上学的这两年，只要是重要的比赛我都会买票(USC作为私立学校，每场比赛的票价还不低….)或者看电视直播。现场的氛围还是很棒的，毕竟在历史悠久的主场，满场的红色与加油声。<br>当然NFL(职业橄榄球)我是一直是New England Patriots的粉丝，Tom Brady Fans。（邦辰的老公）原因不仅仅是一直常年位居高位，而是丰富多变的战术和比利切克与布雷迪长达20年的合作(尽管最近传出来的消息说是有矛盾…而且确实是布雷迪和老板罗伯特卡夫关系更近)</p>\n<h1 id=\"规则101\"><a href=\"#规则101\" class=\"headerlink\" title=\"规则101\"></a>规则101</h1><p>我觉得靠着我自己贫瘠的文字水平容易误导，所以我摘要几个别人的介绍来给大家，既有蚊子也有视频。 </p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/19965963\" target=\"_blank\" rel=\"noopener\">美式橄榄球有哪些基本扫盲的知识？</a> 来自知乎</li>\n<li><a href=\"http://www.nflchina.com/video/detail/1877764.html\" target=\"_blank\" rel=\"noopener\">观赛指南——3分钟教你看橄榄球</a> 来自NFLChina官网，另外也可以看看它别的介绍视频，觉得很不错</li>\n</ul>\n<p>其实核心来说就是把球放进端区，达阵得分并且只能有一次向前传球的机会。核心人物是传球手四分卫，接球手Wide-Receiver，持球向前跑的跑锋和防守组成员角卫-防守对方外接手…</p>\n<h1 id=\"经典比赛\"><a href=\"#经典比赛\" class=\"headerlink\" title=\"经典比赛\"></a>经典比赛</h1><p>这两年我看过的经典比赛还不少..我来慢慢数</p>\n<ul>\n<li>2017 <code>Rose Bowl</code> #9 USC vs #5 Penn State <code>52-49</code> [最跌宕起伏的玫瑰碗–剧情一波三折] </li>\n<li>2017 <code>SuperBowl LI</code> New England Patriots vs Atlanta Falcons <code>34-28</code> [超级碗史上最大的反超 从第三节3-28落后开始反击]</li>\n<li>2018 <code>College Football Playoff National Championship</code> #4 Alabama vs #3 Georgia <code>26-23</code> [本来有机会常规时间靠着踢球扳平的]</li>\n</ul>\n<h1 id=\"私人感受\"><a href=\"#私人感受\" class=\"headerlink\" title=\"私人感受\"></a>私人感受</h1><h2 id=\"USC\"><a href=\"#USC\" class=\"headerlink\" title=\"USC\"></a>USC</h2><p>作为Trojin来说，这两年是USC最近10年来最好的时光，自从Pete Carroll走后，我们承接了因为Reggie Bush收礼物被NCAA惩罚的后果而一直无法兴起，USC从02年到08年的统治就像这10年Alabama的统治一样。我们这两年有着豪华的:</p>\n<ul>\n<li>Quarterback: Sam Darnold</li>\n<li>Wide Receiver: Juju Smith-Schuster, Deontay Burrnett</li>\n<li>Cornerback: Adoree’ Jackson</li>\n<li>Tailback: Ronald Jones II </li>\n</ul>\n<h2 id=\"Patriots\"><a href=\"#Patriots\" class=\"headerlink\" title=\"Patriots\"></a>Patriots</h2><p>当然作为爱国者的粉丝无疑是幸福的，#1 四分卫Tom Brady，进攻阵中明星球员不少，而且都有着出色的表现，防守组同样功不可没。</p>\n<ul>\n<li>Quarterback: Tom Brady</li>\n<li>Wide Receiver: Danny Amendola, Julian Edelman, Randy Moss</li>\n<li>Tight Ends: Rob Gronkowski</li>\n<li>Linebackers:  Dont’a Hightowe</li>\n<li>Kicker: Stephen Gostkowski, Adam Vinatieri</li>\n</ul>\n"},{"title":"BFS-Board类型总结","comments":1,"date":"2017-09-10T22:13:49.000Z","updated":"2017-09-10T22:13:49.000Z","_content":"\n# Maze\n这一系列题目的要求是小球滚动直到遇到障碍才停止，最后找到出口，求出valid，shorest，shortest的变种；所以用BFS可以比较简洁的解决这一系列的问题。\n\n```python\nqueue = [start]\n\ndirection = [(1,0),(-1,0),(0,1),(0,-1)]\n\nwhile queue:\n\ti, j = queue.pop(0) # python 用List模仿实现Queue\n\tmaze[i][j] = -1 # visited\n\t# 终止条件\n\tif (i,j) == destination:\n\t\txxx\n\t\n\t# 遍历四个方向\n\tfor x, y in direction: # local dir\n\t\trow = i\n\t\tcol = j\n\t\t\n\t\twhile xxx and xxx : # condition\n\t\t\trow += x\n\t\t\tcol += y\n\t\t\t\n\tif visited and not in the queue:\n\t\tqueue.append()\n```\n<!--more-->\n## I\n`490. The Maze  \n基本款，套用模版就好了  \nO(mn),O(mn)\n\n```python\nclass Solution(object):\n    def hasPath(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: bool\n        \"\"\"\n        queue = [start]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(1,0),(0,1),(-1,0),(0,-1)]\n        while queue:\n            i, j = queue.pop(0)\n            # record\n            maze[i][j] = -1\n            if i == destination[0] and j == destination[1]:\n                return True\n            for x, y in dir:\n                row = x + i\n                col = y + j\n                # move until the wall\n                while 0<= row < m and 0<= col < n and maze[row][col] != 1:\n                    row += x\n                    col += y\n                # move back a step\n                row -= x\n                col -= y\n                if maze[row][col] == 0 and [row,col] not in queue:\n                    queue.append([row, col])\n        return False\n        \n```\n\n## II - 求最短路径\n`505. The Maze II   \n可以考虑Dijkstra's algorithm，在Python使用heapq最小堆，因为每一次都要记录当前路径，所以需要记录local_count\n\n```python\ncount,i,j = heapq.heappop(pq)\n...\n\nfor x,y in dir:\n    row = i+x\n    col = j+y\n    local = 1\n...\nheapq.heappush(pq, (count+local, row, col))\n```\n时间：O(mn*log(mn)) -- 用heapq方法每次heapify的时候是Log级别的复杂度\n空间：O（mn）\n\n```python\nimport heapq\nclass Solution(object):\n    def shortestDistance(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: int\n        \"\"\"\n        pq = [(0,start[0],start[1])]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(0,1),(1,0),(-1,0),(0,-1)]\n        while pq:\n            count,i,j = heapq.heappop(pq)\n            if maze[i][j] == -1:\n                continue # cut\n            maze[i][j] = -1 # record\n            if i == destination[0] and j == destination[1]:\n                return count\n            for x,y in dir:\n                row = i+x\n                col = j+y\n                local = 1\n                # record local variable\n                while 0 <= row < m and 0 <= col < n and maze[row][col] != 1:\n                    row += x\n                    col += y\n                    local += 1\n                row -= x\n                col -= y\n                local -= 1\n                #print pq\n                heapq.heappush(pq, (count+local, row, col))\n        return -1\n```\n\n## III - 遇到洞\n`499. The Maze III  \n同样道理，只需要添加条件在while循环里，然后在dir里面加入dir的字符，heap的时候\n\n\n```python\nif [row,col] == destination:\n    break\n    ...\nheapq.heappush(pq, (count+local, move+path, row, col))\n```\n\n时间：O(mn*log(mn)) -- 用heapq方法每次heapify的时候是Log级别的复杂度\n空间：O（mn）\n\n```python\nclass Solution(object):\n    def findShortestWay(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type ball: List[int]\n        :type hole: List[int]\n        :rtype: str\n        \"\"\"\n        pq = [(0,\"\", start[0],start[1])]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(0,1,'r'),(1,0,'d'),(-1,0,'u'),(0,-1,'l')]\n        while pq:\n            #print pq\n            count,move,i,j = heapq.heappop(pq)\n            if maze[i][j] == -1:\n                continue # cut\n            maze[i][j] = -1 # record\n            if i == destination[0] and j == destination[1]:\n                return move\n            for x,y,path in dir:\n                row = i\n                col = j\n                local = 0\n                # record local variable\n                while 0 <= row+x < m and 0 <= col+y < n and maze[row+x][col+y] != 1 :\n                    row += x\n                    col += y\n                    local += 1\n                    if [row,col] == destination:\n                        break\n                heapq.heappush(pq, (count+local, move+path, row, col))\n                \n        return \"impossible\"\n```\n\n# Matrix\n## 01 Matrix\n`542. 01 Matrix  \nGiven a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1\n用类似的思维，在Queue中只加入0的点，然后预设其他的点到0的距离为无穷大，这样的话，遍历的时候四个方向每次加1；遇到重复的时候取最小值就好\nT O(mn)\nS O(mn)\n\n```python\n    def updateMatrix(self, rooms):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        queue = []\n        for row in range(len(rooms)):\n            for col in range(len(rooms[0])):\n                if rooms[row][col] == 0:\n                    queue.append((row,col))\n                else:\n                    rooms[row][col] = float('inf')\n        direction = [(1,0),(0,1),(-1,0),(0,-1)]\n        while queue:\n            i,j = queue.pop(0)\n            for x,y in direction:\n                row = i + x\n                col = j + y\n                if 0 <= row < len(rooms) and 0 <= col < len(rooms[0]) and rooms[row][col] > 1 + rooms[i][j]:\n                    rooms[row][col] = rooms[i][j] + 1\n                    queue.append((row, col))\n            \n        return rooms\n```\n\n# 286. Walls and Gates\n几乎一摸一样的题，除了题目中的1改为inf\n\n```python\n    # init\n    queue = []\n    for row in range(len(rooms)):\n        for col in range(len(rooms[0])):\n            if rooms[row][col] == 0:\n                queue.append((row,col))\n    direction = [(1,0),(0,1),(-1,0),(0,-1)]\n    while queue:\n        i,j = queue.pop(0)\n        for x,y in direction:\n            row = i + x\n            col = j + y\n            if 0 <= row < len(rooms) and 0 <= col < len(rooms[0]) and rooms[row][col] == 2147483647:\n                rooms[row][col] = rooms[i][j] + 1\n                queue.append((row, col))\n```","source":"_posts/BFS-Maze类型总结.md","raw":"---\ntitle: BFS-Board类型总结\ncomments: true\ndate: 2017-09-10 15:13:49\nupdated: 2017-09-10 15:13:49\ncategories: [BFS, DFS]\ntags: Leetcode\n---\n\n# Maze\n这一系列题目的要求是小球滚动直到遇到障碍才停止，最后找到出口，求出valid，shorest，shortest的变种；所以用BFS可以比较简洁的解决这一系列的问题。\n\n```python\nqueue = [start]\n\ndirection = [(1,0),(-1,0),(0,1),(0,-1)]\n\nwhile queue:\n\ti, j = queue.pop(0) # python 用List模仿实现Queue\n\tmaze[i][j] = -1 # visited\n\t# 终止条件\n\tif (i,j) == destination:\n\t\txxx\n\t\n\t# 遍历四个方向\n\tfor x, y in direction: # local dir\n\t\trow = i\n\t\tcol = j\n\t\t\n\t\twhile xxx and xxx : # condition\n\t\t\trow += x\n\t\t\tcol += y\n\t\t\t\n\tif visited and not in the queue:\n\t\tqueue.append()\n```\n<!--more-->\n## I\n`490. The Maze  \n基本款，套用模版就好了  \nO(mn),O(mn)\n\n```python\nclass Solution(object):\n    def hasPath(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: bool\n        \"\"\"\n        queue = [start]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(1,0),(0,1),(-1,0),(0,-1)]\n        while queue:\n            i, j = queue.pop(0)\n            # record\n            maze[i][j] = -1\n            if i == destination[0] and j == destination[1]:\n                return True\n            for x, y in dir:\n                row = x + i\n                col = y + j\n                # move until the wall\n                while 0<= row < m and 0<= col < n and maze[row][col] != 1:\n                    row += x\n                    col += y\n                # move back a step\n                row -= x\n                col -= y\n                if maze[row][col] == 0 and [row,col] not in queue:\n                    queue.append([row, col])\n        return False\n        \n```\n\n## II - 求最短路径\n`505. The Maze II   \n可以考虑Dijkstra's algorithm，在Python使用heapq最小堆，因为每一次都要记录当前路径，所以需要记录local_count\n\n```python\ncount,i,j = heapq.heappop(pq)\n...\n\nfor x,y in dir:\n    row = i+x\n    col = j+y\n    local = 1\n...\nheapq.heappush(pq, (count+local, row, col))\n```\n时间：O(mn*log(mn)) -- 用heapq方法每次heapify的时候是Log级别的复杂度\n空间：O（mn）\n\n```python\nimport heapq\nclass Solution(object):\n    def shortestDistance(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: int\n        \"\"\"\n        pq = [(0,start[0],start[1])]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(0,1),(1,0),(-1,0),(0,-1)]\n        while pq:\n            count,i,j = heapq.heappop(pq)\n            if maze[i][j] == -1:\n                continue # cut\n            maze[i][j] = -1 # record\n            if i == destination[0] and j == destination[1]:\n                return count\n            for x,y in dir:\n                row = i+x\n                col = j+y\n                local = 1\n                # record local variable\n                while 0 <= row < m and 0 <= col < n and maze[row][col] != 1:\n                    row += x\n                    col += y\n                    local += 1\n                row -= x\n                col -= y\n                local -= 1\n                #print pq\n                heapq.heappush(pq, (count+local, row, col))\n        return -1\n```\n\n## III - 遇到洞\n`499. The Maze III  \n同样道理，只需要添加条件在while循环里，然后在dir里面加入dir的字符，heap的时候\n\n\n```python\nif [row,col] == destination:\n    break\n    ...\nheapq.heappush(pq, (count+local, move+path, row, col))\n```\n\n时间：O(mn*log(mn)) -- 用heapq方法每次heapify的时候是Log级别的复杂度\n空间：O（mn）\n\n```python\nclass Solution(object):\n    def findShortestWay(self, maze, start, destination):\n        \"\"\"\n        :type maze: List[List[int]]\n        :type ball: List[int]\n        :type hole: List[int]\n        :rtype: str\n        \"\"\"\n        pq = [(0,\"\", start[0],start[1])]\n        m = len(maze)\n        n = len(maze[0])\n        dir = [(0,1,'r'),(1,0,'d'),(-1,0,'u'),(0,-1,'l')]\n        while pq:\n            #print pq\n            count,move,i,j = heapq.heappop(pq)\n            if maze[i][j] == -1:\n                continue # cut\n            maze[i][j] = -1 # record\n            if i == destination[0] and j == destination[1]:\n                return move\n            for x,y,path in dir:\n                row = i\n                col = j\n                local = 0\n                # record local variable\n                while 0 <= row+x < m and 0 <= col+y < n and maze[row+x][col+y] != 1 :\n                    row += x\n                    col += y\n                    local += 1\n                    if [row,col] == destination:\n                        break\n                heapq.heappush(pq, (count+local, move+path, row, col))\n                \n        return \"impossible\"\n```\n\n# Matrix\n## 01 Matrix\n`542. 01 Matrix  \nGiven a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1\n用类似的思维，在Queue中只加入0的点，然后预设其他的点到0的距离为无穷大，这样的话，遍历的时候四个方向每次加1；遇到重复的时候取最小值就好\nT O(mn)\nS O(mn)\n\n```python\n    def updateMatrix(self, rooms):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        queue = []\n        for row in range(len(rooms)):\n            for col in range(len(rooms[0])):\n                if rooms[row][col] == 0:\n                    queue.append((row,col))\n                else:\n                    rooms[row][col] = float('inf')\n        direction = [(1,0),(0,1),(-1,0),(0,-1)]\n        while queue:\n            i,j = queue.pop(0)\n            for x,y in direction:\n                row = i + x\n                col = j + y\n                if 0 <= row < len(rooms) and 0 <= col < len(rooms[0]) and rooms[row][col] > 1 + rooms[i][j]:\n                    rooms[row][col] = rooms[i][j] + 1\n                    queue.append((row, col))\n            \n        return rooms\n```\n\n# 286. Walls and Gates\n几乎一摸一样的题，除了题目中的1改为inf\n\n```python\n    # init\n    queue = []\n    for row in range(len(rooms)):\n        for col in range(len(rooms[0])):\n            if rooms[row][col] == 0:\n                queue.append((row,col))\n    direction = [(1,0),(0,1),(-1,0),(0,-1)]\n    while queue:\n        i,j = queue.pop(0)\n        for x,y in direction:\n            row = i + x\n            col = j + y\n            if 0 <= row < len(rooms) and 0 <= col < len(rooms[0]) and rooms[row][col] == 2147483647:\n                rooms[row][col] = rooms[i][j] + 1\n                queue.append((row, col))\n```","slug":"BFS-Maze类型总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdei0002m2ca3gdmw3oi","content":"<h1 id=\"Maze\"><a href=\"#Maze\" class=\"headerlink\" title=\"Maze\"></a>Maze</h1><p>这一系列题目的要求是小球滚动直到遇到障碍才停止，最后找到出口，求出valid，shorest，shortest的变种；所以用BFS可以比较简洁的解决这一系列的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue = [start]</span><br><span class=\"line\"></span><br><span class=\"line\">direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\ti, j = queue.pop(<span class=\"number\">0</span>) <span class=\"comment\"># python 用List模仿实现Queue</span></span><br><span class=\"line\">\tmaze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># visited</span></span><br><span class=\"line\">\t<span class=\"comment\"># 终止条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i,j) == destination:</span><br><span class=\"line\">\t\txxx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 遍历四个方向</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> direction: <span class=\"comment\"># local dir</span></span><br><span class=\"line\">\t\trow = i</span><br><span class=\"line\">\t\tcol = j</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> xxx <span class=\"keyword\">and</span> xxx : <span class=\"comment\"># condition</span></span><br><span class=\"line\">\t\t\trow += x</span><br><span class=\"line\">\t\t\tcol += y</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> visited <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> the queue:</span><br><span class=\"line\">\t\tqueue.append()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"I\"></a>I</h2><p>`490. The Maze<br>基本款，套用模版就好了<br>O(mn),O(mn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasPath</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type start: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type destination: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        queue = [start]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            i, j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\"># record</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = x + i</span><br><span class=\"line\">                col = y + j</span><br><span class=\"line\">                <span class=\"comment\"># move until the wall</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span>&lt;= row &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= col &lt; n <span class=\"keyword\">and</span> maze[row][col] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                <span class=\"comment\"># move back a step</span></span><br><span class=\"line\">                row -= x</span><br><span class=\"line\">                col -= y</span><br><span class=\"line\">                <span class=\"keyword\">if</span> maze[row][col] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [row,col] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                    queue.append([row, col])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"II-求最短路径\"><a href=\"#II-求最短路径\" class=\"headerlink\" title=\"II - 求最短路径\"></a>II - 求最短路径</h2><p>`505. The Maze II<br>可以考虑Dijkstra’s algorithm，在Python使用heapq最小堆，因为每一次都要记录当前路径，所以需要记录local_count</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count,i,j = heapq.heappop(pq)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">    row = i+x</span><br><span class=\"line\">    col = j+y</span><br><span class=\"line\">    local = <span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\">heapq.heappush(pq, (count+local, row, col))</span><br></pre></td></tr></table></figure>\n<p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestDistance</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type start: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type destination: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        pq = [(<span class=\"number\">0</span>,start[<span class=\"number\">0</span>],start[<span class=\"number\">1</span>])]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            count,i,j = heapq.heappop(pq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[i][j] == <span class=\"number\">-1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> <span class=\"comment\"># cut</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># record</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = i+x</span><br><span class=\"line\">                col = j+y</span><br><span class=\"line\">                local = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># record local variable</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt;= row &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; n <span class=\"keyword\">and</span> maze[row][col] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                    local += <span class=\"number\">1</span></span><br><span class=\"line\">                row -= x</span><br><span class=\"line\">                col -= y</span><br><span class=\"line\">                local -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\">#print pq</span></span><br><span class=\"line\">                heapq.heappush(pq, (count+local, row, col))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-遇到洞\"><a href=\"#III-遇到洞\" class=\"headerlink\" title=\"III - 遇到洞\"></a>III - 遇到洞</h2><p>`499. The Maze III<br>同样道理，只需要添加条件在while循环里，然后在dir里面加入dir的字符，heap的时候</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [row,col] == destination:</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">heapq.heappush(pq, (count+local, move+path, row, col))</span><br></pre></td></tr></table></figure>\n<p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findShortestWay</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type ball: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type hole: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        pq = [(<span class=\"number\">0</span>,<span class=\"string\">\"\"</span>, start[<span class=\"number\">0</span>],start[<span class=\"number\">1</span>])]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"string\">'r'</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">'d'</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"string\">'u'</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"string\">'l'</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            <span class=\"comment\">#print pq</span></span><br><span class=\"line\">            count,move,i,j = heapq.heappop(pq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[i][j] == <span class=\"number\">-1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> <span class=\"comment\"># cut</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># record</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> move</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x,y,path <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = i</span><br><span class=\"line\">                col = j</span><br><span class=\"line\">                local = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"comment\"># record local variable</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt;= row+x &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col+y &lt; n <span class=\"keyword\">and</span> maze[row+x][col+y] != <span class=\"number\">1</span> :</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                    local += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> [row,col] == destination:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                heapq.heappush(pq, (count+local, move+path, row, col))</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"impossible\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h1><h2 id=\"01-Matrix\"><a href=\"#01-Matrix\" class=\"headerlink\" title=\"01 Matrix\"></a>01 Matrix</h2><p>`542. 01 Matrix<br>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.<br>The distance between two adjacent cells is 1<br>用类似的思维，在Queue中只加入0的点，然后预设其他的点到0的距离为无穷大，这样的话，遍历的时候四个方向每次加1；遇到重复的时候取最小值就好<br>T O(mn)<br>S O(mn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateMatrix</span><span class=\"params\">(self, rooms)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    queue = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(rooms)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(rooms[<span class=\"number\">0</span>])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rooms[row][col] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((row,col))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                rooms[row][col] = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">    direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        i,j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            row = i + x</span><br><span class=\"line\">            col = j + y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(rooms) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> rooms[row][col] &gt; <span class=\"number\">1</span> + rooms[i][j]:</span><br><span class=\"line\">                rooms[row][col] = rooms[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append((row, col))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> rooms</span><br></pre></td></tr></table></figure>\n<h1 id=\"286-Walls-and-Gates\"><a href=\"#286-Walls-and-Gates\" class=\"headerlink\" title=\"286. Walls and Gates\"></a>286. Walls and Gates</h1><p>几乎一摸一样的题，除了题目中的1改为inf</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">queue = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(rooms)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(rooms[<span class=\"number\">0</span>])):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rooms[row][col] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            queue.append((row,col))</span><br><span class=\"line\">direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">    i,j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">        row = i + x</span><br><span class=\"line\">        col = j + y</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(rooms) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> rooms[row][col] == <span class=\"number\">2147483647</span>:</span><br><span class=\"line\">            rooms[row][col] = rooms[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">            queue.append((row, col))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Maze\"><a href=\"#Maze\" class=\"headerlink\" title=\"Maze\"></a>Maze</h1><p>这一系列题目的要求是小球滚动直到遇到障碍才停止，最后找到出口，求出valid，shorest，shortest的变种；所以用BFS可以比较简洁的解决这一系列的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue = [start]</span><br><span class=\"line\"></span><br><span class=\"line\">direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\ti, j = queue.pop(<span class=\"number\">0</span>) <span class=\"comment\"># python 用List模仿实现Queue</span></span><br><span class=\"line\">\tmaze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># visited</span></span><br><span class=\"line\">\t<span class=\"comment\"># 终止条件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i,j) == destination:</span><br><span class=\"line\">\t\txxx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 遍历四个方向</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> direction: <span class=\"comment\"># local dir</span></span><br><span class=\"line\">\t\trow = i</span><br><span class=\"line\">\t\tcol = j</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> xxx <span class=\"keyword\">and</span> xxx : <span class=\"comment\"># condition</span></span><br><span class=\"line\">\t\t\trow += x</span><br><span class=\"line\">\t\t\tcol += y</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> visited <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> the queue:</span><br><span class=\"line\">\t\tqueue.append()</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"I\"><a href=\"#I\" class=\"headerlink\" title=\"I\"></a>I</h2><p>`490. The Maze<br>基本款，套用模版就好了<br>O(mn),O(mn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasPath</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type start: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type destination: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        queue = [start]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            i, j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\"># record</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = x + i</span><br><span class=\"line\">                col = y + j</span><br><span class=\"line\">                <span class=\"comment\"># move until the wall</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span>&lt;= row &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= col &lt; n <span class=\"keyword\">and</span> maze[row][col] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                <span class=\"comment\"># move back a step</span></span><br><span class=\"line\">                row -= x</span><br><span class=\"line\">                col -= y</span><br><span class=\"line\">                <span class=\"keyword\">if</span> maze[row][col] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [row,col] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                    queue.append([row, col])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"II-求最短路径\"><a href=\"#II-求最短路径\" class=\"headerlink\" title=\"II - 求最短路径\"></a>II - 求最短路径</h2><p>`505. The Maze II<br>可以考虑Dijkstra’s algorithm，在Python使用heapq最小堆，因为每一次都要记录当前路径，所以需要记录local_count</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count,i,j = heapq.heappop(pq)</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">    row = i+x</span><br><span class=\"line\">    col = j+y</span><br><span class=\"line\">    local = <span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\">heapq.heappush(pq, (count+local, row, col))</span><br></pre></td></tr></table></figure>\n<p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestDistance</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type start: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type destination: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        pq = [(<span class=\"number\">0</span>,start[<span class=\"number\">0</span>],start[<span class=\"number\">1</span>])]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            count,i,j = heapq.heappop(pq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[i][j] == <span class=\"number\">-1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> <span class=\"comment\"># cut</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># record</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> count</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = i+x</span><br><span class=\"line\">                col = j+y</span><br><span class=\"line\">                local = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># record local variable</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt;= row &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; n <span class=\"keyword\">and</span> maze[row][col] != <span class=\"number\">1</span>:</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                    local += <span class=\"number\">1</span></span><br><span class=\"line\">                row -= x</span><br><span class=\"line\">                col -= y</span><br><span class=\"line\">                local -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\">#print pq</span></span><br><span class=\"line\">                heapq.heappush(pq, (count+local, row, col))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-遇到洞\"><a href=\"#III-遇到洞\" class=\"headerlink\" title=\"III - 遇到洞\"></a>III - 遇到洞</h2><p>`499. The Maze III<br>同样道理，只需要添加条件在while循环里，然后在dir里面加入dir的字符，heap的时候</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [row,col] == destination:</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">heapq.heappush(pq, (count+local, move+path, row, col))</span><br></pre></td></tr></table></figure>\n<p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findShortestWay</span><span class=\"params\">(self, maze, start, destination)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type maze: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type ball: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type hole: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        pq = [(<span class=\"number\">0</span>,<span class=\"string\">\"\"</span>, start[<span class=\"number\">0</span>],start[<span class=\"number\">1</span>])]</span><br><span class=\"line\">        m = len(maze)</span><br><span class=\"line\">        n = len(maze[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dir = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"string\">'r'</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">'d'</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"string\">'u'</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"string\">'l'</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            <span class=\"comment\">#print pq</span></span><br><span class=\"line\">            count,move,i,j = heapq.heappop(pq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[i][j] == <span class=\"number\">-1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> <span class=\"comment\"># cut</span></span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">-1</span> <span class=\"comment\"># record</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == destination[<span class=\"number\">0</span>] <span class=\"keyword\">and</span> j == destination[<span class=\"number\">1</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> move</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x,y,path <span class=\"keyword\">in</span> dir:</span><br><span class=\"line\">                row = i</span><br><span class=\"line\">                col = j</span><br><span class=\"line\">                local = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"comment\"># record local variable</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> <span class=\"number\">0</span> &lt;= row+x &lt; m <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col+y &lt; n <span class=\"keyword\">and</span> maze[row+x][col+y] != <span class=\"number\">1</span> :</span><br><span class=\"line\">                    row += x</span><br><span class=\"line\">                    col += y</span><br><span class=\"line\">                    local += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> [row,col] == destination:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                heapq.heappush(pq, (count+local, move+path, row, col))</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"impossible\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h1><h2 id=\"01-Matrix\"><a href=\"#01-Matrix\" class=\"headerlink\" title=\"01 Matrix\"></a>01 Matrix</h2><p>`542. 01 Matrix<br>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.<br>The distance between two adjacent cells is 1<br>用类似的思维，在Queue中只加入0的点，然后预设其他的点到0的距离为无穷大，这样的话，遍历的时候四个方向每次加1；遇到重复的时候取最小值就好<br>T O(mn)<br>S O(mn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateMatrix</span><span class=\"params\">(self, rooms)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    queue = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(rooms)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(rooms[<span class=\"number\">0</span>])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rooms[row][col] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((row,col))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                rooms[row][col] = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">    direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        i,j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            row = i + x</span><br><span class=\"line\">            col = j + y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(rooms) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> rooms[row][col] &gt; <span class=\"number\">1</span> + rooms[i][j]:</span><br><span class=\"line\">                rooms[row][col] = rooms[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append((row, col))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> rooms</span><br></pre></td></tr></table></figure>\n<h1 id=\"286-Walls-and-Gates\"><a href=\"#286-Walls-and-Gates\" class=\"headerlink\" title=\"286. Walls and Gates\"></a>286. Walls and Gates</h1><p>几乎一摸一样的题，除了题目中的1改为inf</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># init</span></span><br><span class=\"line\">queue = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(rooms)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(rooms[<span class=\"number\">0</span>])):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> rooms[row][col] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            queue.append((row,col))</span><br><span class=\"line\">direction = [(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>)]</span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">    i,j = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">        row = i + x</span><br><span class=\"line\">        col = j + y</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(rooms) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> rooms[row][col] == <span class=\"number\">2147483647</span>:</span><br><span class=\"line\">            rooms[row][col] = rooms[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">            queue.append((row, col))</span><br></pre></td></tr></table></figure>"},{"title":"Backtracking总结","comments":1,"date":"2017-09-07T06:31:24.000Z","updated":"2018-03-22T21:31:24.000Z","_content":"\n# BackingTracking系列\n4／35  \n[x] Easy  \n[x] Medium  \n[] Hard  \n\n# Tips\n凡是含有duplicate的都需要之前sorted，才能保证没有结果中没有重复\n## 经典7道题\n### 46. Permutations  \n\n```python\n1-2-3\n -3-2\ndef backtracking(self, nums, temp, ans):\n    if len(nums) == len(temp): # quit loop\n        ans.append(list(temp))\n    for i in range(len(nums)):\n        if nums[i] in temp: # cut duplicate\n            continue\n        temp.append(nums[i])\n        self.backtracking(nums, temp, ans)\n        temp.pop()\n```\n\n### 47. Permutations II  \n由于输入可能包含重复数字，所以就要保证去重。先排序然后创建Array记录访问过的数字，然后前面的一个数是否和自己相等，相等的时候则前面的数必须使用了，自己才能使用，这样就不会产生重复的排列了\n\n```python\ndef backtracking(self, nums, temp, ans, used):\n    if len(temp) == len(nums):\n        ans.append(list(temp))\n    for i in range(len(nums)):\n        if used[i] or i>0 and nums[i]==nums[i-1] and not used[i-1]: # 判断条件\n            continue\n        temp.append(nums[i])\n        used[i] = True # 记录访问\n        self.backtracking(nums, temp, ans, used)\n        used[i] = False\n        temp.pop()\n```\n\n### 78. Subsets  \n终止条件不同，因为要返回每一个set，所以每次backtracking的时候都要返回tempList；然后保证唯一性就是backtrack的时候index+1\n\n```python\ndef backtracking(self, nums, temp, res, start):\n    res.append(list(temp))\n    for i in range(start,len(nums)):\n        temp.append(nums[i])\n        self.backtracking(nums, temp, res, i+1)\n        temp.pop()\n```\n\n### 90. Subsets II  \n因为input含有duplicate，所以在进入backtracking之前需要检查\n\n```python\ndef backtracking(self, nums, temp, res, start):\n    res.append(list(temp))\n    for i in range(start,len(nums)):\n        if i > start and nums[i] == nums[i-1]:\n            continue\n        temp.append(nums[i])\n        self.backtracking(nums, temp, res, i+1)\n        temp.pop()\n```\n\n### 39 Combination Sum  \n本质上是一样的，每次传的时候target-candidates[i], 然后因为每个数字可以重复使用，所以index可以保持不变\n\n```python\ndef backtracking(self, candidates, target, res, temp, start):\n    if target<0:\n        return\n    elif target == 0:\n        res.append(list(temp))\n    else:\n        for i in range(start, len(candidates)):\n            temp.append(candidates[i])\n            self.backtracking(candidates, target - candidates[i], res, temp, i)\n            temp.pop()\n```\n\n### 40 Combination Sum II  \n变化就是不可以重复利用数字，index+1\n\n```python\ndef backtracking(self, candidates, target, res, temp, start):\n    if target<0:\n        return\n    elif target == 0:\n        res.append(list(temp))\n    else:\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i-1] == candidates[i]:\n                continue\n            temp.append(candidates[i])\n            self.backtracking(candidates, target - candidates[i], res, temp, i+1)\n            temp.pop()\n```\n\n### 216 Combination Sum III\n与上一道题的区别就是，输入为[1...9] \n\n```python\nclass Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.backtracking(k,n,[],res,1)\n        return res\n    \n    def backtracking(self, k, target, temp, res, start):\n        if len(temp) > k:\n            return\n        elif len(temp) == k and target == 0:\n            res.append(list(temp))\n        else:\n            for i in range(start, 10):\n                temp.append(i)\n                self.backtracking(k, target - i, temp, res, i+1)\n                temp.pop()\n        \n        \n```\n\n## Medium\n### 22 Generate Parentheses  \nrecursion rule 就是判断left，right的count啦，直到满足right == n  \n\n```python\ndef dfs(self,temp, left, right, res,n):\n    if left < n:\n        self.dfs(temp+'(',left+1,right,res,n)\n    if right < left:\n        self.dfs(temp+')',left, right+1, res,n)\n    if right==n:\n        res.append(temp)\n```\n\n### 320. Generalized Abbreviation  \n这道题debug了好久，困惑于如何使得数字和字母不会在base case的时候重复导出\n\n```\n4\n3d\n2r1 2rd\n...\n```\n\n```python\ndef backtrack(res, word, pos, string, count):\n    if pos == len(word):\n        if count>0:\n            string += str(count)\n        res.append(string)\n    else:\n        backtrack(res,word,pos+1,string,count+1)\n        ## 这个track保证了index每次不断加1 从而在base的时候输出，然后每一次count同时加1，为了记录count\n        backtrack(res, word, pos+1, string + (str(count) if count>0 else \"\")+ word[pos], 0)\n        ## 这个是为了退一步，先保存当前的count数字，然后因为数字不能连续，所以+word【index】，同时把count清0\n```\n\n### 二维backtracking","source":"_posts/Backtracking总结.md","raw":"---\ntitle: Backtracking总结\ncomments: true\ndate: 2017-09-06 23:31:24\nupdated: 2018-03-22 14:31:24\ncategories: Leetcode\ntags: [Backtracking, DFS]\n---\n\n# BackingTracking系列\n4／35  \n[x] Easy  \n[x] Medium  \n[] Hard  \n\n# Tips\n凡是含有duplicate的都需要之前sorted，才能保证没有结果中没有重复\n## 经典7道题\n### 46. Permutations  \n\n```python\n1-2-3\n -3-2\ndef backtracking(self, nums, temp, ans):\n    if len(nums) == len(temp): # quit loop\n        ans.append(list(temp))\n    for i in range(len(nums)):\n        if nums[i] in temp: # cut duplicate\n            continue\n        temp.append(nums[i])\n        self.backtracking(nums, temp, ans)\n        temp.pop()\n```\n\n### 47. Permutations II  \n由于输入可能包含重复数字，所以就要保证去重。先排序然后创建Array记录访问过的数字，然后前面的一个数是否和自己相等，相等的时候则前面的数必须使用了，自己才能使用，这样就不会产生重复的排列了\n\n```python\ndef backtracking(self, nums, temp, ans, used):\n    if len(temp) == len(nums):\n        ans.append(list(temp))\n    for i in range(len(nums)):\n        if used[i] or i>0 and nums[i]==nums[i-1] and not used[i-1]: # 判断条件\n            continue\n        temp.append(nums[i])\n        used[i] = True # 记录访问\n        self.backtracking(nums, temp, ans, used)\n        used[i] = False\n        temp.pop()\n```\n\n### 78. Subsets  \n终止条件不同，因为要返回每一个set，所以每次backtracking的时候都要返回tempList；然后保证唯一性就是backtrack的时候index+1\n\n```python\ndef backtracking(self, nums, temp, res, start):\n    res.append(list(temp))\n    for i in range(start,len(nums)):\n        temp.append(nums[i])\n        self.backtracking(nums, temp, res, i+1)\n        temp.pop()\n```\n\n### 90. Subsets II  \n因为input含有duplicate，所以在进入backtracking之前需要检查\n\n```python\ndef backtracking(self, nums, temp, res, start):\n    res.append(list(temp))\n    for i in range(start,len(nums)):\n        if i > start and nums[i] == nums[i-1]:\n            continue\n        temp.append(nums[i])\n        self.backtracking(nums, temp, res, i+1)\n        temp.pop()\n```\n\n### 39 Combination Sum  \n本质上是一样的，每次传的时候target-candidates[i], 然后因为每个数字可以重复使用，所以index可以保持不变\n\n```python\ndef backtracking(self, candidates, target, res, temp, start):\n    if target<0:\n        return\n    elif target == 0:\n        res.append(list(temp))\n    else:\n        for i in range(start, len(candidates)):\n            temp.append(candidates[i])\n            self.backtracking(candidates, target - candidates[i], res, temp, i)\n            temp.pop()\n```\n\n### 40 Combination Sum II  \n变化就是不可以重复利用数字，index+1\n\n```python\ndef backtracking(self, candidates, target, res, temp, start):\n    if target<0:\n        return\n    elif target == 0:\n        res.append(list(temp))\n    else:\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i-1] == candidates[i]:\n                continue\n            temp.append(candidates[i])\n            self.backtracking(candidates, target - candidates[i], res, temp, i+1)\n            temp.pop()\n```\n\n### 216 Combination Sum III\n与上一道题的区别就是，输入为[1...9] \n\n```python\nclass Solution(object):\n    def combinationSum3(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.backtracking(k,n,[],res,1)\n        return res\n    \n    def backtracking(self, k, target, temp, res, start):\n        if len(temp) > k:\n            return\n        elif len(temp) == k and target == 0:\n            res.append(list(temp))\n        else:\n            for i in range(start, 10):\n                temp.append(i)\n                self.backtracking(k, target - i, temp, res, i+1)\n                temp.pop()\n        \n        \n```\n\n## Medium\n### 22 Generate Parentheses  \nrecursion rule 就是判断left，right的count啦，直到满足right == n  \n\n```python\ndef dfs(self,temp, left, right, res,n):\n    if left < n:\n        self.dfs(temp+'(',left+1,right,res,n)\n    if right < left:\n        self.dfs(temp+')',left, right+1, res,n)\n    if right==n:\n        res.append(temp)\n```\n\n### 320. Generalized Abbreviation  \n这道题debug了好久，困惑于如何使得数字和字母不会在base case的时候重复导出\n\n```\n4\n3d\n2r1 2rd\n...\n```\n\n```python\ndef backtrack(res, word, pos, string, count):\n    if pos == len(word):\n        if count>0:\n            string += str(count)\n        res.append(string)\n    else:\n        backtrack(res,word,pos+1,string,count+1)\n        ## 这个track保证了index每次不断加1 从而在base的时候输出，然后每一次count同时加1，为了记录count\n        backtrack(res, word, pos+1, string + (str(count) if count>0 else \"\")+ word[pos], 0)\n        ## 这个是为了退一步，先保存当前的count数字，然后因为数字不能连续，所以+word【index】，同时把count清0\n```\n\n### 二维backtracking","slug":"Backtracking总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdem0006m2cay4t82bi7","content":"<h1 id=\"BackingTracking系列\"><a href=\"#BackingTracking系列\" class=\"headerlink\" title=\"BackingTracking系列\"></a>BackingTracking系列</h1><p>4／35<br>[x] Easy<br>[x] Medium<br>[] Hard  </p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>凡是含有duplicate的都需要之前sorted，才能保证没有结果中没有重复</p>\n<h2 id=\"经典7道题\"><a href=\"#经典7道题\" class=\"headerlink\" title=\"经典7道题\"></a>经典7道题</h2><h3 id=\"46-Permutations\"><a href=\"#46-Permutations\" class=\"headerlink\" title=\"46. Permutations\"></a>46. Permutations</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span><span class=\"number\">-2</span><span class=\"number\">-3</span></span><br><span class=\"line\"> <span class=\"number\">-3</span><span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, ans)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(nums) == len(temp): <span class=\"comment\"># quit loop</span></span><br><span class=\"line\">        ans.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] <span class=\"keyword\">in</span> temp: <span class=\"comment\"># cut duplicate</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, ans)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"47-Permutations-II\"><a href=\"#47-Permutations-II\" class=\"headerlink\" title=\"47. Permutations II\"></a>47. Permutations II</h3><p>由于输入可能包含重复数字，所以就要保证去重。先排序然后创建Array记录访问过的数字，然后前面的一个数是否和自己相等，相等的时候则前面的数必须使用了，自己才能使用，这样就不会产生重复的排列了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, ans, used)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(temp) == len(nums):</span><br><span class=\"line\">        ans.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> used[i] <span class=\"keyword\">or</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i]==nums[i<span class=\"number\">-1</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> used[i<span class=\"number\">-1</span>]: <span class=\"comment\"># 判断条件</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">True</span> <span class=\"comment\"># 记录访问</span></span><br><span class=\"line\">        self.backtracking(nums, temp, ans, used)</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a>78. Subsets</h3><p>终止条件不同，因为要返回每一个set，所以每次backtracking的时候都要返回tempList；然后保证唯一性就是backtrack的时候index+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, res, start)</span>:</span></span><br><span class=\"line\">    res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start,len(nums)):</span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"90-Subsets-II\"><a href=\"#90-Subsets-II\" class=\"headerlink\" title=\"90. Subsets II\"></a>90. Subsets II</h3><p>因为input含有duplicate，所以在进入backtracking之前需要检查</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, res, start)</span>:</span></span><br><span class=\"line\">    res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start,len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; start <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"39-Combination-Sum\"><a href=\"#39-Combination-Sum\" class=\"headerlink\" title=\"39 Combination Sum\"></a>39 Combination Sum</h3><p>本质上是一样的，每次传的时候target-candidates[i], 然后因为每个数字可以重复使用，所以index可以保持不变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, len(candidates)):</span><br><span class=\"line\">            temp.append(candidates[i])</span><br><span class=\"line\">            self.backtracking(candidates, target - candidates[i], res, temp, i)</span><br><span class=\"line\">            temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"40-Combination-Sum-II\"><a href=\"#40-Combination-Sum-II\" class=\"headerlink\" title=\"40 Combination Sum II\"></a>40 Combination Sum II</h3><p>变化就是不可以重复利用数字，index+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, len(candidates)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; start <span class=\"keyword\">and</span> candidates[i<span class=\"number\">-1</span>] == candidates[i]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            temp.append(candidates[i])</span><br><span class=\"line\">            self.backtracking(candidates, target - candidates[i], res, temp, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"216-Combination-Sum-III\"><a href=\"#216-Combination-Sum-III\" class=\"headerlink\" title=\"216 Combination Sum III\"></a>216 Combination Sum III</h3><p>与上一道题的区别就是，输入为[1…9] </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">combinationSum3</span><span class=\"params\">(self, k, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.backtracking(k,n,[],res,<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, k, target, temp, res, start)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(temp) &gt; k:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> len(temp) == k <span class=\"keyword\">and</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, <span class=\"number\">10</span>):</span><br><span class=\"line\">                temp.append(i)</span><br><span class=\"line\">                self.backtracking(k, target - i, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                temp.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"22-Generate-Parentheses\"><a href=\"#22-Generate-Parentheses\" class=\"headerlink\" title=\"22 Generate Parentheses\"></a>22 Generate Parentheses</h3><p>recursion rule 就是判断left，right的count啦，直到满足right == n  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self,temp, left, right, res,n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; n:</span><br><span class=\"line\">        self.dfs(temp+<span class=\"string\">'('</span>,left+<span class=\"number\">1</span>,right,res,n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right &lt; left:</span><br><span class=\"line\">        self.dfs(temp+<span class=\"string\">')'</span>,left, right+<span class=\"number\">1</span>, res,n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right==n:</span><br><span class=\"line\">        res.append(temp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"320-Generalized-Abbreviation\"><a href=\"#320-Generalized-Abbreviation\" class=\"headerlink\" title=\"320. Generalized Abbreviation\"></a>320. Generalized Abbreviation</h3><p>这道题debug了好久，困惑于如何使得数字和字母不会在base case的时候重复导出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">3d</span><br><span class=\"line\">2r1 2rd</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(res, word, pos, string, count)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos == len(word):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            string += str(count)</span><br><span class=\"line\">        res.append(string)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        backtrack(res,word,pos+<span class=\"number\">1</span>,string,count+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">## 这个track保证了index每次不断加1 从而在base的时候输出，然后每一次count同时加1，为了记录count</span></span><br><span class=\"line\">        backtrack(res, word, pos+<span class=\"number\">1</span>, string + (str(count) <span class=\"keyword\">if</span> count&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"string\">\"\"</span>)+ word[pos], <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">## 这个是为了退一步，先保存当前的count数字，然后因为数字不能连续，所以+word【index】，同时把count清0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二维backtracking\"><a href=\"#二维backtracking\" class=\"headerlink\" title=\"二维backtracking\"></a>二维backtracking</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BackingTracking系列\"><a href=\"#BackingTracking系列\" class=\"headerlink\" title=\"BackingTracking系列\"></a>BackingTracking系列</h1><p>4／35<br>[x] Easy<br>[x] Medium<br>[] Hard  </p>\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><p>凡是含有duplicate的都需要之前sorted，才能保证没有结果中没有重复</p>\n<h2 id=\"经典7道题\"><a href=\"#经典7道题\" class=\"headerlink\" title=\"经典7道题\"></a>经典7道题</h2><h3 id=\"46-Permutations\"><a href=\"#46-Permutations\" class=\"headerlink\" title=\"46. Permutations\"></a>46. Permutations</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span><span class=\"number\">-2</span><span class=\"number\">-3</span></span><br><span class=\"line\"> <span class=\"number\">-3</span><span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, ans)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(nums) == len(temp): <span class=\"comment\"># quit loop</span></span><br><span class=\"line\">        ans.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> nums[i] <span class=\"keyword\">in</span> temp: <span class=\"comment\"># cut duplicate</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, ans)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"47-Permutations-II\"><a href=\"#47-Permutations-II\" class=\"headerlink\" title=\"47. Permutations II\"></a>47. Permutations II</h3><p>由于输入可能包含重复数字，所以就要保证去重。先排序然后创建Array记录访问过的数字，然后前面的一个数是否和自己相等，相等的时候则前面的数必须使用了，自己才能使用，这样就不会产生重复的排列了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, ans, used)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(temp) == len(nums):</span><br><span class=\"line\">        ans.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> used[i] <span class=\"keyword\">or</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[i]==nums[i<span class=\"number\">-1</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> used[i<span class=\"number\">-1</span>]: <span class=\"comment\"># 判断条件</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">True</span> <span class=\"comment\"># 记录访问</span></span><br><span class=\"line\">        self.backtracking(nums, temp, ans, used)</span><br><span class=\"line\">        used[i] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"78-Subsets\"><a href=\"#78-Subsets\" class=\"headerlink\" title=\"78. Subsets\"></a>78. Subsets</h3><p>终止条件不同，因为要返回每一个set，所以每次backtracking的时候都要返回tempList；然后保证唯一性就是backtrack的时候index+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, res, start)</span>:</span></span><br><span class=\"line\">    res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start,len(nums)):</span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"90-Subsets-II\"><a href=\"#90-Subsets-II\" class=\"headerlink\" title=\"90. Subsets II\"></a>90. Subsets II</h3><p>因为input含有duplicate，所以在进入backtracking之前需要检查</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, nums, temp, res, start)</span>:</span></span><br><span class=\"line\">    res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start,len(nums)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; start <span class=\"keyword\">and</span> nums[i] == nums[i<span class=\"number\">-1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        temp.append(nums[i])</span><br><span class=\"line\">        self.backtracking(nums, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"39-Combination-Sum\"><a href=\"#39-Combination-Sum\" class=\"headerlink\" title=\"39 Combination Sum\"></a>39 Combination Sum</h3><p>本质上是一样的，每次传的时候target-candidates[i], 然后因为每个数字可以重复使用，所以index可以保持不变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, len(candidates)):</span><br><span class=\"line\">            temp.append(candidates[i])</span><br><span class=\"line\">            self.backtracking(candidates, target - candidates[i], res, temp, i)</span><br><span class=\"line\">            temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"40-Combination-Sum-II\"><a href=\"#40-Combination-Sum-II\" class=\"headerlink\" title=\"40 Combination Sum II\"></a>40 Combination Sum II</h3><p>变化就是不可以重复利用数字，index+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">        res.append(list(temp))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, len(candidates)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt; start <span class=\"keyword\">and</span> candidates[i<span class=\"number\">-1</span>] == candidates[i]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            temp.append(candidates[i])</span><br><span class=\"line\">            self.backtracking(candidates, target - candidates[i], res, temp, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            temp.pop()</span><br></pre></td></tr></table></figure>\n<h3 id=\"216-Combination-Sum-III\"><a href=\"#216-Combination-Sum-III\" class=\"headerlink\" title=\"216 Combination Sum III\"></a>216 Combination Sum III</h3><p>与上一道题的区别就是，输入为[1…9] </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">combinationSum3</span><span class=\"params\">(self, k, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.backtracking(k,n,[],res,<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtracking</span><span class=\"params\">(self, k, target, temp, res, start)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(temp) &gt; k:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> len(temp) == k <span class=\"keyword\">and</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(start, <span class=\"number\">10</span>):</span><br><span class=\"line\">                temp.append(i)</span><br><span class=\"line\">                self.backtracking(k, target - i, temp, res, i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                temp.pop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"22-Generate-Parentheses\"><a href=\"#22-Generate-Parentheses\" class=\"headerlink\" title=\"22 Generate Parentheses\"></a>22 Generate Parentheses</h3><p>recursion rule 就是判断left，right的count啦，直到满足right == n  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self,temp, left, right, res,n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; n:</span><br><span class=\"line\">        self.dfs(temp+<span class=\"string\">'('</span>,left+<span class=\"number\">1</span>,right,res,n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right &lt; left:</span><br><span class=\"line\">        self.dfs(temp+<span class=\"string\">')'</span>,left, right+<span class=\"number\">1</span>, res,n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> right==n:</span><br><span class=\"line\">        res.append(temp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"320-Generalized-Abbreviation\"><a href=\"#320-Generalized-Abbreviation\" class=\"headerlink\" title=\"320. Generalized Abbreviation\"></a>320. Generalized Abbreviation</h3><p>这道题debug了好久，困惑于如何使得数字和字母不会在base case的时候重复导出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">3d</span><br><span class=\"line\">2r1 2rd</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backtrack</span><span class=\"params\">(res, word, pos, string, count)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos == len(word):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> count&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            string += str(count)</span><br><span class=\"line\">        res.append(string)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        backtrack(res,word,pos+<span class=\"number\">1</span>,string,count+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\">## 这个track保证了index每次不断加1 从而在base的时候输出，然后每一次count同时加1，为了记录count</span></span><br><span class=\"line\">        backtrack(res, word, pos+<span class=\"number\">1</span>, string + (str(count) <span class=\"keyword\">if</span> count&gt;<span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"string\">\"\"</span>)+ word[pos], <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">## 这个是为了退一步，先保存当前的count数字，然后因为数字不能连续，所以+word【index】，同时把count清0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二维backtracking\"><a href=\"#二维backtracking\" class=\"headerlink\" title=\"二维backtracking\"></a>二维backtracking</h3>"},{"title":"DFS-BFS 总结","comments":1,"date":"2018-03-10T22:49:35.000Z","updated":"2018-03-11T21:49:35.000Z","_content":"# DFS \n## Matrix\n### 介绍\n对于不是Tree下面的DFS题来说，一直是我的一个弱点（不知道为什么），所以现在特意开贴来总结常见的题型\n\n大致的模版就是明确dfs函数中不合法的状态要直接return和继续dfs的情况；同时也要做好visited的标记，从而避免无限循环的错误\n\n```python\ndef dfs(i,j,matrix):\n\tif i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix) or matrix[i][j] == X:\n\t\treturn\n\t\t\n\t# set visited\n\tmatrix[i][j] = X\n\tdfs(i+1, j, matrix)\n\tdfs(i-1, j, matrix)\n\t...\n\t\n```\n<!--more-->\n### 733. Flood Fill\n最简单的DFS版本\n\n```python\nclass Solution(object):\n    def floodFill(self, image, sr, sc, newColor):\n        \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type newColor: int\n        :rtype: List[List[int]]\n        \"\"\"\n        m = len(image)\n        n = len(image[0])\n        color = image[sr][sc]\n        if color != newColor:\n            self.dfs(sr, sc,image,color,newColor)\n        return image\n    \n    def dfs(self, i, j,image,color,newColor):\n        if i < 0 or j < 0 or i >= len(image) or j >= len(image[0]) or image[i][j] != color:\n            return\n        image[i][j] = newColor\n        self.dfs(i+1, j, image, color, newColor)\n        self.dfs(i-1, j, image, color, newColor)\n        self.dfs(i, j+1, image, color, newColor)\n        self.dfs(i, j-1, image, color, newColor)\n```\n\n### 130. Surrounded Regions\n如果1的周围有边界的话，设置为M作为标准，之后再改回来。之后的same as Island\n\n```python\nclass Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:\n            return\n        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                # border case\n                if (i == 0 or j == 0 or i == m-1 or j == n -1) and board[i][j] == 'O':\n                    board[i][j] == 'M'\n                    self.dfs(i,j,board)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'M':\n                    board[i][j] = 'O'\n    \n    def dfs(self, r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]) or board[r][c] == 'X' or board[r][c] == 'M':\n            return\n        board[r][c] = 'M'\n        self.dfs(r+1, c, board)\n        self.dfs(r-1, c, board)\n        self.dfs(r, c+1, board)\n        self.dfs(r, c-1, board)\n```\n\n### 200. Number of Islands\n如果岛屿周围为1，置为0\n\n```python\nclass Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid or not grid[0]:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    count += 1\n                    self.dfs(i,j,grid)\n        return count\n    \n    def dfs(self, r, c, grid):\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == '0':\n            return\n        grid[r][c] = '0'\n        \n        self.dfs(r+1,c,  grid)\n        self.dfs(r-1, c, grid)\n        self.dfs(r, c-1, grid)\n        self.dfs(r, c+1, grid)\n```\n### 542\t01 Matrix\nSame as Wall and Gate\n\n```python\nclass Solution(object):\n    def updateMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not matrix or not matrix[0]:\n            return []\n        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    matrix[i][j] = float('inf')\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    self.dfs(i,j,matrix,0)\n        return matrix\n    \n    def dfs(self, i, j, matrix, d):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or matrix[i][j] < d:\n            return\n        matrix[i][j] = d\n        self.dfs(i+1, j, matrix, d+1)\n        self.dfs(i-1, j, matrix, d+1)\n        self.dfs(i, j-1, matrix, d+1)\n        self.dfs(i, j+1, matrix, d+1)\n```\n### 286\tWalls and Gates\n找出0的位置，然后-1为墙\n\n```python\nclass Solution(object):\n    def wallsAndGates(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: void Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if not rooms or not rooms[0]:\n            return\n        m = len(rooms)\n        n = len(rooms[0])\n        for i in range(m):\n            for j in range(n):\n                # start\n                if rooms[i][j] == 0:\n                    self.dfs(i, j, rooms, 0)\n        \n    def dfs(self, r, c, rooms, d):\n        if r < 0 or c < 0 or r >= len(rooms) or c >= len(rooms[0]) or rooms[r][c] < d:\n            return\n        # mark as 0 and then other path + 1\n        rooms[r][c] = d\n        self.dfs(r+1, c, rooms, d+1)\n        self.dfs(r-1, c, rooms, d+1)\n        self.dfs(r, c+1, rooms, d+1)\n        self.dfs(r, c-1, rooms, d+1)\n```\n## Matrix 2\n有时候在Matrix的时候需要判断每一次DFS的情况，这时候也可以通过比较每一次更新的值来抉择\n### 329. Longest Increasing Path in a Matrix\n每一次找到递增的时候，继续DFS，然后用cache来记录每一个（i，j）最大可能的递增长度\n\n```python\nclass Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not matrix or not matrix[0]:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        cache = [[0 for _ in range(n)] for _ in range(m)]\n        \n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, self.dfs(i,j,cache, matrix))\n        return ans\n    \n    def dfs(self, i, j, cache, matrix):\n        # find cache\n        if cache[i][j] != 0:\n            return cache[i][j]\n        direction = [(0,1),(0,-1),(1,0),(-1,0)]\n        for dire in direction:\n            x, y = i + dire[0], j + dire[1]\n            if x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]) or matrix[i][j] >= matrix[x][y]:\n                continue\n            cache[i][j] = max(cache[i][j], self.dfs(x,y,cache, matrix))\n        # self (i,j) + 1\n        cache[i][j] += 1\n        return cache[i][j]\n        \n```\n### 695. Max Area of Island\n另外一种思路\n\n```python\nclass Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        seen = set()  # function scope var \n        res = 0\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                   if grid[row][col] == 1:\n                    \tres = max(res,self.dfs(row, col, grid,seen))        return res\n\n    def dfs(self, row, col,grid, seen):\n            \"\"\"if a point is valid, it should meet all requirements using \"and\" \"\"\"\n            if 0 <= row < len(grid) and 0 <= col < len(grid[0]) and (grid[row][col] == 1) and (row, col) not in seen:\n                seen.add((row, col))             # list this point to seen set so we won't count it again\n                return (self.dfs(row - 1, col,grid,seen) + self.dfs(row + 1, col,grid,seen)\n                        + self.dfs(row, col - 1,grid,seen) + self.dfs(row, col + 1,grid, seen)\n                        + 1)                     # add 1 to the area and DFS(4-Conn Neighbors)\n\n            else:\n                return 0                         # not valid point return 0\n\n```\n        \n### 417. Pacific Atlantic Water Flow\n这道题要从两方面来判断，太平洋和大西洋\n\n```python\nclass Solution(object):\n    def pacificAtlantic(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        # O(MN) \n        # need to write more\n        if not matrix or not matrix[0]:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        p_visited = [[False for _ in range(n)] for _ in range(m)]\n        a_visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        res = []\n        for i in range(m):\n            # left and right\n            \n            self.dfs(i, 0, p_visited, m, n, matrix)\n            self.dfs(i, n-1, a_visited, m, n, matrix)\n            \n        for j in range(n):\n            # up and down\n            self.dfs(0, j, p_visited, m, n, matrix)\n            self.dfs(m-1, j, a_visited, m, n, matrix)\n        #print p_visited, a_visited\n        for i in range(m):\n            for j in range(n):\n                if p_visited[i][j] and a_visited[i][j]:\n                    res.append([i,j])\n        return res\n    \n    def dfs(self, i, j, visited, m, n, matrix):\n        visited[i][j] = True\n        direction = [(0,1),(0,-1),(1,0),(-1,0)]\n        for dire in direction:\n            x, y = i + dire[0], j + dire[1]\n            if x < 0 or y < 0 or x >= m or y >= n or visited[x][y] or matrix[i][j] > matrix[x][y]:\n                continue\n            self.dfs(x, y, visited, m, n, matrix)\n```\n\n# BFS\n## 普通的\n参见之前写过的BFS-border总结  \n[BFS-Maze总结](http://joshuablog.herokuapp.com/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/)\n### 490\n### 499\n### 505\n### 542\n### 286\n\n## 狄杰斯特拉算法\n求有缘路径的最短距离  \n算法导论的经典例子\n### 743. Network Delay Time\n使用heap操作，每次添加最短的路径cost\n\n```python\nimport heapq\nclass Solution(object):\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        # O(ElgV) E edges, V vertices\n        # Dijkstra's\n        pq = [[0,K]]\n        graph = collections.defaultdict(list)\n        for u,v,w in times:\n            graph[u].append([v,w])\n            \n        dic = dict()  \n        # len(pq) ~ V\n        while pq:\n            distance, node = heapq.heappop(pq)\n            \n            #visited\n            if node in dic:\n                continue\n            dic[node] = distance\n            # O(E) ~ edges\n            for desination, path in graph[node]:\n                if desination not in dic:\n                    heapq.heappush(pq,(distance + path, desination))\n        return max(dic.values()) if len(dic) == N else -1\n```\n### 787. Cheapest Flights Within K Stops\n几乎和上题一样\n\n```python\nclass Solution(object):\n    def findCheapestPrice(self, n, flights, src, dst, k):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        # O(ElgV) E flight ways ,V cities\n        f = collections.defaultdict(dict)\n        for a, b, p in flights:\n            f[a][b] = p\n        \n        heap = [(0, src, k + 1)]\n        while heap:\n            p, i, k = heapq.heappop(heap)\n            if i == dst:\n                return p\n            if k > 0:\n                for j in f[i]:\n                    heapq.heappush(heap, (p + f[i][j], j, k - 1))\n        return -1\n```","source":"_posts/DFS-BFS-总结.md","raw":"---\ntitle: DFS-BFS 总结\ncomments: true\ndate: 2018-03-10 14:49:35\nupdated: 2018-03-11 14:49:35\ncategories: Leetcode\ntags: [DFS, BFS]\n---\n# DFS \n## Matrix\n### 介绍\n对于不是Tree下面的DFS题来说，一直是我的一个弱点（不知道为什么），所以现在特意开贴来总结常见的题型\n\n大致的模版就是明确dfs函数中不合法的状态要直接return和继续dfs的情况；同时也要做好visited的标记，从而避免无限循环的错误\n\n```python\ndef dfs(i,j,matrix):\n\tif i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix) or matrix[i][j] == X:\n\t\treturn\n\t\t\n\t# set visited\n\tmatrix[i][j] = X\n\tdfs(i+1, j, matrix)\n\tdfs(i-1, j, matrix)\n\t...\n\t\n```\n<!--more-->\n### 733. Flood Fill\n最简单的DFS版本\n\n```python\nclass Solution(object):\n    def floodFill(self, image, sr, sc, newColor):\n        \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type newColor: int\n        :rtype: List[List[int]]\n        \"\"\"\n        m = len(image)\n        n = len(image[0])\n        color = image[sr][sc]\n        if color != newColor:\n            self.dfs(sr, sc,image,color,newColor)\n        return image\n    \n    def dfs(self, i, j,image,color,newColor):\n        if i < 0 or j < 0 or i >= len(image) or j >= len(image[0]) or image[i][j] != color:\n            return\n        image[i][j] = newColor\n        self.dfs(i+1, j, image, color, newColor)\n        self.dfs(i-1, j, image, color, newColor)\n        self.dfs(i, j+1, image, color, newColor)\n        self.dfs(i, j-1, image, color, newColor)\n```\n\n### 130. Surrounded Regions\n如果1的周围有边界的话，设置为M作为标准，之后再改回来。之后的same as Island\n\n```python\nclass Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:\n            return\n        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                # border case\n                if (i == 0 or j == 0 or i == m-1 or j == n -1) and board[i][j] == 'O':\n                    board[i][j] == 'M'\n                    self.dfs(i,j,board)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'M':\n                    board[i][j] = 'O'\n    \n    def dfs(self, r, c, board):\n        if r < 0 or c < 0 or r >= len(board) or c >= len(board[0]) or board[r][c] == 'X' or board[r][c] == 'M':\n            return\n        board[r][c] = 'M'\n        self.dfs(r+1, c, board)\n        self.dfs(r-1, c, board)\n        self.dfs(r, c+1, board)\n        self.dfs(r, c-1, board)\n```\n\n### 200. Number of Islands\n如果岛屿周围为1，置为0\n\n```python\nclass Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid or not grid[0]:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    count += 1\n                    self.dfs(i,j,grid)\n        return count\n    \n    def dfs(self, r, c, grid):\n        if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == '0':\n            return\n        grid[r][c] = '0'\n        \n        self.dfs(r+1,c,  grid)\n        self.dfs(r-1, c, grid)\n        self.dfs(r, c-1, grid)\n        self.dfs(r, c+1, grid)\n```\n### 542\t01 Matrix\nSame as Wall and Gate\n\n```python\nclass Solution(object):\n    def updateMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        if not matrix or not matrix[0]:\n            return []\n        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    matrix[i][j] = float('inf')\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    self.dfs(i,j,matrix,0)\n        return matrix\n    \n    def dfs(self, i, j, matrix, d):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or matrix[i][j] < d:\n            return\n        matrix[i][j] = d\n        self.dfs(i+1, j, matrix, d+1)\n        self.dfs(i-1, j, matrix, d+1)\n        self.dfs(i, j-1, matrix, d+1)\n        self.dfs(i, j+1, matrix, d+1)\n```\n### 286\tWalls and Gates\n找出0的位置，然后-1为墙\n\n```python\nclass Solution(object):\n    def wallsAndGates(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: void Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if not rooms or not rooms[0]:\n            return\n        m = len(rooms)\n        n = len(rooms[0])\n        for i in range(m):\n            for j in range(n):\n                # start\n                if rooms[i][j] == 0:\n                    self.dfs(i, j, rooms, 0)\n        \n    def dfs(self, r, c, rooms, d):\n        if r < 0 or c < 0 or r >= len(rooms) or c >= len(rooms[0]) or rooms[r][c] < d:\n            return\n        # mark as 0 and then other path + 1\n        rooms[r][c] = d\n        self.dfs(r+1, c, rooms, d+1)\n        self.dfs(r-1, c, rooms, d+1)\n        self.dfs(r, c+1, rooms, d+1)\n        self.dfs(r, c-1, rooms, d+1)\n```\n## Matrix 2\n有时候在Matrix的时候需要判断每一次DFS的情况，这时候也可以通过比较每一次更新的值来抉择\n### 329. Longest Increasing Path in a Matrix\n每一次找到递增的时候，继续DFS，然后用cache来记录每一个（i，j）最大可能的递增长度\n\n```python\nclass Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not matrix or not matrix[0]:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        cache = [[0 for _ in range(n)] for _ in range(m)]\n        \n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, self.dfs(i,j,cache, matrix))\n        return ans\n    \n    def dfs(self, i, j, cache, matrix):\n        # find cache\n        if cache[i][j] != 0:\n            return cache[i][j]\n        direction = [(0,1),(0,-1),(1,0),(-1,0)]\n        for dire in direction:\n            x, y = i + dire[0], j + dire[1]\n            if x < 0 or y < 0 or x >= len(matrix) or y >= len(matrix[0]) or matrix[i][j] >= matrix[x][y]:\n                continue\n            cache[i][j] = max(cache[i][j], self.dfs(x,y,cache, matrix))\n        # self (i,j) + 1\n        cache[i][j] += 1\n        return cache[i][j]\n        \n```\n### 695. Max Area of Island\n另外一种思路\n\n```python\nclass Solution:\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        seen = set()  # function scope var \n        res = 0\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                   if grid[row][col] == 1:\n                    \tres = max(res,self.dfs(row, col, grid,seen))        return res\n\n    def dfs(self, row, col,grid, seen):\n            \"\"\"if a point is valid, it should meet all requirements using \"and\" \"\"\"\n            if 0 <= row < len(grid) and 0 <= col < len(grid[0]) and (grid[row][col] == 1) and (row, col) not in seen:\n                seen.add((row, col))             # list this point to seen set so we won't count it again\n                return (self.dfs(row - 1, col,grid,seen) + self.dfs(row + 1, col,grid,seen)\n                        + self.dfs(row, col - 1,grid,seen) + self.dfs(row, col + 1,grid, seen)\n                        + 1)                     # add 1 to the area and DFS(4-Conn Neighbors)\n\n            else:\n                return 0                         # not valid point return 0\n\n```\n        \n### 417. Pacific Atlantic Water Flow\n这道题要从两方面来判断，太平洋和大西洋\n\n```python\nclass Solution(object):\n    def pacificAtlantic(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        # O(MN) \n        # need to write more\n        if not matrix or not matrix[0]:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        p_visited = [[False for _ in range(n)] for _ in range(m)]\n        a_visited = [[False for _ in range(n)] for _ in range(m)]\n        \n        res = []\n        for i in range(m):\n            # left and right\n            \n            self.dfs(i, 0, p_visited, m, n, matrix)\n            self.dfs(i, n-1, a_visited, m, n, matrix)\n            \n        for j in range(n):\n            # up and down\n            self.dfs(0, j, p_visited, m, n, matrix)\n            self.dfs(m-1, j, a_visited, m, n, matrix)\n        #print p_visited, a_visited\n        for i in range(m):\n            for j in range(n):\n                if p_visited[i][j] and a_visited[i][j]:\n                    res.append([i,j])\n        return res\n    \n    def dfs(self, i, j, visited, m, n, matrix):\n        visited[i][j] = True\n        direction = [(0,1),(0,-1),(1,0),(-1,0)]\n        for dire in direction:\n            x, y = i + dire[0], j + dire[1]\n            if x < 0 or y < 0 or x >= m or y >= n or visited[x][y] or matrix[i][j] > matrix[x][y]:\n                continue\n            self.dfs(x, y, visited, m, n, matrix)\n```\n\n# BFS\n## 普通的\n参见之前写过的BFS-border总结  \n[BFS-Maze总结](http://joshuablog.herokuapp.com/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/)\n### 490\n### 499\n### 505\n### 542\n### 286\n\n## 狄杰斯特拉算法\n求有缘路径的最短距离  \n算法导论的经典例子\n### 743. Network Delay Time\n使用heap操作，每次添加最短的路径cost\n\n```python\nimport heapq\nclass Solution(object):\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        # O(ElgV) E edges, V vertices\n        # Dijkstra's\n        pq = [[0,K]]\n        graph = collections.defaultdict(list)\n        for u,v,w in times:\n            graph[u].append([v,w])\n            \n        dic = dict()  \n        # len(pq) ~ V\n        while pq:\n            distance, node = heapq.heappop(pq)\n            \n            #visited\n            if node in dic:\n                continue\n            dic[node] = distance\n            # O(E) ~ edges\n            for desination, path in graph[node]:\n                if desination not in dic:\n                    heapq.heappush(pq,(distance + path, desination))\n        return max(dic.values()) if len(dic) == N else -1\n```\n### 787. Cheapest Flights Within K Stops\n几乎和上题一样\n\n```python\nclass Solution(object):\n    def findCheapestPrice(self, n, flights, src, dst, k):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        # O(ElgV) E flight ways ,V cities\n        f = collections.defaultdict(dict)\n        for a, b, p in flights:\n            f[a][b] = p\n        \n        heap = [(0, src, k + 1)]\n        while heap:\n            p, i, k = heapq.heappop(heap)\n            if i == dst:\n                return p\n            if k > 0:\n                for j in f[i]:\n                    heapq.heappush(heap, (p + f[i][j], j, k - 1))\n        return -1\n```","slug":"DFS-BFS-总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hden0008m2ca2k9g3y6i","content":"<h1 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h1><h2 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>对于不是Tree下面的DFS题来说，一直是我的一个弱点（不知道为什么），所以现在特意开贴来总结常见的题型</p>\n<p>大致的模版就是明确dfs函数中不合法的状态要直接return和继续dfs的情况；同时也要做好visited的标记，从而避免无限循环的错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(i,j,matrix)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(matrix) <span class=\"keyword\">or</span> j &gt;= len(matrix) <span class=\"keyword\">or</span> matrix[i][j] == X:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\"># set visited</span></span><br><span class=\"line\">\tmatrix[i][j] = X</span><br><span class=\"line\">\tdfs(i+<span class=\"number\">1</span>, j, matrix)</span><br><span class=\"line\">\tdfs(i<span class=\"number\">-1</span>, j, matrix)</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"733-Flood-Fill\"><a href=\"#733-Flood-Fill\" class=\"headerlink\" title=\"733. Flood Fill\"></a>733. Flood Fill</h3><p>最简单的DFS版本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">floodFill</span><span class=\"params\">(self, image, sr, sc, newColor)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type image: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type sr: int</span></span><br><span class=\"line\"><span class=\"string\">        :type sc: int</span></span><br><span class=\"line\"><span class=\"string\">        :type newColor: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(image)</span><br><span class=\"line\">        n = len(image[<span class=\"number\">0</span>])</span><br><span class=\"line\">        color = image[sr][sc]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> color != newColor:</span><br><span class=\"line\">            self.dfs(sr, sc,image,color,newColor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j,image,color,newColor)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(image) <span class=\"keyword\">or</span> j &gt;= len(image[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> image[i][j] != color:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        image[i][j] = newColor</span><br><span class=\"line\">        self.dfs(i+<span class=\"number\">1</span>, j, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i<span class=\"number\">-1</span>, j, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i, j+<span class=\"number\">1</span>, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i, j<span class=\"number\">-1</span>, image, color, newColor)</span><br></pre></td></tr></table></figure>\n<h3 id=\"130-Surrounded-Regions\"><a href=\"#130-Surrounded-Regions\" class=\"headerlink\" title=\"130. Surrounded Regions\"></a>130. Surrounded Regions</h3><p>如果1的周围有边界的话，设置为M作为标准，之后再改回来。之后的same as Island</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">(self, board)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type board: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify board in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> board <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> board[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(board)</span><br><span class=\"line\">        n = len(board[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># border case</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> j == <span class=\"number\">0</span> <span class=\"keyword\">or</span> i == m<span class=\"number\">-1</span> <span class=\"keyword\">or</span> j == n <span class=\"number\">-1</span>) <span class=\"keyword\">and</span> board[i][j] == <span class=\"string\">'O'</span>:</span><br><span class=\"line\">                    board[i][j] == <span class=\"string\">'M'</span></span><br><span class=\"line\">                    self.dfs(i,j,board)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> board[i][j] == <span class=\"string\">'O'</span>:</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'X'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> board[i][j] == <span class=\"string\">'M'</span>:</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'O'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, board)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(board) <span class=\"keyword\">or</span> c &gt;= len(board[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> board[r][c] == <span class=\"string\">'X'</span> <span class=\"keyword\">or</span> board[r][c] == <span class=\"string\">'M'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        board[r][c] = <span class=\"string\">'M'</span></span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>, c, board)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, board)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, board)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, board)</span><br></pre></td></tr></table></figure>\n<h3 id=\"200-Number-of-Islands\"><a href=\"#200-Number-of-Islands\" class=\"headerlink\" title=\"200. Number of Islands\"></a>200. Number of Islands</h3><p>如果岛屿周围为1，置为0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> grid <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> grid[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    count += <span class=\"number\">1</span></span><br><span class=\"line\">                    self.dfs(i,j,grid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(grid) <span class=\"keyword\">or</span> c &gt;= len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> grid[r][c] == <span class=\"string\">'0'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        grid[r][c] = <span class=\"string\">'0'</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>,c,  grid)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, grid)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, grid)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, grid)</span><br></pre></td></tr></table></figure>\n<h3 id=\"542-01-Matrix\"><a href=\"#542-01-Matrix\" class=\"headerlink\" title=\"542    01 Matrix\"></a>542    01 Matrix</h3><p>Same as Wall and Gate</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateMatrix</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    matrix[i][j] = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    self.dfs(i,j,matrix,<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> matrix</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, matrix, d)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(matrix) <span class=\"keyword\">or</span> j &gt;= len(matrix[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> matrix[i][j] &lt; d:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        matrix[i][j] = d</span><br><span class=\"line\">        self.dfs(i+<span class=\"number\">1</span>, j, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i<span class=\"number\">-1</span>, j, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i, j<span class=\"number\">-1</span>, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i, j+<span class=\"number\">1</span>, matrix, d+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"286-Walls-and-Gates\"><a href=\"#286-Walls-and-Gates\" class=\"headerlink\" title=\"286    Walls and Gates\"></a>286    Walls and Gates</h3><p>找出0的位置，然后-1为墙</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wallsAndGates</span><span class=\"params\">(self, rooms)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type rooms: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify rooms in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> rooms <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> rooms[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(rooms)</span><br><span class=\"line\">        n = len(rooms[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># start</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> rooms[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    self.dfs(i, j, rooms, <span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, rooms, d)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(rooms) <span class=\"keyword\">or</span> c &gt;= len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> rooms[r][c] &lt; d:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\"># mark as 0 and then other path + 1</span></span><br><span class=\"line\">        rooms[r][c] = d</span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>, c, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, rooms, d+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Matrix-2\"><a href=\"#Matrix-2\" class=\"headerlink\" title=\"Matrix 2\"></a>Matrix 2</h2><p>有时候在Matrix的时候需要判断每一次DFS的情况，这时候也可以通过比较每一次更新的值来抉择</p>\n<h3 id=\"329-Longest-Increasing-Path-in-a-Matrix\"><a href=\"#329-Longest-Increasing-Path-in-a-Matrix\" class=\"headerlink\" title=\"329. Longest Increasing Path in a Matrix\"></a>329. Longest Increasing Path in a Matrix</h3><p>每一次找到递增的时候，继续DFS，然后用cache来记录每一个（i，j）最大可能的递增长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestIncreasingPath</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        cache = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                ans = max(ans, self.dfs(i,j,cache, matrix))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, cache, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># find cache</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cache[i][j] != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[i][j]</span><br><span class=\"line\">        direction = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dire <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            x, y = i + dire[<span class=\"number\">0</span>], j + dire[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= len(matrix) <span class=\"keyword\">or</span> y &gt;= len(matrix[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> matrix[i][j] &gt;= matrix[x][y]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            cache[i][j] = max(cache[i][j], self.dfs(x,y,cache, matrix))</span><br><span class=\"line\">        <span class=\"comment\"># self (i,j) + 1</span></span><br><span class=\"line\">        cache[i][j] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache[i][j]</span><br></pre></td></tr></table></figure>\n<h3 id=\"695-Max-Area-of-Island\"><a href=\"#695-Max-Area-of-Island\" class=\"headerlink\" title=\"695. Max Area of Island\"></a>695. Max Area of Island</h3><p>另外一种思路</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        seen = set()  <span class=\"comment\"># function scope var </span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(grid)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(grid[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> grid[row][col] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    \tres = max(res,self.dfs(row, col, grid,seen))        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, row, col,grid, seen)</span>:</span></span><br><span class=\"line\">            <span class=\"string\">\"\"\"if a point is valid, it should meet all requirements using \"and\" \"\"\"</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(grid) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> (grid[row][col] == <span class=\"number\">1</span>) <span class=\"keyword\">and</span> (row, col) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> seen:</span><br><span class=\"line\">                seen.add((row, col))             <span class=\"comment\"># list this point to seen set so we won't count it again</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (self.dfs(row - <span class=\"number\">1</span>, col,grid,seen) + self.dfs(row + <span class=\"number\">1</span>, col,grid,seen)</span><br><span class=\"line\">                        + self.dfs(row, col - <span class=\"number\">1</span>,grid,seen) + self.dfs(row, col + <span class=\"number\">1</span>,grid, seen)</span><br><span class=\"line\">                        + <span class=\"number\">1</span>)                     <span class=\"comment\"># add 1 to the area and DFS(4-Conn Neighbors)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>                         <span class=\"comment\"># not valid point return 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"417-Pacific-Atlantic-Water-Flow\"><a href=\"#417-Pacific-Atlantic-Water-Flow\" class=\"headerlink\" title=\"417. Pacific Atlantic Water Flow\"></a>417. Pacific Atlantic Water Flow</h3><p>这道题要从两方面来判断，太平洋和大西洋</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pacificAtlantic</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(MN) </span></span><br><span class=\"line\">        <span class=\"comment\"># need to write more</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        </span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        p_visited = [[<span class=\"keyword\">False</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        a_visited = [[<span class=\"keyword\">False</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"comment\"># left and right</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            self.dfs(i, <span class=\"number\">0</span>, p_visited, m, n, matrix)</span><br><span class=\"line\">            self.dfs(i, n<span class=\"number\">-1</span>, a_visited, m, n, matrix)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"comment\"># up and down</span></span><br><span class=\"line\">            self.dfs(<span class=\"number\">0</span>, j, p_visited, m, n, matrix)</span><br><span class=\"line\">            self.dfs(m<span class=\"number\">-1</span>, j, a_visited, m, n, matrix)</span><br><span class=\"line\">        <span class=\"comment\">#print p_visited, a_visited</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p_visited[i][j] <span class=\"keyword\">and</span> a_visited[i][j]:</span><br><span class=\"line\">                    res.append([i,j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, visited, m, n, matrix)</span>:</span></span><br><span class=\"line\">        visited[i][j] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        direction = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dire <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            x, y = i + dire[<span class=\"number\">0</span>], j + dire[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= m <span class=\"keyword\">or</span> y &gt;= n <span class=\"keyword\">or</span> visited[x][y] <span class=\"keyword\">or</span> matrix[i][j] &gt; matrix[x][y]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.dfs(x, y, visited, m, n, matrix)</span><br></pre></td></tr></table></figure>\n<h1 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h1><h2 id=\"普通的\"><a href=\"#普通的\" class=\"headerlink\" title=\"普通的\"></a>普通的</h2><p>参见之前写过的BFS-border总结<br><a href=\"http://joshuablog.herokuapp.com/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/\" target=\"_blank\" rel=\"noopener\">BFS-Maze总结</a></p>\n<h3 id=\"490\"><a href=\"#490\" class=\"headerlink\" title=\"490\"></a>490</h3><h3 id=\"499\"><a href=\"#499\" class=\"headerlink\" title=\"499\"></a>499</h3><h3 id=\"505\"><a href=\"#505\" class=\"headerlink\" title=\"505\"></a>505</h3><h3 id=\"542\"><a href=\"#542\" class=\"headerlink\" title=\"542\"></a>542</h3><h3 id=\"286\"><a href=\"#286\" class=\"headerlink\" title=\"286\"></a>286</h3><h2 id=\"狄杰斯特拉算法\"><a href=\"#狄杰斯特拉算法\" class=\"headerlink\" title=\"狄杰斯特拉算法\"></a>狄杰斯特拉算法</h2><p>求有缘路径的最短距离<br>算法导论的经典例子</p>\n<h3 id=\"743-Network-Delay-Time\"><a href=\"#743-Network-Delay-Time\" class=\"headerlink\" title=\"743. Network Delay Time\"></a>743. Network Delay Time</h3><p>使用heap操作，每次添加最短的路径cost</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">networkDelayTime</span><span class=\"params\">(self, times, N, K)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type times: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type N: int</span></span><br><span class=\"line\"><span class=\"string\">        :type K: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(ElgV) E edges, V vertices</span></span><br><span class=\"line\">        <span class=\"comment\"># Dijkstra's</span></span><br><span class=\"line\">        pq = [[<span class=\"number\">0</span>,K]]</span><br><span class=\"line\">        graph = collections.defaultdict(list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u,v,w <span class=\"keyword\">in</span> times:</span><br><span class=\"line\">            graph[u].append([v,w])</span><br><span class=\"line\">            </span><br><span class=\"line\">        dic = dict()  </span><br><span class=\"line\">        <span class=\"comment\"># len(pq) ~ V</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            distance, node = heapq.heappop(pq)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">#visited</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> node <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            dic[node] = distance</span><br><span class=\"line\">            <span class=\"comment\"># O(E) ~ edges</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> desination, path <span class=\"keyword\">in</span> graph[node]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> desination <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    heapq.heappush(pq,(distance + path, desination))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(dic.values()) <span class=\"keyword\">if</span> len(dic) == N <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"787-Cheapest-Flights-Within-K-Stops\"><a href=\"#787-Cheapest-Flights-Within-K-Stops\" class=\"headerlink\" title=\"787. Cheapest Flights Within K Stops\"></a>787. Cheapest Flights Within K Stops</h3><p>几乎和上题一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCheapestPrice</span><span class=\"params\">(self, n, flights, src, dst, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type flights: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type src: int</span></span><br><span class=\"line\"><span class=\"string\">        :type dst: int</span></span><br><span class=\"line\"><span class=\"string\">        :type K: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(ElgV) E flight ways ,V cities</span></span><br><span class=\"line\">        f = collections.defaultdict(dict)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b, p <span class=\"keyword\">in</span> flights:</span><br><span class=\"line\">            f[a][b] = p</span><br><span class=\"line\">        </span><br><span class=\"line\">        heap = [(<span class=\"number\">0</span>, src, k + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> heap:</span><br><span class=\"line\">            p, i, k = heapq.heappop(heap)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == dst:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\">            <span class=\"keyword\">if</span> k &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> f[i]:</span><br><span class=\"line\">                    heapq.heappush(heap, (p + f[i][j], j, k - <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h1><h2 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>对于不是Tree下面的DFS题来说，一直是我的一个弱点（不知道为什么），所以现在特意开贴来总结常见的题型</p>\n<p>大致的模版就是明确dfs函数中不合法的状态要直接return和继续dfs的情况；同时也要做好visited的标记，从而避免无限循环的错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(i,j,matrix)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(matrix) <span class=\"keyword\">or</span> j &gt;= len(matrix) <span class=\"keyword\">or</span> matrix[i][j] == X:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\"># set visited</span></span><br><span class=\"line\">\tmatrix[i][j] = X</span><br><span class=\"line\">\tdfs(i+<span class=\"number\">1</span>, j, matrix)</span><br><span class=\"line\">\tdfs(i<span class=\"number\">-1</span>, j, matrix)</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"733-Flood-Fill\"><a href=\"#733-Flood-Fill\" class=\"headerlink\" title=\"733. Flood Fill\"></a>733. Flood Fill</h3><p>最简单的DFS版本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">floodFill</span><span class=\"params\">(self, image, sr, sc, newColor)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type image: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type sr: int</span></span><br><span class=\"line\"><span class=\"string\">        :type sc: int</span></span><br><span class=\"line\"><span class=\"string\">        :type newColor: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(image)</span><br><span class=\"line\">        n = len(image[<span class=\"number\">0</span>])</span><br><span class=\"line\">        color = image[sr][sc]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> color != newColor:</span><br><span class=\"line\">            self.dfs(sr, sc,image,color,newColor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j,image,color,newColor)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(image) <span class=\"keyword\">or</span> j &gt;= len(image[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> image[i][j] != color:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        image[i][j] = newColor</span><br><span class=\"line\">        self.dfs(i+<span class=\"number\">1</span>, j, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i<span class=\"number\">-1</span>, j, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i, j+<span class=\"number\">1</span>, image, color, newColor)</span><br><span class=\"line\">        self.dfs(i, j<span class=\"number\">-1</span>, image, color, newColor)</span><br></pre></td></tr></table></figure>\n<h3 id=\"130-Surrounded-Regions\"><a href=\"#130-Surrounded-Regions\" class=\"headerlink\" title=\"130. Surrounded Regions\"></a>130. Surrounded Regions</h3><p>如果1的周围有边界的话，设置为M作为标准，之后再改回来。之后的same as Island</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solve</span><span class=\"params\">(self, board)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type board: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify board in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> board <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> board[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(board)</span><br><span class=\"line\">        n = len(board[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># border case</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> j == <span class=\"number\">0</span> <span class=\"keyword\">or</span> i == m<span class=\"number\">-1</span> <span class=\"keyword\">or</span> j == n <span class=\"number\">-1</span>) <span class=\"keyword\">and</span> board[i][j] == <span class=\"string\">'O'</span>:</span><br><span class=\"line\">                    board[i][j] == <span class=\"string\">'M'</span></span><br><span class=\"line\">                    self.dfs(i,j,board)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> board[i][j] == <span class=\"string\">'O'</span>:</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'X'</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> board[i][j] == <span class=\"string\">'M'</span>:</span><br><span class=\"line\">                    board[i][j] = <span class=\"string\">'O'</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, board)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(board) <span class=\"keyword\">or</span> c &gt;= len(board[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> board[r][c] == <span class=\"string\">'X'</span> <span class=\"keyword\">or</span> board[r][c] == <span class=\"string\">'M'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        board[r][c] = <span class=\"string\">'M'</span></span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>, c, board)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, board)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, board)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, board)</span><br></pre></td></tr></table></figure>\n<h3 id=\"200-Number-of-Islands\"><a href=\"#200-Number-of-Islands\" class=\"headerlink\" title=\"200. Number of Islands\"></a>200. Number of Islands</h3><p>如果岛屿周围为1，置为0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> grid <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> grid[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    count += <span class=\"number\">1</span></span><br><span class=\"line\">                    self.dfs(i,j,grid)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(grid) <span class=\"keyword\">or</span> c &gt;= len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> grid[r][c] == <span class=\"string\">'0'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        grid[r][c] = <span class=\"string\">'0'</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>,c,  grid)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, grid)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, grid)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, grid)</span><br></pre></td></tr></table></figure>\n<h3 id=\"542-01-Matrix\"><a href=\"#542-01-Matrix\" class=\"headerlink\" title=\"542    01 Matrix\"></a>542    01 Matrix</h3><p>Same as Wall and Gate</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateMatrix</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    matrix[i][j] = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    self.dfs(i,j,matrix,<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> matrix</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, matrix, d)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> j &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> i &gt;= len(matrix) <span class=\"keyword\">or</span> j &gt;= len(matrix[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> matrix[i][j] &lt; d:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        matrix[i][j] = d</span><br><span class=\"line\">        self.dfs(i+<span class=\"number\">1</span>, j, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i<span class=\"number\">-1</span>, j, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i, j<span class=\"number\">-1</span>, matrix, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(i, j+<span class=\"number\">1</span>, matrix, d+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"286-Walls-and-Gates\"><a href=\"#286-Walls-and-Gates\" class=\"headerlink\" title=\"286    Walls and Gates\"></a>286    Walls and Gates</h3><p>找出0的位置，然后-1为墙</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wallsAndGates</span><span class=\"params\">(self, rooms)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type rooms: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void Do not return anything, modify rooms in-place instead.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> rooms <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> rooms[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(rooms)</span><br><span class=\"line\">        n = len(rooms[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># start</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> rooms[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    self.dfs(i, j, rooms, <span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, r, c, rooms, d)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> r &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> c &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> r &gt;= len(rooms) <span class=\"keyword\">or</span> c &gt;= len(rooms[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> rooms[r][c] &lt; d:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"comment\"># mark as 0 and then other path + 1</span></span><br><span class=\"line\">        rooms[r][c] = d</span><br><span class=\"line\">        self.dfs(r+<span class=\"number\">1</span>, c, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r<span class=\"number\">-1</span>, c, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r, c+<span class=\"number\">1</span>, rooms, d+<span class=\"number\">1</span>)</span><br><span class=\"line\">        self.dfs(r, c<span class=\"number\">-1</span>, rooms, d+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Matrix-2\"><a href=\"#Matrix-2\" class=\"headerlink\" title=\"Matrix 2\"></a>Matrix 2</h2><p>有时候在Matrix的时候需要判断每一次DFS的情况，这时候也可以通过比较每一次更新的值来抉择</p>\n<h3 id=\"329-Longest-Increasing-Path-in-a-Matrix\"><a href=\"#329-Longest-Increasing-Path-in-a-Matrix\" class=\"headerlink\" title=\"329. Longest Increasing Path in a Matrix\"></a>329. Longest Increasing Path in a Matrix</h3><p>每一次找到递增的时候，继续DFS，然后用cache来记录每一个（i，j）最大可能的递增长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestIncreasingPath</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        cache = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                ans = max(ans, self.dfs(i,j,cache, matrix))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, cache, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># find cache</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cache[i][j] != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache[i][j]</span><br><span class=\"line\">        direction = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dire <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            x, y = i + dire[<span class=\"number\">0</span>], j + dire[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= len(matrix) <span class=\"keyword\">or</span> y &gt;= len(matrix[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> matrix[i][j] &gt;= matrix[x][y]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            cache[i][j] = max(cache[i][j], self.dfs(x,y,cache, matrix))</span><br><span class=\"line\">        <span class=\"comment\"># self (i,j) + 1</span></span><br><span class=\"line\">        cache[i][j] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache[i][j]</span><br></pre></td></tr></table></figure>\n<h3 id=\"695-Max-Area-of-Island\"><a href=\"#695-Max-Area-of-Island\" class=\"headerlink\" title=\"695. Max Area of Island\"></a>695. Max Area of Island</h3><p>另外一种思路</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxAreaOfIsland</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        seen = set()  <span class=\"comment\"># function scope var </span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> range(len(grid)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> range(len(grid[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> grid[row][col] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    \tres = max(res,self.dfs(row, col, grid,seen))        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, row, col,grid, seen)</span>:</span></span><br><span class=\"line\">            <span class=\"string\">\"\"\"if a point is valid, it should meet all requirements using \"and\" \"\"\"</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= row &lt; len(grid) <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= col &lt; len(grid[<span class=\"number\">0</span>]) <span class=\"keyword\">and</span> (grid[row][col] == <span class=\"number\">1</span>) <span class=\"keyword\">and</span> (row, col) <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> seen:</span><br><span class=\"line\">                seen.add((row, col))             <span class=\"comment\"># list this point to seen set so we won't count it again</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (self.dfs(row - <span class=\"number\">1</span>, col,grid,seen) + self.dfs(row + <span class=\"number\">1</span>, col,grid,seen)</span><br><span class=\"line\">                        + self.dfs(row, col - <span class=\"number\">1</span>,grid,seen) + self.dfs(row, col + <span class=\"number\">1</span>,grid, seen)</span><br><span class=\"line\">                        + <span class=\"number\">1</span>)                     <span class=\"comment\"># add 1 to the area and DFS(4-Conn Neighbors)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>                         <span class=\"comment\"># not valid point return 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"417-Pacific-Atlantic-Water-Flow\"><a href=\"#417-Pacific-Atlantic-Water-Flow\" class=\"headerlink\" title=\"417. Pacific Atlantic Water Flow\"></a>417. Pacific Atlantic Water Flow</h3><p>这道题要从两方面来判断，太平洋和大西洋</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pacificAtlantic</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(MN) </span></span><br><span class=\"line\">        <span class=\"comment\"># need to write more</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        </span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        p_visited = [[<span class=\"keyword\">False</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        a_visited = [[<span class=\"keyword\">False</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"comment\"># left and right</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            self.dfs(i, <span class=\"number\">0</span>, p_visited, m, n, matrix)</span><br><span class=\"line\">            self.dfs(i, n<span class=\"number\">-1</span>, a_visited, m, n, matrix)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"comment\"># up and down</span></span><br><span class=\"line\">            self.dfs(<span class=\"number\">0</span>, j, p_visited, m, n, matrix)</span><br><span class=\"line\">            self.dfs(m<span class=\"number\">-1</span>, j, a_visited, m, n, matrix)</span><br><span class=\"line\">        <span class=\"comment\">#print p_visited, a_visited</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p_visited[i][j] <span class=\"keyword\">and</span> a_visited[i][j]:</span><br><span class=\"line\">                    res.append([i,j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, i, j, visited, m, n, matrix)</span>:</span></span><br><span class=\"line\">        visited[i][j] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        direction = [(<span class=\"number\">0</span>,<span class=\"number\">1</span>),(<span class=\"number\">0</span>,<span class=\"number\">-1</span>),(<span class=\"number\">1</span>,<span class=\"number\">0</span>),(<span class=\"number\">-1</span>,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dire <span class=\"keyword\">in</span> direction:</span><br><span class=\"line\">            x, y = i + dire[<span class=\"number\">0</span>], j + dire[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> y &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> x &gt;= m <span class=\"keyword\">or</span> y &gt;= n <span class=\"keyword\">or</span> visited[x][y] <span class=\"keyword\">or</span> matrix[i][j] &gt; matrix[x][y]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.dfs(x, y, visited, m, n, matrix)</span><br></pre></td></tr></table></figure>\n<h1 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h1><h2 id=\"普通的\"><a href=\"#普通的\" class=\"headerlink\" title=\"普通的\"></a>普通的</h2><p>参见之前写过的BFS-border总结<br><a href=\"http://joshuablog.herokuapp.com/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/\" target=\"_blank\" rel=\"noopener\">BFS-Maze总结</a></p>\n<h3 id=\"490\"><a href=\"#490\" class=\"headerlink\" title=\"490\"></a>490</h3><h3 id=\"499\"><a href=\"#499\" class=\"headerlink\" title=\"499\"></a>499</h3><h3 id=\"505\"><a href=\"#505\" class=\"headerlink\" title=\"505\"></a>505</h3><h3 id=\"542\"><a href=\"#542\" class=\"headerlink\" title=\"542\"></a>542</h3><h3 id=\"286\"><a href=\"#286\" class=\"headerlink\" title=\"286\"></a>286</h3><h2 id=\"狄杰斯特拉算法\"><a href=\"#狄杰斯特拉算法\" class=\"headerlink\" title=\"狄杰斯特拉算法\"></a>狄杰斯特拉算法</h2><p>求有缘路径的最短距离<br>算法导论的经典例子</p>\n<h3 id=\"743-Network-Delay-Time\"><a href=\"#743-Network-Delay-Time\" class=\"headerlink\" title=\"743. Network Delay Time\"></a>743. Network Delay Time</h3><p>使用heap操作，每次添加最短的路径cost</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">networkDelayTime</span><span class=\"params\">(self, times, N, K)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type times: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type N: int</span></span><br><span class=\"line\"><span class=\"string\">        :type K: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(ElgV) E edges, V vertices</span></span><br><span class=\"line\">        <span class=\"comment\"># Dijkstra's</span></span><br><span class=\"line\">        pq = [[<span class=\"number\">0</span>,K]]</span><br><span class=\"line\">        graph = collections.defaultdict(list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> u,v,w <span class=\"keyword\">in</span> times:</span><br><span class=\"line\">            graph[u].append([v,w])</span><br><span class=\"line\">            </span><br><span class=\"line\">        dic = dict()  </span><br><span class=\"line\">        <span class=\"comment\"># len(pq) ~ V</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            distance, node = heapq.heappop(pq)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">#visited</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> node <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            dic[node] = distance</span><br><span class=\"line\">            <span class=\"comment\"># O(E) ~ edges</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> desination, path <span class=\"keyword\">in</span> graph[node]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> desination <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    heapq.heappush(pq,(distance + path, desination))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(dic.values()) <span class=\"keyword\">if</span> len(dic) == N <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"787-Cheapest-Flights-Within-K-Stops\"><a href=\"#787-Cheapest-Flights-Within-K-Stops\" class=\"headerlink\" title=\"787. Cheapest Flights Within K Stops\"></a>787. Cheapest Flights Within K Stops</h3><p>几乎和上题一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCheapestPrice</span><span class=\"params\">(self, n, flights, src, dst, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type flights: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type src: int</span></span><br><span class=\"line\"><span class=\"string\">        :type dst: int</span></span><br><span class=\"line\"><span class=\"string\">        :type K: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(ElgV) E flight ways ,V cities</span></span><br><span class=\"line\">        f = collections.defaultdict(dict)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b, p <span class=\"keyword\">in</span> flights:</span><br><span class=\"line\">            f[a][b] = p</span><br><span class=\"line\">        </span><br><span class=\"line\">        heap = [(<span class=\"number\">0</span>, src, k + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">while</span> heap:</span><br><span class=\"line\">            p, i, k = heapq.heappop(heap)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == dst:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\">            <span class=\"keyword\">if</span> k &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> f[i]:</span><br><span class=\"line\">                    heapq.heappush(heap, (p + f[i][j], j, k - <span class=\"number\">1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>"},{"title":"DP总结","comments":1,"date":"2017-10-19T22:56:32.000Z","updated":"2017-10-19T22:56:32.000Z","_content":"# 概念\n动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。  \nDP问题是Leetcode中的经典问题，也是面试中经常考到的类别之一，没有通用的模版，有些DP题思考的过程也比较繁琐.所以这篇总结可能会不断更新，以便达到更好的效果\n\n## 适用场景\n1. 找Max， Min的问题\n2. 发现可能性的问题\n3. 输出所有解的个数问题\n\n不适用场景  \n1. 列出所有具体方案（起码是指数级别的复杂度，通常是递归，backtracking）  \n2. 集合问题\n\n## 考虑\n1. 状态\n2. 转移方程\n3. 初始化条件\n4. 返回结果\n<!--more-->\n# 单序列问题\n通常是数组，字符串的前N个为...\n\n## Warm Up\n### 爬梯子\n作为DP的入门题来说，思考过程还是很重要的。 一次可以爬1级或者两级的台阶，问有多少种爬法。  \n符合输出所有解个数的问题。  \n因为只能爬一级或者两级所以到N级的话，你只能从n-1爬到n或者n-2爬到n；这样说来，如果`dp[n]`代表到n级台阶有多少种可能性的话，转移方程为`dp[n] = dp[n-1]+dp[n-2]`  \n所以代码很容易写出  \n\n```python\ndef climb(n):\n\tif n == 1:\n\t\treturn 1\n\tdp = [1 for _ in range(n+1)]\n\tdp[1] = 1\n\tdp[2] = 2\n\tfor i in range(3,n+1):\n\t\tdp[i] = dp[i-1]+dp[i-2]\n\treturn dp[-1]\n```\n\n当然这道题有优化条件，否则就没有必要花大篇幅写了。通过分析状态转移方程可以发现`dp[i]`只与`dp[i-1],dp[i-2]`有关，说明再之前的状态是不会影响到当前状态的，所以我们可以通过只保留两个状态来不断滚动从而求出最后的结果。\n\n```java\npublic class Solution {\n    public int climbStairs(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int first = 1;\n        int second = 2;\n        for (int i = 3; i <= n; i++) {\n            int third = first + second;\n            first = second;\n            second = third;\n        }\n        return second;\n    }\n}\n```\n进而我们能看出，如果当前状态只与前面的相关的话，我们都可以通过滚动数组，变量来简化空间复杂度--这种尤其适合不太复杂的动态规划问题，简单的二维DP\n\n### 53. Maximum Subarray\n找Max问题  \n很容易得出当前局部最大+当前值，和当前值的对比，而从决定是继续加还是从新来过\n\n```python\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        dp = [float('-inf') for _ in range(len(nums))]\n        \n        dp[0] = nums[0]\n        res = nums[0]\n        for each in range(1,len(nums)):\n            dp[each] = max(dp[each-1]+nums[each], nums[each])\n            res = max(res, dp[each])\n            #print dp\n        return res\n```\n从上一段分析可以看出，dp状态只与上一个状态有关，从而可以简化成变量来储存dp[]\n\n```python\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        prevMax = nums[0]\n        res = nums[0]\n        for each in range(1,len(nums)):\n            prevMax = max(prevMax+nums[each], nums[each])\n            res = max(res, prevMax)\n            #print dp\n        return res\n```\n### 300. Longest Increasing Subsequence\n找出Max  \n这道题有点不一样的地方是最后的结果有可能是任意一个位置，所以不是简单的`return dp[-1]`而是`max(dp)`  \n`dp[i] = 1 + max(dp[j]) j < i and A[i] > A[j]`\n\n```python\nclass Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [1] * (len(nums) + 1)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j]+1)\n        return max(dp)\n```\n\n### 139.Word Break\n寻求解的存在性\n和上一题有点像，dp[i] 为当前字符满足之前的字符在字典里\n\n```python\nclass Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        # dp保存dp【i】i之前的最少字符串\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        # 本身的循环，对字符串，在内层循环中需要使用i\n        for i in range(1, len(s)+1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True # 因为j～i是一个回文字符串\n        return dp[-1]\n```\n\n### 198. House Robber\n`dp[i] = max(dp[i-2]+A[i], dp[i-1])`\n当然一共就3个状态，我们也可以通过类似爬梯子的方式，把空间复杂度降为O（1）\n\n```python\nclass Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) < 2:\n            return nums[0] \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(dp[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]\n        \n```\n\n### 303. Range Sum Query - Immutable\n简单的累加求和做为DP，则转移方程为`res(x,y) = dp[y] - dp[x-1]`\n\n```python\nclass NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        total = 0\n        self.dp = []    \n        for i in nums:\n            total += i\n            self.dp.append(total)\n        \n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if i == 0:\n            return self.dp[j]\n        return self.dp[j] - self.dp[i-1]\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)\n```\n## Medium\n### 368. Largest Divisible Subset\n这道题需要一点思考，除了创建一个DP数组来记录到i位置最长的长度之外，我们还要知道其对应能整除的数字，所以还需要一个array来记录上一个数字的位置。dp的默认值为1， pre的初始值为None就是没有对应的数字；当且仅当dp需要更新的时候，更新其上一个能整除数字的index。最后找出max（dp）所对应的数字，根据其pre的index逐个找数字，输出。\n\n```python\nclass Solution(object):\n    def largestDivisibleSubset(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        nums = sorted(nums)\n        size = len(nums)\n        dp = [1] * size\n        pre = [None] * size\n        for x in range(size):\n            for y in range(x):\n                if nums[x] % nums[y] == 0 and dp[y] + 1 > dp[x]:\n                    dp[x] = dp[y] + 1\n                    pre[x] = y\n        idx = dp.index(max(dp))\n        ans = []\n        while idx is not None:\n            ans += nums[idx],\n            idx = pre[idx]\n        return ans\n```\n### 338. Counting Bits\n需要熟悉Bit运算和概念，要能发现countbit(n) = countbit(n/2) + n % 2这么一个方程，就是说一个数乘2意味着bit位左移一位\n\n```python\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        dp = [0 for _ in range(num+1)]\n        for i in range(num+1):\n            dp[i] = dp[i>>1] + i%2\n        return dp\n```\n\n### 264. Ugly Number II\n用三个dp存2，3，5出现作为乘子的个数\n\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = [1]\n        i2, i3, i5 = 0,0,0\n        while n:\n            u2, u3, u5 = 2 *res[i2], 3*res[i3], 5*res[i5]\n            temp = min(u2,u3,u5)\n            if temp == u2:\n                i2 += 1\n            if temp == u3:\n                i3 += 1\n            if temp == u5:\n                i5 += 1\n            res.append(temp)\n            n -= 1\n        return res[-2]\n```\n\n\n### 673. Number of Longest Increasing Subsequence\n相关题目，需要额外数组来记录已经出现最长的次数，也就是说如果前面有多个长度相等的连续子串的话，cnt要一直+1\n\n```python\nclass Solution(object):\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [1 for _ in range(len(nums))]\n        dc = [1 for _ in range(len(nums))]\n        for i in range(len(nums)):\n            for j in range(i):\n                \n                if nums[i] > nums[j]:\n                    if dp[i] < dp[j] + 1:\n                        dp[i] = dp[j] + 1\n                        dc[i] = dc[j]\n                    elif dp[i] == dp[j] + 1:\n                        dc[i] += dc[j] # we have multiple same length LIS, we need to add them\n        res = 0\n        \n        for index, value in enumerate(dp):\n            if value == max(dp):\n                res += dc[index]\n        return res\n                    \n```\n\n### 309. Best Time to Buy and Sell Stock with Cooldown\n这道题一开始确实想不出来，感觉情况太多了；我承认有些DP题就是想不出来怎么做.....后来看到Discuss上有一个解法很不错，就是我们就考虑buy和sell的情况，buy的情况是最大利益只和前一个状态有关或者前两个状态的时候卖，然后这时候买。所以DP的定义就是buy[i] 在i的时候和在i之前买的最大值   \n`buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]); `  \n同理，sell的时候也和之前状态有关  \n`sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);`\n\n```python\nclass Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        if not prices or len(prices) <= 1:\n            return 0\n        # buy[i] = max(buy[i-1], sell[i-2] - prices[i])\n        # sell[i] = max(sell[i-1], buy[i-1] + prices[i])\n        \n        b0 = -prices[0]\n        b1 = b0\n        s0 = 0\n        s1 = 0\n        s2 = 0\n        \n        for i in range(1,len(prices)):\n            b1 = max(b0, s0 - prices[i])\n            s2 = max(s1, b0 + prices[i])\n            \n            b0 = b1\n            s0 = s1\n            s1 = s2\n        return s2\n```\n\n\n# 矩阵DP\n这种问题需要初始化DP数组，第0行和第0列，这样会方便之后的操作，通常这种问题是只能向右或者向下操作，否则则需要用BFS--求最短路径；DFS来解决\n## Warm Up\n### 62. Unique Paths\n符合求解的个数问题  \n`dp[i][j] = dp[i-1][j] + dp[i][j-1]`\n\n```python\nclass Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if not m or not n:\n            return 0\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n        \n```\n当然我们知道每一个dp状态只与上方或者左方的状态相关，所以可以考虑通过某种方式来保存状态；一种方法是建立一个额外数组来存储列状态，dp变成一维存行状态；不过更进一步的话，每一个dp[i]状态就意味着当前从i行过来的状态总数，这里还是贴图吧，更好理解![img_6600](https://user-images.githubusercontent.com/10191895/31799214-a436210a-b4ed-11e7-8f79-5c0c1cf489d9.JPG)\n\n```python\nclass Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dp = [1 for _ in range(m)]\n        for i in range(1,n):\n            for j in range(1,m):\n                dp[j] += dp[j-1] \n        return dp[-1]\n        \n```\n\n### 63.Unique Paths II\n初始化首行首列的时候如果有障碍的话，就都变成0了\n\n```python\nclass Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n] * m\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n                \n```\n\n### 64. Minimum Path Sum\n\n```python\nclass Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1,m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1,n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        #print dp\n        return dp[-1][-1]\n        \n```\n题目变成了正方形，逐层扩展的时候要记录，每一列计算之前要加上第0行第j列的值，所以沿用上一题的图，dp[i] = dp[i]--上方的值+ dp[i-1] -- 左方的值\n\n\n\n```python\nclass Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(m)]\n        dp[0] = grid[0][0]\n        for i in range(1,m):\n            dp[i] = dp[i-1] + grid[i][0]\n        \n        for j in range(1,n):\n            dp[0] = dp[0] + grid[0][j]\n            for i in range(1,m):\n                dp[i] = min(dp[i], dp[i-1]) + grid[i][j]\n        #print dp\n        return dp[-1]\n```\n### 256. Paint House\n由于每次喷涂的房子颜色不能与之前的相同，所以转移方程为`dp[i][2] += min(dp[i-1][0], dp[i-1][1])` dp为costs\n\n```python\nclass Solution(object):\n    def minCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not costs:\n            return 0\n        length = len(costs)\n        for i in range(1, length):\n            costs[i][0] += min(costs[i-1][1],costs[i-1][2])\n            costs[i][1] += min(costs[i-1][0],costs[i-1][2])\n            costs[i][2] += min(costs[i-1][0],costs[i-1][1])\n        return min(costs[length-1][0], costs[length-1][1], costs[length-1][2])\n```\n\n### 276. Paint Fence\n这道题其实跟上一道题很像，但是每一次涂得颜色可以和上一个一样（连续的颜色最多出现两次），所以当前状态与前两个有关，可以和前两个状态其中任何一个颜色一样 `dp[2] = (k-1) * (dp[0] + dp[1]), dp = [k, k*k, 0]`\n\n```python\nclass Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0: return 0\n        if n == 1: return k\n\n        # for the first 2 posts\n        dp = [k, k*k, 0]\n        \n\n        for i in range(2, n):\n            dp[2] = (k-1) * (dp[0] + dp[1])\n            dp[0] = dp[1]\n            dp[1] = dp[2]\n        return dp[1]\n```\n### 174. Dungeon Game\n最主要的区别是，要从后往前找，由于生命最少为1，所以DP的条件也要相应变一下\n\n```python\nclass Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n       \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1, dp[i][j+1] - dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1, dp[i+1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n        return dp[0][0]\n        \n```\n## Medium\n### 651. 4 Keys Keyboard\n这道题想了半天，发现最后还是举例子最好；在6个操作内，只有A的操作是最大的，之后的话dp[i] = dp[j] * (i-j-1), 比如i==7， j==1的时候，最后是A * 7-1-1 = 5A \n\n```python\nclass Solution(object):\n    def maxA(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N <= 6:\n            return N\n        dp = [i for i in range(N+1)]\n        for i in range(7,N+1):\n            for j in range(1,i-2):\n                dp[i] = max(dp[i], dp[j] * (i-j-1))\n        return dp[-1]\n        \n```\n\n### 304. Range Sum Query 2D - Immutable\n这道题最关键的是处理corner case\n\n```python\nclass NumMatrix(object):\n\n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n        if not matrix:\n            return\n        m = len(matrix)\n        n = len(matrix[0])\n        # deal with zero row and column\n        self.dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                self.dp[i][j] = matrix[i-1][j-1] + self.dp[i-1][j] + self.dp[i][j-1] - self.dp[i-1][j-1]\n        \n\n    def sumRegion(self, row1, col1, row2, col2):\n        \"\"\"\n        :type row1: int\n        :type col1: int\n        :type row2: int\n        :type col2: int\n        :rtype: int\n        \"\"\"\n        return self.dp[row2+1][col2+1] - self.dp[row2+1][col1]- self.dp[row1][col2+1] + self.dp[row1][col1]\n        \n\n\n# Your NumMatrix object will be instantiated and called as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)\n```\n\n### 221. Maximal Square\n可行的解法是很巧妙的：以这个square的最右下角的位置作为存储点f(i, j),当matrix(i, j)是1的时候，f(i, j) = min{f(i - 1, j - 1), f(i - 1, j), f(i, j -1)} + 1. 这是因为如果这是一个square，那么构成这个square的最基本条件就是跟它相邻的边的最小所在square.所以一个square的f值如下：\n\n```python\nclass Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not matrix:\n            return 0\n        res = 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1,m+1):\n            for j in range(1, n+1):\n                if matrix[i-1][j-1] == '1':\n                   \n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n                    res = max(res, dp[i][j])\n        \n        return res * res\n```\n\n\n## 二维DP\n### 72. Edit Distance\n这道题是一道经典问题，分为之下三个操作，我觉得以下的解释是最好的   \na) 插入一个字符：word1[0:i] -> word2[0:j-1]，然后在word1[0:i]后插入word2[j]\nDP[i+1][j+1] = DP[i+1][j]+1\n\nb) 删除一个字符：word1[0:i-1] -> word2[0:j]，然后删除word1[i]\nDP[i+1][j+1] = DP[i][j+1]+1\n\nc) 替换一个字符：word1[0:i-1] -> word2[0:j-1]\nword1[i] != word2[j]时，word1[i] -> word2[j]：DP[i+1][j+1] = DP[i][j] + 1\nword1[i] == word2[j]时：DP[i+1][j+1] = DP[i][j] \n\n```python\nclass Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        l1 = len(word1)+1\n        l2 = len(word2) + 1\n        dp = [[0 for _ in range(l2)] for _ in range(l1)]\n        \n        for i in range(l1):\n            dp[i][0] = i\n        for j in range(l2):\n            dp[0][j] = j\n        for i in range(1,l1):\n            for j in range(1,l2):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j-1],dp[i-1][j], dp[i-1][j-1]) + 1\n        #print dp\n        return dp[-1][-1]\n```","source":"_posts/DP总结.md","raw":"---\ntitle: DP总结\ncomments: true\ndate: 2017-10-19 15:56:32\nupdated: 2017-10-19 15:56:32\ncategories: Leetcode\t\ntags: DP\n---\n# 概念\n动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。  \nDP问题是Leetcode中的经典问题，也是面试中经常考到的类别之一，没有通用的模版，有些DP题思考的过程也比较繁琐.所以这篇总结可能会不断更新，以便达到更好的效果\n\n## 适用场景\n1. 找Max， Min的问题\n2. 发现可能性的问题\n3. 输出所有解的个数问题\n\n不适用场景  \n1. 列出所有具体方案（起码是指数级别的复杂度，通常是递归，backtracking）  \n2. 集合问题\n\n## 考虑\n1. 状态\n2. 转移方程\n3. 初始化条件\n4. 返回结果\n<!--more-->\n# 单序列问题\n通常是数组，字符串的前N个为...\n\n## Warm Up\n### 爬梯子\n作为DP的入门题来说，思考过程还是很重要的。 一次可以爬1级或者两级的台阶，问有多少种爬法。  \n符合输出所有解个数的问题。  \n因为只能爬一级或者两级所以到N级的话，你只能从n-1爬到n或者n-2爬到n；这样说来，如果`dp[n]`代表到n级台阶有多少种可能性的话，转移方程为`dp[n] = dp[n-1]+dp[n-2]`  \n所以代码很容易写出  \n\n```python\ndef climb(n):\n\tif n == 1:\n\t\treturn 1\n\tdp = [1 for _ in range(n+1)]\n\tdp[1] = 1\n\tdp[2] = 2\n\tfor i in range(3,n+1):\n\t\tdp[i] = dp[i-1]+dp[i-2]\n\treturn dp[-1]\n```\n\n当然这道题有优化条件，否则就没有必要花大篇幅写了。通过分析状态转移方程可以发现`dp[i]`只与`dp[i-1],dp[i-2]`有关，说明再之前的状态是不会影响到当前状态的，所以我们可以通过只保留两个状态来不断滚动从而求出最后的结果。\n\n```java\npublic class Solution {\n    public int climbStairs(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int first = 1;\n        int second = 2;\n        for (int i = 3; i <= n; i++) {\n            int third = first + second;\n            first = second;\n            second = third;\n        }\n        return second;\n    }\n}\n```\n进而我们能看出，如果当前状态只与前面的相关的话，我们都可以通过滚动数组，变量来简化空间复杂度--这种尤其适合不太复杂的动态规划问题，简单的二维DP\n\n### 53. Maximum Subarray\n找Max问题  \n很容易得出当前局部最大+当前值，和当前值的对比，而从决定是继续加还是从新来过\n\n```python\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        dp = [float('-inf') for _ in range(len(nums))]\n        \n        dp[0] = nums[0]\n        res = nums[0]\n        for each in range(1,len(nums)):\n            dp[each] = max(dp[each-1]+nums[each], nums[each])\n            res = max(res, dp[each])\n            #print dp\n        return res\n```\n从上一段分析可以看出，dp状态只与上一个状态有关，从而可以简化成变量来储存dp[]\n\n```python\nclass Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        prevMax = nums[0]\n        res = nums[0]\n        for each in range(1,len(nums)):\n            prevMax = max(prevMax+nums[each], nums[each])\n            res = max(res, prevMax)\n            #print dp\n        return res\n```\n### 300. Longest Increasing Subsequence\n找出Max  \n这道题有点不一样的地方是最后的结果有可能是任意一个位置，所以不是简单的`return dp[-1]`而是`max(dp)`  \n`dp[i] = 1 + max(dp[j]) j < i and A[i] > A[j]`\n\n```python\nclass Solution(object):\n    def lengthOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [1] * (len(nums) + 1)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j]+1)\n        return max(dp)\n```\n\n### 139.Word Break\n寻求解的存在性\n和上一题有点像，dp[i] 为当前字符满足之前的字符在字典里\n\n```python\nclass Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        if not s:\n            return False\n        # dp保存dp【i】i之前的最少字符串\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        # 本身的循环，对字符串，在内层循环中需要使用i\n        for i in range(1, len(s)+1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True # 因为j～i是一个回文字符串\n        return dp[-1]\n```\n\n### 198. House Robber\n`dp[i] = max(dp[i-2]+A[i], dp[i-1])`\n当然一共就3个状态，我们也可以通过类似爬梯子的方式，把空间复杂度降为O（1）\n\n```python\nclass Solution(object):\n    def rob(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) < 2:\n            return nums[0] \n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(dp[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n        return dp[-1]\n        \n```\n\n### 303. Range Sum Query - Immutable\n简单的累加求和做为DP，则转移方程为`res(x,y) = dp[y] - dp[x-1]`\n\n```python\nclass NumArray(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        total = 0\n        self.dp = []    \n        for i in nums:\n            total += i\n            self.dp.append(total)\n        \n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if i == 0:\n            return self.dp[j]\n        return self.dp[j] - self.dp[i-1]\n        \n\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)\n```\n## Medium\n### 368. Largest Divisible Subset\n这道题需要一点思考，除了创建一个DP数组来记录到i位置最长的长度之外，我们还要知道其对应能整除的数字，所以还需要一个array来记录上一个数字的位置。dp的默认值为1， pre的初始值为None就是没有对应的数字；当且仅当dp需要更新的时候，更新其上一个能整除数字的index。最后找出max（dp）所对应的数字，根据其pre的index逐个找数字，输出。\n\n```python\nclass Solution(object):\n    def largestDivisibleSubset(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        nums = sorted(nums)\n        size = len(nums)\n        dp = [1] * size\n        pre = [None] * size\n        for x in range(size):\n            for y in range(x):\n                if nums[x] % nums[y] == 0 and dp[y] + 1 > dp[x]:\n                    dp[x] = dp[y] + 1\n                    pre[x] = y\n        idx = dp.index(max(dp))\n        ans = []\n        while idx is not None:\n            ans += nums[idx],\n            idx = pre[idx]\n        return ans\n```\n### 338. Counting Bits\n需要熟悉Bit运算和概念，要能发现countbit(n) = countbit(n/2) + n % 2这么一个方程，就是说一个数乘2意味着bit位左移一位\n\n```python\nclass Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        dp = [0 for _ in range(num+1)]\n        for i in range(num+1):\n            dp[i] = dp[i>>1] + i%2\n        return dp\n```\n\n### 264. Ugly Number II\n用三个dp存2，3，5出现作为乘子的个数\n\n```python\nclass Solution(object):\n    def nthUglyNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = [1]\n        i2, i3, i5 = 0,0,0\n        while n:\n            u2, u3, u5 = 2 *res[i2], 3*res[i3], 5*res[i5]\n            temp = min(u2,u3,u5)\n            if temp == u2:\n                i2 += 1\n            if temp == u3:\n                i3 += 1\n            if temp == u5:\n                i5 += 1\n            res.append(temp)\n            n -= 1\n        return res[-2]\n```\n\n\n### 673. Number of Longest Increasing Subsequence\n相关题目，需要额外数组来记录已经出现最长的次数，也就是说如果前面有多个长度相等的连续子串的话，cnt要一直+1\n\n```python\nclass Solution(object):\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [1 for _ in range(len(nums))]\n        dc = [1 for _ in range(len(nums))]\n        for i in range(len(nums)):\n            for j in range(i):\n                \n                if nums[i] > nums[j]:\n                    if dp[i] < dp[j] + 1:\n                        dp[i] = dp[j] + 1\n                        dc[i] = dc[j]\n                    elif dp[i] == dp[j] + 1:\n                        dc[i] += dc[j] # we have multiple same length LIS, we need to add them\n        res = 0\n        \n        for index, value in enumerate(dp):\n            if value == max(dp):\n                res += dc[index]\n        return res\n                    \n```\n\n### 309. Best Time to Buy and Sell Stock with Cooldown\n这道题一开始确实想不出来，感觉情况太多了；我承认有些DP题就是想不出来怎么做.....后来看到Discuss上有一个解法很不错，就是我们就考虑buy和sell的情况，buy的情况是最大利益只和前一个状态有关或者前两个状态的时候卖，然后这时候买。所以DP的定义就是buy[i] 在i的时候和在i之前买的最大值   \n`buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]); `  \n同理，sell的时候也和之前状态有关  \n`sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);`\n\n```python\nclass Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        if not prices or len(prices) <= 1:\n            return 0\n        # buy[i] = max(buy[i-1], sell[i-2] - prices[i])\n        # sell[i] = max(sell[i-1], buy[i-1] + prices[i])\n        \n        b0 = -prices[0]\n        b1 = b0\n        s0 = 0\n        s1 = 0\n        s2 = 0\n        \n        for i in range(1,len(prices)):\n            b1 = max(b0, s0 - prices[i])\n            s2 = max(s1, b0 + prices[i])\n            \n            b0 = b1\n            s0 = s1\n            s1 = s2\n        return s2\n```\n\n\n# 矩阵DP\n这种问题需要初始化DP数组，第0行和第0列，这样会方便之后的操作，通常这种问题是只能向右或者向下操作，否则则需要用BFS--求最短路径；DFS来解决\n## Warm Up\n### 62. Unique Paths\n符合求解的个数问题  \n`dp[i][j] = dp[i-1][j] + dp[i][j-1]`\n\n```python\nclass Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if not m or not n:\n            return 0\n        dp = [[1 for _ in range(n)] for _ in range(m)]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n        \n```\n当然我们知道每一个dp状态只与上方或者左方的状态相关，所以可以考虑通过某种方式来保存状态；一种方法是建立一个额外数组来存储列状态，dp变成一维存行状态；不过更进一步的话，每一个dp[i]状态就意味着当前从i行过来的状态总数，这里还是贴图吧，更好理解![img_6600](https://user-images.githubusercontent.com/10191895/31799214-a436210a-b4ed-11e7-8f79-5c0c1cf489d9.JPG)\n\n```python\nclass Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dp = [1 for _ in range(m)]\n        for i in range(1,n):\n            for j in range(1,m):\n                dp[j] += dp[j-1] \n        return dp[-1]\n        \n```\n\n### 63.Unique Paths II\n初始化首行首列的时候如果有障碍的话，就都变成0了\n\n```python\nclass Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n] * m\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n                \n```\n\n### 64. Minimum Path Sum\n\n```python\nclass Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1,m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1,n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        #print dp\n        return dp[-1][-1]\n        \n```\n题目变成了正方形，逐层扩展的时候要记录，每一列计算之前要加上第0行第j列的值，所以沿用上一题的图，dp[i] = dp[i]--上方的值+ dp[i-1] -- 左方的值\n\n\n\n```python\nclass Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        dp = [0 for _ in range(m)]\n        dp[0] = grid[0][0]\n        for i in range(1,m):\n            dp[i] = dp[i-1] + grid[i][0]\n        \n        for j in range(1,n):\n            dp[0] = dp[0] + grid[0][j]\n            for i in range(1,m):\n                dp[i] = min(dp[i], dp[i-1]) + grid[i][j]\n        #print dp\n        return dp[-1]\n```\n### 256. Paint House\n由于每次喷涂的房子颜色不能与之前的相同，所以转移方程为`dp[i][2] += min(dp[i-1][0], dp[i-1][1])` dp为costs\n\n```python\nclass Solution(object):\n    def minCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not costs:\n            return 0\n        length = len(costs)\n        for i in range(1, length):\n            costs[i][0] += min(costs[i-1][1],costs[i-1][2])\n            costs[i][1] += min(costs[i-1][0],costs[i-1][2])\n            costs[i][2] += min(costs[i-1][0],costs[i-1][1])\n        return min(costs[length-1][0], costs[length-1][1], costs[length-1][2])\n```\n\n### 276. Paint Fence\n这道题其实跟上一道题很像，但是每一次涂得颜色可以和上一个一样（连续的颜色最多出现两次），所以当前状态与前两个有关，可以和前两个状态其中任何一个颜色一样 `dp[2] = (k-1) * (dp[0] + dp[1]), dp = [k, k*k, 0]`\n\n```python\nclass Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0: return 0\n        if n == 1: return k\n\n        # for the first 2 posts\n        dp = [k, k*k, 0]\n        \n\n        for i in range(2, n):\n            dp[2] = (k-1) * (dp[0] + dp[1])\n            dp[0] = dp[1]\n            dp[1] = dp[2]\n        return dp[1]\n```\n### 174. Dungeon Game\n最主要的区别是，要从后往前找，由于生命最少为1，所以DP的条件也要相应变一下\n\n```python\nclass Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n       \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1, dp[i][j+1] - dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1, dp[i+1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])\n        return dp[0][0]\n        \n```\n## Medium\n### 651. 4 Keys Keyboard\n这道题想了半天，发现最后还是举例子最好；在6个操作内，只有A的操作是最大的，之后的话dp[i] = dp[j] * (i-j-1), 比如i==7， j==1的时候，最后是A * 7-1-1 = 5A \n\n```python\nclass Solution(object):\n    def maxA(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N <= 6:\n            return N\n        dp = [i for i in range(N+1)]\n        for i in range(7,N+1):\n            for j in range(1,i-2):\n                dp[i] = max(dp[i], dp[j] * (i-j-1))\n        return dp[-1]\n        \n```\n\n### 304. Range Sum Query 2D - Immutable\n这道题最关键的是处理corner case\n\n```python\nclass NumMatrix(object):\n\n    def __init__(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        \"\"\"\n        if not matrix:\n            return\n        m = len(matrix)\n        n = len(matrix[0])\n        # deal with zero row and column\n        self.dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                self.dp[i][j] = matrix[i-1][j-1] + self.dp[i-1][j] + self.dp[i][j-1] - self.dp[i-1][j-1]\n        \n\n    def sumRegion(self, row1, col1, row2, col2):\n        \"\"\"\n        :type row1: int\n        :type col1: int\n        :type row2: int\n        :type col2: int\n        :rtype: int\n        \"\"\"\n        return self.dp[row2+1][col2+1] - self.dp[row2+1][col1]- self.dp[row1][col2+1] + self.dp[row1][col1]\n        \n\n\n# Your NumMatrix object will be instantiated and called as such:\n# obj = NumMatrix(matrix)\n# param_1 = obj.sumRegion(row1,col1,row2,col2)\n```\n\n### 221. Maximal Square\n可行的解法是很巧妙的：以这个square的最右下角的位置作为存储点f(i, j),当matrix(i, j)是1的时候，f(i, j) = min{f(i - 1, j - 1), f(i - 1, j), f(i, j -1)} + 1. 这是因为如果这是一个square，那么构成这个square的最基本条件就是跟它相邻的边的最小所在square.所以一个square的f值如下：\n\n```python\nclass Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not matrix:\n            return 0\n        res = 0\n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        for i in range(1,m+1):\n            for j in range(1, n+1):\n                if matrix[i-1][j-1] == '1':\n                   \n                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n                    res = max(res, dp[i][j])\n        \n        return res * res\n```\n\n\n## 二维DP\n### 72. Edit Distance\n这道题是一道经典问题，分为之下三个操作，我觉得以下的解释是最好的   \na) 插入一个字符：word1[0:i] -> word2[0:j-1]，然后在word1[0:i]后插入word2[j]\nDP[i+1][j+1] = DP[i+1][j]+1\n\nb) 删除一个字符：word1[0:i-1] -> word2[0:j]，然后删除word1[i]\nDP[i+1][j+1] = DP[i][j+1]+1\n\nc) 替换一个字符：word1[0:i-1] -> word2[0:j-1]\nword1[i] != word2[j]时，word1[i] -> word2[j]：DP[i+1][j+1] = DP[i][j] + 1\nword1[i] == word2[j]时：DP[i+1][j+1] = DP[i][j] \n\n```python\nclass Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        l1 = len(word1)+1\n        l2 = len(word2) + 1\n        dp = [[0 for _ in range(l2)] for _ in range(l1)]\n        \n        for i in range(l1):\n            dp[i][0] = i\n        for j in range(l2):\n            dp[0][j] = j\n        for i in range(1,l1):\n            for j in range(1,l2):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j-1],dp[i-1][j], dp[i-1][j-1]) + 1\n        #print dp\n        return dp[-1][-1]\n```","slug":"DP总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdeo0009m2cacvzloutz","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>DP问题是Leetcode中的经典问题，也是面试中经常考到的类别之一，没有通用的模版，有些DP题思考的过程也比较繁琐.所以这篇总结可能会不断更新，以便达到更好的效果</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>找Max， Min的问题</li>\n<li>发现可能性的问题</li>\n<li>输出所有解的个数问题</li>\n</ol>\n<p>不适用场景  </p>\n<ol>\n<li>列出所有具体方案（起码是指数级别的复杂度，通常是递归，backtracking）  </li>\n<li>集合问题</li>\n</ol>\n<h2 id=\"考虑\"><a href=\"#考虑\" class=\"headerlink\" title=\"考虑\"></a>考虑</h2><ol>\n<li>状态</li>\n<li>转移方程</li>\n<li>初始化条件</li>\n<li>返回结果<a id=\"more\"></a>\n<h1 id=\"单序列问题\"><a href=\"#单序列问题\" class=\"headerlink\" title=\"单序列问题\"></a>单序列问题</h1>通常是数组，字符串的前N个为…</li>\n</ol>\n<h2 id=\"Warm-Up\"><a href=\"#Warm-Up\" class=\"headerlink\" title=\"Warm Up\"></a>Warm Up</h2><h3 id=\"爬梯子\"><a href=\"#爬梯子\" class=\"headerlink\" title=\"爬梯子\"></a>爬梯子</h3><p>作为DP的入门题来说，思考过程还是很重要的。 一次可以爬1级或者两级的台阶，问有多少种爬法。<br>符合输出所有解个数的问题。<br>因为只能爬一级或者两级所以到N级的话，你只能从n-1爬到n或者n-2爬到n；这样说来，如果<code>dp[n]</code>代表到n级台阶有多少种可能性的话，转移方程为<code>dp[n] = dp[n-1]+dp[n-2]</code><br>所以代码很容易写出  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">climb</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tdp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)]</span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\tdp[i] = dp[i<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>当然这道题有优化条件，否则就没有必要花大篇幅写了。通过分析状态转移方程可以发现<code>dp[i]</code>只与<code>dp[i-1],dp[i-2]</code>有关，说明再之前的状态是不会影响到当前状态的，所以我们可以通过只保留两个状态来不断滚动从而求出最后的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> second = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> third = first + second;</span><br><span class=\"line\">            first = second;</span><br><span class=\"line\">            second = third;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进而我们能看出，如果当前状态只与前面的相关的话，我们都可以通过滚动数组，变量来简化空间复杂度–这种尤其适合不太复杂的动态规划问题，简单的二维DP</p>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53. Maximum Subarray\"></a>53. Maximum Subarray</h3><p>找Max问题<br>很容易得出当前局部最大+当前值，和当前值的对比，而从决定是继续加还是从新来过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        dp = [float(<span class=\"string\">'-inf'</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(nums)):</span><br><span class=\"line\">            dp[each] = max(dp[each<span class=\"number\">-1</span>]+nums[each], nums[each])</span><br><span class=\"line\">            res = max(res, dp[each])</span><br><span class=\"line\">            <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p>从上一段分析可以看出，dp状态只与上一个状态有关，从而可以简化成变量来储存dp[]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        prevMax = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(nums)):</span><br><span class=\"line\">            prevMax = max(prevMax+nums[each], nums[each])</span><br><span class=\"line\">            res = max(res, prevMax)</span><br><span class=\"line\">            <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"300-Longest-Increasing-Subsequence\"><a href=\"#300-Longest-Increasing-Subsequence\" class=\"headerlink\" title=\"300. Longest Increasing Subsequence\"></a>300. Longest Increasing Subsequence</h3><p>找出Max<br>这道题有点不一样的地方是最后的结果有可能是任意一个位置，所以不是简单的<code>return dp[-1]</code>而是<code>max(dp)</code><br><code>dp[i] = 1 + max(dp[j]) j &lt; i and A[i] &gt; A[j]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span>] * (len(nums) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[j] &lt; nums[i]:</span><br><span class=\"line\">                    dp[i] = max(dp[i], dp[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(dp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"139-Word-Break\"><a href=\"#139-Word-Break\" class=\"headerlink\" title=\"139.Word Break\"></a>139.Word Break</h3><p>寻求解的存在性<br>和上一题有点像，dp[i] 为当前字符满足之前的字符在字典里</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordBreak</span><span class=\"params\">(self, s, wordDict)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type wordDict: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># dp保存dp【i】i之前的最少字符串</span></span><br><span class=\"line\">        dp = [<span class=\"keyword\">False</span>] * (len(s) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 本身的循环，对字符串，在内层循环中需要使用i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(s)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> wordDict:</span><br><span class=\"line\">                    dp[i] = <span class=\"keyword\">True</span> <span class=\"comment\"># 因为j～i是一个回文字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198. House Robber\"></a>198. House Robber</h3><p><code>dp[i] = max(dp[i-2]+A[i], dp[i-1])</code><br>当然一共就3个状态，我们也可以通过类似爬梯子的方式，把空间复杂度降为O（1）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rob</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] </span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>] * len(nums)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = max(dp[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(nums)):</span><br><span class=\"line\">            dp[i] = max(dp[i<span class=\"number\">-2</span>] + nums[i], dp[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303. Range Sum Query - Immutable\"></a>303. Range Sum Query - Immutable</h3><p>简单的累加求和做为DP，则转移方程为<code>res(x,y) = dp[y] - dp[x-1]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        total = <span class=\"number\">0</span></span><br><span class=\"line\">        self.dp = []    </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            total += i</span><br><span class=\"line\">            self.dp.append(total)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRange</span><span class=\"params\">(self, i, j)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type i: int</span></span><br><span class=\"line\"><span class=\"string\">        :type j: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.dp[j]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dp[j] - self.dp[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = NumArray(nums)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.sumRange(i,j)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"368-Largest-Divisible-Subset\"><a href=\"#368-Largest-Divisible-Subset\" class=\"headerlink\" title=\"368. Largest Divisible Subset\"></a>368. Largest Divisible Subset</h3><p>这道题需要一点思考，除了创建一个DP数组来记录到i位置最长的长度之外，我们还要知道其对应能整除的数字，所以还需要一个array来记录上一个数字的位置。dp的默认值为1， pre的初始值为None就是没有对应的数字；当且仅当dp需要更新的时候，更新其上一个能整除数字的index。最后找出max（dp）所对应的数字，根据其pre的index逐个找数字，输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">largestDivisibleSubset</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        nums = sorted(nums)</span><br><span class=\"line\">        size = len(nums)</span><br><span class=\"line\">        dp = [<span class=\"number\">1</span>] * size</span><br><span class=\"line\">        pre = [<span class=\"keyword\">None</span>] * size</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(x):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[x] % nums[y] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> dp[y] + <span class=\"number\">1</span> &gt; dp[x]:</span><br><span class=\"line\">                    dp[x] = dp[y] + <span class=\"number\">1</span></span><br><span class=\"line\">                    pre[x] = y</span><br><span class=\"line\">        idx = dp.index(max(dp))</span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> idx <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            ans += nums[idx],</span><br><span class=\"line\">            idx = pre[idx]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"338-Counting-Bits\"><a href=\"#338-Counting-Bits\" class=\"headerlink\" title=\"338. Counting Bits\"></a>338. Counting Bits</h3><p>需要熟悉Bit运算和概念，要能发现countbit(n) = countbit(n/2) + n % 2这么一个方程，就是说一个数乘2意味着bit位左移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countBits</span><span class=\"params\">(self, num)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type num: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp[i] = dp[i&gt;&gt;<span class=\"number\">1</span>] + i%<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp</span><br></pre></td></tr></table></figure>\n<h3 id=\"264-Ugly-Number-II\"><a href=\"#264-Ugly-Number-II\" class=\"headerlink\" title=\"264. Ugly Number II\"></a>264. Ugly Number II</h3><p>用三个dp存2，3，5出现作为乘子的个数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nthUglyNumber</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = [<span class=\"number\">1</span>]</span><br><span class=\"line\">        i2, i3, i5 = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n:</span><br><span class=\"line\">            u2, u3, u5 = <span class=\"number\">2</span> *res[i2], <span class=\"number\">3</span>*res[i3], <span class=\"number\">5</span>*res[i5]</span><br><span class=\"line\">            temp = min(u2,u3,u5)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u2:</span><br><span class=\"line\">                i2 += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u3:</span><br><span class=\"line\">                i3 += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u5:</span><br><span class=\"line\">                i5 += <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(temp)</span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"673-Number-of-Longest-Increasing-Subsequence\"><a href=\"#673-Number-of-Longest-Increasing-Subsequence\" class=\"headerlink\" title=\"673. Number of Longest Increasing Subsequence\"></a>673. Number of Longest Increasing Subsequence</h3><p>相关题目，需要额外数组来记录已经出现最长的次数，也就是说如果前面有多个长度相等的连续子串的话，cnt要一直+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findNumberOfLIS</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        dc = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[i] &gt; nums[j]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i] &lt; dp[j] + <span class=\"number\">1</span>:</span><br><span class=\"line\">                        dp[i] = dp[j] + <span class=\"number\">1</span></span><br><span class=\"line\">                        dc[i] = dc[j]</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> dp[i] == dp[j] + <span class=\"number\">1</span>:</span><br><span class=\"line\">                        dc[i] += dc[j] <span class=\"comment\"># we have multiple same length LIS, we need to add them</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, value <span class=\"keyword\">in</span> enumerate(dp):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> value == max(dp):</span><br><span class=\"line\">                res += dc[index]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\"><a href=\"#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\" class=\"headerlink\" title=\"309. Best Time to Buy and Sell Stock with Cooldown\"></a>309. Best Time to Buy and Sell Stock with Cooldown</h3><p>这道题一开始确实想不出来，感觉情况太多了；我承认有些DP题就是想不出来怎么做…..后来看到Discuss上有一个解法很不错，就是我们就考虑buy和sell的情况，buy的情况是最大利益只和前一个状态有关或者前两个状态的时候卖，然后这时候买。所以DP的定义就是buy[i] 在i的时候和在i之前买的最大值<br><code>buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);</code><br>同理，sell的时候也和之前状态有关<br><code>sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProfit</span><span class=\"params\">(self, prices)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type prices: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> prices <span class=\"keyword\">or</span> len(prices) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># buy[i] = max(buy[i-1], sell[i-2] - prices[i])</span></span><br><span class=\"line\">        <span class=\"comment\"># sell[i] = max(sell[i-1], buy[i-1] + prices[i])</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        b0 = -prices[<span class=\"number\">0</span>]</span><br><span class=\"line\">        b1 = b0</span><br><span class=\"line\">        s0 = <span class=\"number\">0</span></span><br><span class=\"line\">        s1 = <span class=\"number\">0</span></span><br><span class=\"line\">        s2 = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(prices)):</span><br><span class=\"line\">            b1 = max(b0, s0 - prices[i])</span><br><span class=\"line\">            s2 = max(s1, b0 + prices[i])</span><br><span class=\"line\">            </span><br><span class=\"line\">            b0 = b1</span><br><span class=\"line\">            s0 = s1</span><br><span class=\"line\">            s1 = s2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2</span><br></pre></td></tr></table></figure>\n<h1 id=\"矩阵DP\"><a href=\"#矩阵DP\" class=\"headerlink\" title=\"矩阵DP\"></a>矩阵DP</h1><p>这种问题需要初始化DP数组，第0行和第0列，这样会方便之后的操作，通常这种问题是只能向右或者向下操作，否则则需要用BFS–求最短路径；DFS来解决</p>\n<h2 id=\"Warm-Up-1\"><a href=\"#Warm-Up-1\" class=\"headerlink\" title=\"Warm Up\"></a>Warm Up</h2><h3 id=\"62-Unique-Paths\"><a href=\"#62-Unique-Paths\" class=\"headerlink\" title=\"62. Unique Paths\"></a>62. Unique Paths</h3><p>符合求解的个数问题<br><code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(self, m, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type m: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> m <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>当然我们知道每一个dp状态只与上方或者左方的状态相关，所以可以考虑通过某种方式来保存状态；一种方法是建立一个额外数组来存储列状态，dp变成一维存行状态；不过更进一步的话，每一个dp[i]状态就意味着当前从i行过来的状态总数，这里还是贴图吧，更好理解<img src=\"https://user-images.githubusercontent.com/10191895/31799214-a436210a-b4ed-11e7-8f79-5c0c1cf489d9.JPG\" alt=\"img_6600\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(self, m, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type m: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                dp[j] += dp[j<span class=\"number\">-1</span>] </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"63-Unique-Paths-II\"><a href=\"#63-Unique-Paths-II\" class=\"headerlink\" title=\"63.Unique Paths II\"></a>63.Unique Paths II</h3><p>初始化首行首列的时候如果有障碍的话，就都变成0了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(self, obstacleGrid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type obstacleGrid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(obstacleGrid)</span><br><span class=\"line\">        n = len(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n] * m</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"64-Minimum-Path-Sum\"><a href=\"#64-Minimum-Path-Sum\" class=\"headerlink\" title=\"64. Minimum Path Sum\"></a>64. Minimum Path Sum</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minPathSum</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>] + grid[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                dp[i][j] = min(dp[i<span class=\"number\">-1</span>][j], dp[i][j<span class=\"number\">-1</span>]) + grid[i][j]</span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>题目变成了正方形，逐层扩展的时候要记录，每一列计算之前要加上第0行第j列的值，所以沿用上一题的图，dp[i] = dp[i]–上方的值+ dp[i-1] – 左方的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minPathSum</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            dp[i] = dp[i<span class=\"number\">-1</span>] + grid[i][<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">0</span>] + grid[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                dp[i] = min(dp[i], dp[i<span class=\"number\">-1</span>]) + grid[i][j]</span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"256-Paint-House\"><a href=\"#256-Paint-House\" class=\"headerlink\" title=\"256. Paint House\"></a>256. Paint House</h3><p>由于每次喷涂的房子颜色不能与之前的相同，所以转移方程为<code>dp[i][2] += min(dp[i-1][0], dp[i-1][1])</code> dp为costs</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minCost</span><span class=\"params\">(self, costs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type costs: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> costs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        length = len(costs)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">            costs[i][<span class=\"number\">0</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\">            costs[i][<span class=\"number\">1</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\">            costs[i][<span class=\"number\">2</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(costs[length<span class=\"number\">-1</span>][<span class=\"number\">0</span>], costs[length<span class=\"number\">-1</span>][<span class=\"number\">1</span>], costs[length<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"276-Paint-Fence\"><a href=\"#276-Paint-Fence\" class=\"headerlink\" title=\"276. Paint Fence\"></a>276. Paint Fence</h3><p>这道题其实跟上一道题很像，但是每一次涂得颜色可以和上一个一样（连续的颜色最多出现两次），所以当前状态与前两个有关，可以和前两个状态其中任何一个颜色一样 <code>dp[2] = (k-1) * (dp[0] + dp[1]), dp = [k, k*k, 0]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numWays</span><span class=\"params\">(self, n, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> k</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># for the first 2 posts</span></span><br><span class=\"line\">        dp = [k, k*k, <span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, n):</span><br><span class=\"line\">            dp[<span class=\"number\">2</span>] = (k<span class=\"number\">-1</span>) * (dp[<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>]</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"174-Dungeon-Game\"><a href=\"#174-Dungeon-Game\" class=\"headerlink\" title=\"174. Dungeon Game\"></a>174. Dungeon Game</h3><p>最主要的区别是，要从后往前找，由于生命最少为1，所以DP的条件也要相应变一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculateMinimumHP</span><span class=\"params\">(self, dungeon)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type dungeon: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(dungeon)</span><br><span class=\"line\">        n = len(dungeon[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == m<span class=\"number\">-1</span> <span class=\"keyword\">and</span> j == n<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, <span class=\"number\">1</span> - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == m<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, dp[i][j+<span class=\"number\">1</span>] - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j == n<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, dp[i+<span class=\"number\">1</span>][j] - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, min(dp[i+<span class=\"number\">1</span>][j], dp[i][j+<span class=\"number\">1</span>]) - dungeon[i][j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium-1\"><a href=\"#Medium-1\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"651-4-Keys-Keyboard\"><a href=\"#651-4-Keys-Keyboard\" class=\"headerlink\" title=\"651. 4 Keys Keyboard\"></a>651. 4 Keys Keyboard</h3><p>这道题想了半天，发现最后还是举例子最好；在6个操作内，只有A的操作是最大的，之后的话dp[i] = dp[j] <em> (i-j-1), 比如i==7， j==1的时候，最后是A </em> 7-1-1 = 5A </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxA</span><span class=\"params\">(self, N)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type N: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> N</span><br><span class=\"line\">        dp = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>,N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,i<span class=\"number\">-2</span>):</span><br><span class=\"line\">                dp[i] = max(dp[i], dp[j] * (i-j<span class=\"number\">-1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"304-Range-Sum-Query-2D-Immutable\"><a href=\"#304-Range-Sum-Query-2D-Immutable\" class=\"headerlink\" title=\"304. Range Sum Query 2D - Immutable\"></a>304. Range Sum Query 2D - Immutable</h3><p>这道题最关键的是处理corner case</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumMatrix</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># deal with zero row and column</span></span><br><span class=\"line\">        self.dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, m+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">                self.dp[i][j] = matrix[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + self.dp[i<span class=\"number\">-1</span>][j] + self.dp[i][j<span class=\"number\">-1</span>] - self.dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRegion</span><span class=\"params\">(self, row1, col1, row2, col2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type row1: int</span></span><br><span class=\"line\"><span class=\"string\">        :type col1: int</span></span><br><span class=\"line\"><span class=\"string\">        :type row2: int</span></span><br><span class=\"line\"><span class=\"string\">        :type col2: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dp[row2+<span class=\"number\">1</span>][col2+<span class=\"number\">1</span>] - self.dp[row2+<span class=\"number\">1</span>][col1]- self.dp[row1][col2+<span class=\"number\">1</span>] + self.dp[row1][col1]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your NumMatrix object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = NumMatrix(matrix)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.sumRegion(row1,col1,row2,col2)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"221-Maximal-Square\"><a href=\"#221-Maximal-Square\" class=\"headerlink\" title=\"221. Maximal Square\"></a>221. Maximal Square</h3><p>可行的解法是很巧妙的：以这个square的最右下角的位置作为存储点f(i, j),当matrix(i, j)是1的时候，f(i, j) = min{f(i - 1, j - 1), f(i - 1, j), f(i, j -1)} + 1. 这是因为如果这是一个square，那么构成这个square的最基本条件就是跟它相邻的边的最小所在square.所以一个square的f值如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    dp[i][j] = min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>], dp[i<span class=\"number\">-1</span>][j], dp[i][j<span class=\"number\">-1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">                    res = max(res, dp[i][j])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res * res</span><br></pre></td></tr></table></figure>\n<h2 id=\"二维DP\"><a href=\"#二维DP\" class=\"headerlink\" title=\"二维DP\"></a>二维DP</h2><h3 id=\"72-Edit-Distance\"><a href=\"#72-Edit-Distance\" class=\"headerlink\" title=\"72. Edit Distance\"></a>72. Edit Distance</h3><p>这道题是一道经典问题，分为之下三个操作，我觉得以下的解释是最好的<br>a) 插入一个字符：word1[0:i] -&gt; word2[0:j-1]，然后在word1[0:i]后插入word2[j]<br>DP[i+1][j+1] = DP[i+1][j]+1</p>\n<p>b) 删除一个字符：word1[0:i-1] -&gt; word2[0:j]，然后删除word1[i]<br>DP[i+1][j+1] = DP[i][j+1]+1</p>\n<p>c) 替换一个字符：word1[0:i-1] -&gt; word2[0:j-1]<br>word1[i] != word2[j]时，word1[i] -&gt; word2[j]：DP[i+1][j+1] = DP[i][j] + 1<br>word1[i] == word2[j]时：DP[i+1][j+1] = DP[i][j] </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDistance</span><span class=\"params\">(self, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        l1 = len(word1)+<span class=\"number\">1</span></span><br><span class=\"line\">        l2 = len(word2) + <span class=\"number\">1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(l2)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(l1)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l1):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(l2):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = j</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,l1):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,l2):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> word1[i<span class=\"number\">-1</span>] == word2[j<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = min(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j], dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>DP问题是Leetcode中的经典问题，也是面试中经常考到的类别之一，没有通用的模版，有些DP题思考的过程也比较繁琐.所以这篇总结可能会不断更新，以便达到更好的效果</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ol>\n<li>找Max， Min的问题</li>\n<li>发现可能性的问题</li>\n<li>输出所有解的个数问题</li>\n</ol>\n<p>不适用场景  </p>\n<ol>\n<li>列出所有具体方案（起码是指数级别的复杂度，通常是递归，backtracking）  </li>\n<li>集合问题</li>\n</ol>\n<h2 id=\"考虑\"><a href=\"#考虑\" class=\"headerlink\" title=\"考虑\"></a>考虑</h2><ol>\n<li>状态</li>\n<li>转移方程</li>\n<li>初始化条件</li>\n<li>返回结果","more":"<h1 id=\"单序列问题\"><a href=\"#单序列问题\" class=\"headerlink\" title=\"单序列问题\"></a>单序列问题</h1>通常是数组，字符串的前N个为…</li>\n</ol>\n<h2 id=\"Warm-Up\"><a href=\"#Warm-Up\" class=\"headerlink\" title=\"Warm Up\"></a>Warm Up</h2><h3 id=\"爬梯子\"><a href=\"#爬梯子\" class=\"headerlink\" title=\"爬梯子\"></a>爬梯子</h3><p>作为DP的入门题来说，思考过程还是很重要的。 一次可以爬1级或者两级的台阶，问有多少种爬法。<br>符合输出所有解个数的问题。<br>因为只能爬一级或者两级所以到N级的话，你只能从n-1爬到n或者n-2爬到n；这样说来，如果<code>dp[n]</code>代表到n级台阶有多少种可能性的话，转移方程为<code>dp[n] = dp[n-1]+dp[n-2]</code><br>所以代码很容易写出  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">climb</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">\tdp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)]</span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\tdp[i] = dp[i<span class=\"number\">-1</span>]+dp[i<span class=\"number\">-2</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>当然这道题有优化条件，否则就没有必要花大篇幅写了。通过分析状态转移方程可以发现<code>dp[i]</code>只与<code>dp[i-1],dp[i-2]</code>有关，说明再之前的状态是不会影响到当前状态的，所以我们可以通过只保留两个状态来不断滚动从而求出最后的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> second = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> third = first + second;</span><br><span class=\"line\">            first = second;</span><br><span class=\"line\">            second = third;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进而我们能看出，如果当前状态只与前面的相关的话，我们都可以通过滚动数组，变量来简化空间复杂度–这种尤其适合不太复杂的动态规划问题，简单的二维DP</p>\n<h3 id=\"53-Maximum-Subarray\"><a href=\"#53-Maximum-Subarray\" class=\"headerlink\" title=\"53. Maximum Subarray\"></a>53. Maximum Subarray</h3><p>找Max问题<br>很容易得出当前局部最大+当前值，和当前值的对比，而从决定是继续加还是从新来过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        dp = [float(<span class=\"string\">'-inf'</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(nums)):</span><br><span class=\"line\">            dp[each] = max(dp[each<span class=\"number\">-1</span>]+nums[each], nums[each])</span><br><span class=\"line\">            res = max(res, dp[each])</span><br><span class=\"line\">            <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p>从上一段分析可以看出，dp状态只与上一个状态有关，从而可以简化成变量来储存dp[]</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        prevMax = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        res = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(nums)):</span><br><span class=\"line\">            prevMax = max(prevMax+nums[each], nums[each])</span><br><span class=\"line\">            res = max(res, prevMax)</span><br><span class=\"line\">            <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"300-Longest-Increasing-Subsequence\"><a href=\"#300-Longest-Increasing-Subsequence\" class=\"headerlink\" title=\"300. Longest Increasing Subsequence\"></a>300. Longest Increasing Subsequence</h3><p>找出Max<br>这道题有点不一样的地方是最后的结果有可能是任意一个位置，所以不是简单的<code>return dp[-1]</code>而是<code>max(dp)</code><br><code>dp[i] = 1 + max(dp[j]) j &lt; i and A[i] &gt; A[j]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span>] * (len(nums) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[j] &lt; nums[i]:</span><br><span class=\"line\">                    dp[i] = max(dp[i], dp[j]+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(dp)</span><br></pre></td></tr></table></figure>\n<h3 id=\"139-Word-Break\"><a href=\"#139-Word-Break\" class=\"headerlink\" title=\"139.Word Break\"></a>139.Word Break</h3><p>寻求解的存在性<br>和上一题有点像，dp[i] 为当前字符满足之前的字符在字典里</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordBreak</span><span class=\"params\">(self, s, wordDict)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type wordDict: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># dp保存dp【i】i之前的最少字符串</span></span><br><span class=\"line\">        dp = [<span class=\"keyword\">False</span>] * (len(s) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 本身的循环，对字符串，在内层循环中需要使用i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(s)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> dp[j] <span class=\"keyword\">and</span> s[j:i] <span class=\"keyword\">in</span> wordDict:</span><br><span class=\"line\">                    dp[i] = <span class=\"keyword\">True</span> <span class=\"comment\"># 因为j～i是一个回文字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"198-House-Robber\"><a href=\"#198-House-Robber\" class=\"headerlink\" title=\"198. House Robber\"></a>198. House Robber</h3><p><code>dp[i] = max(dp[i-2]+A[i], dp[i-1])</code><br>当然一共就3个状态，我们也可以通过类似爬梯子的方式，把空间复杂度降为O（1）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rob</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(nums) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] </span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>] * len(nums)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = max(dp[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, len(nums)):</span><br><span class=\"line\">            dp[i] = max(dp[i<span class=\"number\">-2</span>] + nums[i], dp[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"303-Range-Sum-Query-Immutable\"><a href=\"#303-Range-Sum-Query-Immutable\" class=\"headerlink\" title=\"303. Range Sum Query - Immutable\"></a>303. Range Sum Query - Immutable</h3><p>简单的累加求和做为DP，则转移方程为<code>res(x,y) = dp[y] - dp[x-1]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumArray</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        total = <span class=\"number\">0</span></span><br><span class=\"line\">        self.dp = []    </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            total += i</span><br><span class=\"line\">            self.dp.append(total)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRange</span><span class=\"params\">(self, i, j)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type i: int</span></span><br><span class=\"line\"><span class=\"string\">        :type j: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.dp[j]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dp[j] - self.dp[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your NumArray object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = NumArray(nums)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.sumRange(i,j)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"368-Largest-Divisible-Subset\"><a href=\"#368-Largest-Divisible-Subset\" class=\"headerlink\" title=\"368. Largest Divisible Subset\"></a>368. Largest Divisible Subset</h3><p>这道题需要一点思考，除了创建一个DP数组来记录到i位置最长的长度之外，我们还要知道其对应能整除的数字，所以还需要一个array来记录上一个数字的位置。dp的默认值为1， pre的初始值为None就是没有对应的数字；当且仅当dp需要更新的时候，更新其上一个能整除数字的index。最后找出max（dp）所对应的数字，根据其pre的index逐个找数字，输出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">largestDivisibleSubset</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        nums = sorted(nums)</span><br><span class=\"line\">        size = len(nums)</span><br><span class=\"line\">        dp = [<span class=\"number\">1</span>] * size</span><br><span class=\"line\">        pre = [<span class=\"keyword\">None</span>] * size</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(size):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> range(x):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[x] % nums[y] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> dp[y] + <span class=\"number\">1</span> &gt; dp[x]:</span><br><span class=\"line\">                    dp[x] = dp[y] + <span class=\"number\">1</span></span><br><span class=\"line\">                    pre[x] = y</span><br><span class=\"line\">        idx = dp.index(max(dp))</span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> idx <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            ans += nums[idx],</span><br><span class=\"line\">            idx = pre[idx]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"338-Counting-Bits\"><a href=\"#338-Counting-Bits\" class=\"headerlink\" title=\"338. Counting Bits\"></a>338. Counting Bits</h3><p>需要熟悉Bit运算和概念，要能发现countbit(n) = countbit(n/2) + n % 2这么一个方程，就是说一个数乘2意味着bit位左移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countBits</span><span class=\"params\">(self, num)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type num: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(num+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num+<span class=\"number\">1</span>):</span><br><span class=\"line\">            dp[i] = dp[i&gt;&gt;<span class=\"number\">1</span>] + i%<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp</span><br></pre></td></tr></table></figure>\n<h3 id=\"264-Ugly-Number-II\"><a href=\"#264-Ugly-Number-II\" class=\"headerlink\" title=\"264. Ugly Number II\"></a>264. Ugly Number II</h3><p>用三个dp存2，3，5出现作为乘子的个数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nthUglyNumber</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = [<span class=\"number\">1</span>]</span><br><span class=\"line\">        i2, i3, i5 = <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n:</span><br><span class=\"line\">            u2, u3, u5 = <span class=\"number\">2</span> *res[i2], <span class=\"number\">3</span>*res[i3], <span class=\"number\">5</span>*res[i5]</span><br><span class=\"line\">            temp = min(u2,u3,u5)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u2:</span><br><span class=\"line\">                i2 += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u3:</span><br><span class=\"line\">                i3 += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> temp == u5:</span><br><span class=\"line\">                i5 += <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(temp)</span><br><span class=\"line\">            n -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">-2</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"673-Number-of-Longest-Increasing-Subsequence\"><a href=\"#673-Number-of-Longest-Increasing-Subsequence\" class=\"headerlink\" title=\"673. Number of Longest Increasing Subsequence\"></a>673. Number of Longest Increasing Subsequence</h3><p>相关题目，需要额外数组来记录已经出现最长的次数，也就是说如果前面有多个长度相等的连续子串的话，cnt要一直+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findNumberOfLIS</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        dc = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(nums))]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i):</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[i] &gt; nums[j]:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dp[i] &lt; dp[j] + <span class=\"number\">1</span>:</span><br><span class=\"line\">                        dp[i] = dp[j] + <span class=\"number\">1</span></span><br><span class=\"line\">                        dc[i] = dc[j]</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> dp[i] == dp[j] + <span class=\"number\">1</span>:</span><br><span class=\"line\">                        dc[i] += dc[j] <span class=\"comment\"># we have multiple same length LIS, we need to add them</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, value <span class=\"keyword\">in</span> enumerate(dp):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> value == max(dp):</span><br><span class=\"line\">                res += dc[index]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\"><a href=\"#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\" class=\"headerlink\" title=\"309. Best Time to Buy and Sell Stock with Cooldown\"></a>309. Best Time to Buy and Sell Stock with Cooldown</h3><p>这道题一开始确实想不出来，感觉情况太多了；我承认有些DP题就是想不出来怎么做…..后来看到Discuss上有一个解法很不错，就是我们就考虑buy和sell的情况，buy的情况是最大利益只和前一个状态有关或者前两个状态的时候卖，然后这时候买。所以DP的定义就是buy[i] 在i的时候和在i之前买的最大值<br><code>buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);</code><br>同理，sell的时候也和之前状态有关<br><code>sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxProfit</span><span class=\"params\">(self, prices)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type prices: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> prices <span class=\"keyword\">or</span> len(prices) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># buy[i] = max(buy[i-1], sell[i-2] - prices[i])</span></span><br><span class=\"line\">        <span class=\"comment\"># sell[i] = max(sell[i-1], buy[i-1] + prices[i])</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        b0 = -prices[<span class=\"number\">0</span>]</span><br><span class=\"line\">        b1 = b0</span><br><span class=\"line\">        s0 = <span class=\"number\">0</span></span><br><span class=\"line\">        s1 = <span class=\"number\">0</span></span><br><span class=\"line\">        s2 = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(prices)):</span><br><span class=\"line\">            b1 = max(b0, s0 - prices[i])</span><br><span class=\"line\">            s2 = max(s1, b0 + prices[i])</span><br><span class=\"line\">            </span><br><span class=\"line\">            b0 = b1</span><br><span class=\"line\">            s0 = s1</span><br><span class=\"line\">            s1 = s2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2</span><br></pre></td></tr></table></figure>\n<h1 id=\"矩阵DP\"><a href=\"#矩阵DP\" class=\"headerlink\" title=\"矩阵DP\"></a>矩阵DP</h1><p>这种问题需要初始化DP数组，第0行和第0列，这样会方便之后的操作，通常这种问题是只能向右或者向下操作，否则则需要用BFS–求最短路径；DFS来解决</p>\n<h2 id=\"Warm-Up-1\"><a href=\"#Warm-Up-1\" class=\"headerlink\" title=\"Warm Up\"></a>Warm Up</h2><h3 id=\"62-Unique-Paths\"><a href=\"#62-Unique-Paths\" class=\"headerlink\" title=\"62. Unique Paths\"></a>62. Unique Paths</h3><p>符合求解的个数问题<br><code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(self, m, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type m: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> m <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>当然我们知道每一个dp状态只与上方或者左方的状态相关，所以可以考虑通过某种方式来保存状态；一种方法是建立一个额外数组来存储列状态，dp变成一维存行状态；不过更进一步的话，每一个dp[i]状态就意味着当前从i行过来的状态总数，这里还是贴图吧，更好理解<img src=\"https://user-images.githubusercontent.com/10191895/31799214-a436210a-b4ed-11e7-8f79-5c0c1cf489d9.JPG\" alt=\"img_6600\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(self, m, n)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type m: int</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dp = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                dp[j] += dp[j<span class=\"number\">-1</span>] </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"63-Unique-Paths-II\"><a href=\"#63-Unique-Paths-II\" class=\"headerlink\" title=\"63.Unique Paths II\"></a>63.Unique Paths II</h3><p>初始化首行首列的时候如果有障碍的话，就都变成0了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(self, obstacleGrid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type obstacleGrid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(obstacleGrid)</span><br><span class=\"line\">        n = len(obstacleGrid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>] * n] * m</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obstacleGrid[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == <span class=\"number\">0</span> <span class=\"keyword\">and</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j] + dp[i][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"64-Minimum-Path-Sum\"><a href=\"#64-Minimum-Path-Sum\" class=\"headerlink\" title=\"64. Minimum Path Sum\"></a>64. Minimum Path Sum</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minPathSum</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j<span class=\"number\">-1</span>] + grid[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">                dp[i][j] = min(dp[i<span class=\"number\">-1</span>][j], dp[i][j<span class=\"number\">-1</span>]) + grid[i][j]</span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<p>题目变成了正方形，逐层扩展的时候要记录，每一列计算之前要加上第0行第j列的值，所以沿用上一题的图，dp[i] = dp[i]–上方的值+ dp[i-1] – 左方的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minPathSum</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">            dp[i] = dp[i<span class=\"number\">-1</span>] + grid[i][<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">0</span>] + grid[<span class=\"number\">0</span>][j]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                dp[i] = min(dp[i], dp[i<span class=\"number\">-1</span>]) + grid[i][j]</span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"256-Paint-House\"><a href=\"#256-Paint-House\" class=\"headerlink\" title=\"256. Paint House\"></a>256. Paint House</h3><p>由于每次喷涂的房子颜色不能与之前的相同，所以转移方程为<code>dp[i][2] += min(dp[i-1][0], dp[i-1][1])</code> dp为costs</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minCost</span><span class=\"params\">(self, costs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type costs: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> costs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        length = len(costs)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">            costs[i][<span class=\"number\">0</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\">            costs[i][<span class=\"number\">1</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br><span class=\"line\">            costs[i][<span class=\"number\">2</span>] += min(costs[i<span class=\"number\">-1</span>][<span class=\"number\">0</span>],costs[i<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(costs[length<span class=\"number\">-1</span>][<span class=\"number\">0</span>], costs[length<span class=\"number\">-1</span>][<span class=\"number\">1</span>], costs[length<span class=\"number\">-1</span>][<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"276-Paint-Fence\"><a href=\"#276-Paint-Fence\" class=\"headerlink\" title=\"276. Paint Fence\"></a>276. Paint Fence</h3><p>这道题其实跟上一道题很像，但是每一次涂得颜色可以和上一个一样（连续的颜色最多出现两次），所以当前状态与前两个有关，可以和前两个状态其中任何一个颜色一样 <code>dp[2] = (k-1) * (dp[0] + dp[1]), dp = [k, k*k, 0]</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numWays</span><span class=\"params\">(self, n, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> k</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># for the first 2 posts</span></span><br><span class=\"line\">        dp = [k, k*k, <span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, n):</span><br><span class=\"line\">            dp[<span class=\"number\">2</span>] = (k<span class=\"number\">-1</span>) * (dp[<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>])</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>]</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"174-Dungeon-Game\"><a href=\"#174-Dungeon-Game\" class=\"headerlink\" title=\"174. Dungeon Game\"></a>174. Dungeon Game</h3><p>最主要的区别是，要从后往前找，由于生命最少为1，所以DP的条件也要相应变一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculateMinimumHP</span><span class=\"params\">(self, dungeon)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type dungeon: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m = len(dungeon)</span><br><span class=\"line\">        n = len(dungeon[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i == m<span class=\"number\">-1</span> <span class=\"keyword\">and</span> j == n<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, <span class=\"number\">1</span> - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> i == m<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, dp[i][j+<span class=\"number\">1</span>] - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j == n<span class=\"number\">-1</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, dp[i+<span class=\"number\">1</span>][j] - dungeon[i][j])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = max(<span class=\"number\">1</span>, min(dp[i+<span class=\"number\">1</span>][j], dp[i][j+<span class=\"number\">1</span>]) - dungeon[i][j])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium-1\"><a href=\"#Medium-1\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><h3 id=\"651-4-Keys-Keyboard\"><a href=\"#651-4-Keys-Keyboard\" class=\"headerlink\" title=\"651. 4 Keys Keyboard\"></a>651. 4 Keys Keyboard</h3><p>这道题想了半天，发现最后还是举例子最好；在6个操作内，只有A的操作是最大的，之后的话dp[i] = dp[j] <em> (i-j-1), 比如i==7， j==1的时候，最后是A </em> 7-1-1 = 5A </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxA</span><span class=\"params\">(self, N)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type N: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> N &lt;= <span class=\"number\">6</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> N</span><br><span class=\"line\">        dp = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>,N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,i<span class=\"number\">-2</span>):</span><br><span class=\"line\">                dp[i] = max(dp[i], dp[j] * (i-j<span class=\"number\">-1</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"304-Range-Sum-Query-2D-Immutable\"><a href=\"#304-Range-Sum-Query-2D-Immutable\" class=\"headerlink\" title=\"304. Range Sum Query 2D - Immutable\"></a>304. Range Sum Query 2D - Immutable</h3><p>这道题最关键的是处理corner case</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumMatrix</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># deal with zero row and column</span></span><br><span class=\"line\">        self.dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, m+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">                self.dp[i][j] = matrix[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + self.dp[i<span class=\"number\">-1</span>][j] + self.dp[i][j<span class=\"number\">-1</span>] - self.dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumRegion</span><span class=\"params\">(self, row1, col1, row2, col2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type row1: int</span></span><br><span class=\"line\"><span class=\"string\">        :type col1: int</span></span><br><span class=\"line\"><span class=\"string\">        :type row2: int</span></span><br><span class=\"line\"><span class=\"string\">        :type col2: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dp[row2+<span class=\"number\">1</span>][col2+<span class=\"number\">1</span>] - self.dp[row2+<span class=\"number\">1</span>][col1]- self.dp[row1][col2+<span class=\"number\">1</span>] + self.dp[row1][col1]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your NumMatrix object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = NumMatrix(matrix)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.sumRegion(row1,col1,row2,col2)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"221-Maximal-Square\"><a href=\"#221-Maximal-Square\" class=\"headerlink\" title=\"221. Maximal Square\"></a>221. Maximal Square</h3><p>可行的解法是很巧妙的：以这个square的最右下角的位置作为存储点f(i, j),当matrix(i, j)是1的时候，f(i, j) = min{f(i - 1, j - 1), f(i - 1, j), f(i, j -1)} + 1. 这是因为如果这是一个square，那么构成这个square的最基本条件就是跟它相邻的边的最小所在square.所以一个square的f值如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(matrix)</span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(n+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(m+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,m+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> matrix[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    dp[i][j] = min(dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>], dp[i<span class=\"number\">-1</span>][j], dp[i][j<span class=\"number\">-1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">                    res = max(res, dp[i][j])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res * res</span><br></pre></td></tr></table></figure>\n<h2 id=\"二维DP\"><a href=\"#二维DP\" class=\"headerlink\" title=\"二维DP\"></a>二维DP</h2><h3 id=\"72-Edit-Distance\"><a href=\"#72-Edit-Distance\" class=\"headerlink\" title=\"72. Edit Distance\"></a>72. Edit Distance</h3><p>这道题是一道经典问题，分为之下三个操作，我觉得以下的解释是最好的<br>a) 插入一个字符：word1[0:i] -&gt; word2[0:j-1]，然后在word1[0:i]后插入word2[j]<br>DP[i+1][j+1] = DP[i+1][j]+1</p>\n<p>b) 删除一个字符：word1[0:i-1] -&gt; word2[0:j]，然后删除word1[i]<br>DP[i+1][j+1] = DP[i][j+1]+1</p>\n<p>c) 替换一个字符：word1[0:i-1] -&gt; word2[0:j-1]<br>word1[i] != word2[j]时，word1[i] -&gt; word2[j]：DP[i+1][j+1] = DP[i][j] + 1<br>word1[i] == word2[j]时：DP[i+1][j+1] = DP[i][j] </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDistance</span><span class=\"params\">(self, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        l1 = len(word1)+<span class=\"number\">1</span></span><br><span class=\"line\">        l2 = len(word2) + <span class=\"number\">1</span></span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(l2)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(l1)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(l1):</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(l2):</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = j</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,l1):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,l2):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> word1[i<span class=\"number\">-1</span>] == word2[j<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                    dp[i][j] = dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = min(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j], dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]) + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">#print dp</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">-1</span>][<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>"},{"title":"Design 问题","comments":1,"date":"2018-03-23T04:21:36.000Z","updated":"2018-03-23T04:21:36.000Z","_content":"\n# Design系列问题\n## 高频题\n这类题基本上都是高频题\n### 146. LRU Cache\n这道题是很高频的题目，主要hint就是用双向链表来实现\n\n```python\nclass Node:\n\tdef __init__(self, k, v):\n\t\tself.key = k\n\t\tself.val = v\n\t\tself.prev = None\n\t\tself.next = None\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.dic = {}\n        self.head = Node(0,0)\n        self.tail = Node(0,0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.dic:\n            n = self.dic[key]\n            self._remove(n)\n            self._add(n)\n            return n.val\n        return -1\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if key in self.dic:\n            self._remove(self.dic[key])\n        n = Node(key, value)\n        self._add(n)\n        # imp value - node\n        self.dic[key] = n\n        if len(self.dic) > self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del(self.dic[n.key])\n            \n    def _add(self, node):\n        p = self.tail.prev\n        p.next = node\n        self.tail.prev = node\n        node.prev = p\n        node.next = self.tail\n        \n        \n    def _remove(self, node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n```\n<!--more-->\n### 155. Min Stack\n这道题就是用stack来存sofar的最小值\n\n```python\nclass MinStack(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        if len(self.stack) == 0:\n            self.stack.append((x,x))\n        else:\n            min_sofar = min(x, self.stack[-1][1])\n            self.stack.append((x, min_sofar))\n\n    def pop(self):\n        \"\"\"\n        :rtype: void\n        \"\"\"\n        self.stack.pop()  \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][0]\n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][1]\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()\n```\n\n### 716. Max Stack\n与上一道题相类似，区别就是在popMax的时候用临时stack来记录\n\n```python\nclass MaxStack(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        \n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        maxNumber = max(x, self.stack[-1][1]) if self.stack else x\n        self.stack.append((x,maxNumber))\n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack.pop()[0]\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][0]\n        \n\n    def peekMax(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][1]\n        \n\n    def popMax(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        temp = self.stack[-1][1]\n        tempStack = []\n        \n        while self.stack[-1][0] != temp:\n            tempStack.append(self.stack.pop())\n        self.stack.pop()\n        while tempStack:\n            self.push(tempStack.pop()[0])\n      \n        return temp\n        \n\n\n# Your MaxStack object will be instantiated and called as such:\n# obj = MaxStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.peekMax()\n# param_5 = obj.popMax()\n```\n### 225. Implement Stack using Queues\n在init的时候，每当新元素进来的时候，不断让queue的元素pop出来在加到queue尾，从而index为0 的元素就是最后加进来的\n\n```python\nclass MyStack(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = []\n        \n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        size = len(self.queue)\n        while size > 1:\n            self.queue.append(self.queue.pop(0))\n            size -= 1\n        \n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        return self.queue.pop(0)\n        \n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        return self.queue[0]\n        \n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n```\n### 232. Implement Queue using Stacks\n用两个stack，在pop的时候，也是同样的像上一题的操作，加到另外一个stack中\n\n```python\nclass MyQueue(object):\n    def __init__(self):\n        self.input = []\n        self.output = []\n        \n    def push(self, x):\n        self.input.append(x)\n\n    def pop(self):\n        self.peek()\n        return self.output.pop()\n        \n    def peek(self):\n        if(self.output == []):\n            while(self.input != []):\n                self.output.append(self.input.pop())\n        return self.output[-1]\n        \n    def empty(self):\n        return self.input == [] and self.output == []\n```\n### 297. Serialize and Deserialize Binary Tree\n这道题就是BFS遍历树，然后BFS解析树，注意index的值\n\n```python\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return \"\"\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n            res.append(str(node.val) if node else \"#\")\n        # strip left ','\n        return \",\".join(res).strip(',')\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data:\n            return None\n        nodes = []\n        for i in data.split(\",\"):\n            if i != '#':\n                nodes.append(TreeNode(i))\n            else:\n                nodes.append(None)\n        \n        queue = [nodes[0]]\n        index = 1\n        while queue:\n            node = queue.pop(0)\n            if index < len(nodes) and nodes[index]:\n                node.left = nodes[index]\n                queue.append(nodes[index])\n            if index + 1 < len(nodes) and nodes[index+1]:\n                node.right = nodes[index+1]\n                queue.append(nodes[index+1])\n            index += 2\n            \n        return nodes[0]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n```\n### 173. Binary Search Tree Iterator\n这道题也是高频题，FB面过.注意pushAll的时候是判断root！\n\n```python\n# Definition for a  binary tree node\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass BSTIterator(object):\n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n        self.stack = []\n        self.pushAll(root)\n        \n    def pushAll(self,root):\n        while root:\n            self.stack.append(root)\n            root = root.left\n            \n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.stack\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        node = self.stack.pop()\n        \n        self.pushAll(node.right)\n        return node.val\n        \n\n# Your BSTIterator will be called like this:\n# i, v = BSTIterator(root), []\n# while i.hasNext(): v.append(i.next())\n```\n### 380. Insert Delete GetRandom O(1)\n用dic来记录value和对应的index，从而能保证O（1）时间内删除\n\n```python\nimport random\nclass RandomizedSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.array = []\n        self.dic = dict()\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val in self.dic:\n            return False\n        self.dic[val] = len(self.array)\n        self.array.append(val)\n        return True\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val not in self.dic:\n            return False\n        # val.index in self.array\n        index = self.dic[val]\n        \n        # check not the last\n        if index < len(self.array) - 1:\n            last = self.array[-1]\n            self.dic[last] = index\n            self.array[index] = last\n            \n        self.array.pop()\n        del(self.dic[val])\n        return True\n        \n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n        return self.array[random.randint(0, len(self.array)-1)]\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n```\n### 381. Insert Delete GetRandom O(1) - Duplicates allowed\ndic里面的值用set来记录\n\n```python\nimport random\nclass RandomizedCollection(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.array = []\n        self.dic = dict()\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n        if val not in self.dic:\n            self.dic[val] = set()\n            self.dic[val].add(len(self.array))\n            self.array.append(val)\n            return True\n        else:\n            self.dic[val].add(len(self.array))\n            self.array.append(val)\n            \n            return False\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val not in self.dic:\n            return False\n        \n        # val.index in self.array\n        index = self.dic[val].pop()\n        \n        if index < len(self.array) - 1:\n            \n            last = self.array[-1]\n            self.array[index] = last\n            # last item delete\n            # remove old insert new\n            \n            self.dic[last].remove(len(self.array)-1)\n            self.dic[last].add(index)\n            \n        self.array.pop()\n        if not self.dic[val]:\n            del(self.dic[val])\n        return True\n        \n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n        return self.array[random.randint(0, len(self.array)-1)]\n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n```\n\n## Trie类型\n### 简单构建\n在程序中需要简单构建一个Trie\n\n```python\ntrie = {}\nfor w in words:\n    t = trie\n    for c in w:\n        if c not in t:\n            t[c] = {}\n        t = t[c]\n    t['#'] = '#'\n```\n### 208. Implement Trie (Prefix Tree)\n基础类型\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return curr.isword\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return True\n        \n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)\n```\n### 211. Add and Search Word - Data structure design\n如何处理. 的问题，用string的slice来搞，find的递归操作\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        self.node = defaultdict(TrieNode)\n        self.isWord = False\n\n    def __repr__(self):\n        return repr(self.node)\n        \nclass WordDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.node[char]\n        curr.isWord = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return self.find(self.root, word)\n    \n    def find(self, trie, word):\n        if word == '':\n            return trie.isWord\n        \n        if word[0] == '.':\n            for i in trie.node:\n                if self.find(trie.node[i], word[1:]):\n                    return True\n        else:\n            child = trie.node.get(word[0])\n            if child:\n                return self.find(child, word[1:])\n        return False\n```\n### 642. Design Search Autocomplete System\n进阶版本 取前三个。很复杂的题\n\n```python\nclass TrieNode(object):\n    def __init__(self):\n        self.children = dict()\n        self.isEnd = False\n        self.rank = 0\n        self.data  = None\n        \nclass AutocompleteSystem(object):\n\n    def __init__(self, sentences, times):\n        \"\"\"\n        :type sentences: List[str]\n        :type times: List[int]\n        \"\"\"\n        self.root = TrieNode()\n        self.keyword = \"\"\n        for i, sentence in enumerate(sentences):\n            self.addRecord(sentence, times[i])\n            \n    def addRecord(self, word, rank):\n        p = self.root\n        for char in word:\n            if char not in p.children:\n                p.children[char] = TrieNode()\n            p = p.children[char]\n        p.isEnd = True   \n        p.data = word\n        # compare\n        p.rank -= rank\n        \n\n    def search(self, word):\n        p = self.root\n        for char in word:\n            if char not in p.children:\n                return []\n            p = p.children[char]\n        return self.dfs(p)\n    \n    def dfs(self, root):\n        res = []\n        if root:\n            # find the end\n            if root.isEnd:\n                res.append((root.rank, root.data))\n            for child in root.children:\n                res.extend(self.dfs(root.children[child]))\n        return res\n    \n    def input(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if c != \"#\":\n            self.keyword += c\n            res = self.search(self.keyword)\n        else:\n            self.addWord(self.keyword,1)\n            self.keyword = \"\"\n        return [item[1] for item in sorted(res)[:3]]\n        \n\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)\n```\n\n## 一般的题\n### 281. Zigzag Iterator\n就是正常的来\n\n```python\nclass ZigzagIterator(object):\n\n    def __init__(self, v1, v2):\n        \"\"\"\n        Initialize your data structure here.\n        :type v1: List[int]\n        :type v2: List[int]\n        \"\"\"\n        self.res = []\n        pos = 0\n        while pos < max(len(v1), len(v2)):\n            if pos < len(v1):\n                self.res.append(v1[pos])\n            if pos < len(v2):\n                self.res.append(v2[pos])\n            pos += 1\n        self.index = 0\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        res = self.res[self.index]\n        self.index += 1\n        return res\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.index < len(self.res)\n        \n\n# Your ZigzagIterator object will be instantiated and called as such:\n# i, v = ZigzagIterator(v1, v2), []\n# while i.hasNext(): v.append(i.next())\n```\n### 284. Peeking Iterator\n先预存next的值\n\n```python\n# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator(object):\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator(object):\n    def __init__(self, iterator):\n        self.iter = iterator\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n\n    def peek(self):\n        return self.temp\n\n    def next(self):\n        ret = self.temp\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n        return ret\n\n    def hasNext(self):\n        return self.temp is not None\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].\n```\n### 359. Logger Rate Limiter\nwindow的size为10\n\n```python\nclass Logger(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.dic = dict()\n        \n\n    def shouldPrintMessage(self, timestamp, message):\n        \"\"\"\n        Returns true if the message should be printed in the given timestamp, otherwise returns false.\n        If this method returns false, the message will not be printed.\n        The timestamp is in seconds granularity.\n        :type timestamp: int\n        :type message: str\n        :rtype: bool\n        \"\"\"\n        # condition one \n        if message in self.dic and timestamp - self.dic[message] < 10:\n            return False\n        else:\n            self.dic[message] = timestamp\n            return True\n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)\n```\n### 362. Design Hit Counter\n因为是统计当时的hit值，所以可以维护一个全局变量hit\n\n```python\nclass HitCounter(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.count = 0\n        self.queue = []\n\n    def hit(self, timestamp):\n        \"\"\"\n        Record a hit.\n        @param timestamp - The current timestamp (in seconds granularity).\n        :type timestamp: int\n        :rtype: void\n        \"\"\"\n        if not self.queue or self.queue[-1][0] != timestamp:\n            self.queue.append([timestamp,1])\n        else:\n            self.queue[-1][1] += 1\n        self.count += 1\n        \n    def getHits(self, timestamp):\n        \"\"\"\n        Return the number of hits in the past 5 minutes.\n        @param timestamp - The current timestamp (in seconds granularity).\n        :type timestamp: int\n        :rtype: int\n        \"\"\"\n        # move forward\n        while self.queue and timestamp - self.queue[0][0] >= 300:\n            self.count -= self.queue.pop(0)[1]\n        return self.count\n\n\n# Your HitCounter object will be instantiated and called as such:\n# obj = HitCounter()\n# obj.hit(timestamp)\n# param_2 = obj.getHits(timestamp)\n```","source":"_posts/Design-问题.md","raw":"---\ntitle: Design 问题\ncomments: true\ndate: 2018-03-22 21:21:36\nupdated: 2018-03-22 21:21:36\ncategories: Leetcode\ntags: Design\n---\n\n# Design系列问题\n## 高频题\n这类题基本上都是高频题\n### 146. LRU Cache\n这道题是很高频的题目，主要hint就是用双向链表来实现\n\n```python\nclass Node:\n\tdef __init__(self, k, v):\n\t\tself.key = k\n\t\tself.val = v\n\t\tself.prev = None\n\t\tself.next = None\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.dic = {}\n        self.head = Node(0,0)\n        self.tail = Node(0,0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n        \n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.dic:\n            n = self.dic[key]\n            self._remove(n)\n            self._add(n)\n            return n.val\n        return -1\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if key in self.dic:\n            self._remove(self.dic[key])\n        n = Node(key, value)\n        self._add(n)\n        # imp value - node\n        self.dic[key] = n\n        if len(self.dic) > self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del(self.dic[n.key])\n            \n    def _add(self, node):\n        p = self.tail.prev\n        p.next = node\n        self.tail.prev = node\n        node.prev = p\n        node.next = self.tail\n        \n        \n    def _remove(self, node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n```\n<!--more-->\n### 155. Min Stack\n这道题就是用stack来存sofar的最小值\n\n```python\nclass MinStack(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        if len(self.stack) == 0:\n            self.stack.append((x,x))\n        else:\n            min_sofar = min(x, self.stack[-1][1])\n            self.stack.append((x, min_sofar))\n\n    def pop(self):\n        \"\"\"\n        :rtype: void\n        \"\"\"\n        self.stack.pop()  \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][0]\n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][1]\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()\n```\n\n### 716. Max Stack\n与上一道题相类似，区别就是在popMax的时候用临时stack来记录\n\n```python\nclass MaxStack(object):\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        \n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        maxNumber = max(x, self.stack[-1][1]) if self.stack else x\n        self.stack.append((x,maxNumber))\n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack.pop()[0]\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][0]\n        \n\n    def peekMax(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][1]\n        \n\n    def popMax(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        temp = self.stack[-1][1]\n        tempStack = []\n        \n        while self.stack[-1][0] != temp:\n            tempStack.append(self.stack.pop())\n        self.stack.pop()\n        while tempStack:\n            self.push(tempStack.pop()[0])\n      \n        return temp\n        \n\n\n# Your MaxStack object will be instantiated and called as such:\n# obj = MaxStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.peekMax()\n# param_5 = obj.popMax()\n```\n### 225. Implement Stack using Queues\n在init的时候，每当新元素进来的时候，不断让queue的元素pop出来在加到queue尾，从而index为0 的元素就是最后加进来的\n\n```python\nclass MyStack(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = []\n        \n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        size = len(self.queue)\n        while size > 1:\n            self.queue.append(self.queue.pop(0))\n            size -= 1\n        \n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        return self.queue.pop(0)\n        \n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        return self.queue[0]\n        \n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n```\n### 232. Implement Queue using Stacks\n用两个stack，在pop的时候，也是同样的像上一题的操作，加到另外一个stack中\n\n```python\nclass MyQueue(object):\n    def __init__(self):\n        self.input = []\n        self.output = []\n        \n    def push(self, x):\n        self.input.append(x)\n\n    def pop(self):\n        self.peek()\n        return self.output.pop()\n        \n    def peek(self):\n        if(self.output == []):\n            while(self.input != []):\n                self.output.append(self.input.pop())\n        return self.output[-1]\n        \n    def empty(self):\n        return self.input == [] and self.output == []\n```\n### 297. Serialize and Deserialize Binary Tree\n这道题就是BFS遍历树，然后BFS解析树，注意index的值\n\n```python\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return \"\"\n        queue = [root]\n        res = []\n        while queue:\n            node = queue.pop(0)\n            if node:\n                queue.append(node.left)\n                queue.append(node.right)\n            res.append(str(node.val) if node else \"#\")\n        # strip left ','\n        return \",\".join(res).strip(',')\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data:\n            return None\n        nodes = []\n        for i in data.split(\",\"):\n            if i != '#':\n                nodes.append(TreeNode(i))\n            else:\n                nodes.append(None)\n        \n        queue = [nodes[0]]\n        index = 1\n        while queue:\n            node = queue.pop(0)\n            if index < len(nodes) and nodes[index]:\n                node.left = nodes[index]\n                queue.append(nodes[index])\n            if index + 1 < len(nodes) and nodes[index+1]:\n                node.right = nodes[index+1]\n                queue.append(nodes[index+1])\n            index += 2\n            \n        return nodes[0]\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))\n```\n### 173. Binary Search Tree Iterator\n这道题也是高频题，FB面过.注意pushAll的时候是判断root！\n\n```python\n# Definition for a  binary tree node\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass BSTIterator(object):\n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n        self.stack = []\n        self.pushAll(root)\n        \n    def pushAll(self,root):\n        while root:\n            self.stack.append(root)\n            root = root.left\n            \n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.stack\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        node = self.stack.pop()\n        \n        self.pushAll(node.right)\n        return node.val\n        \n\n# Your BSTIterator will be called like this:\n# i, v = BSTIterator(root), []\n# while i.hasNext(): v.append(i.next())\n```\n### 380. Insert Delete GetRandom O(1)\n用dic来记录value和对应的index，从而能保证O（1）时间内删除\n\n```python\nimport random\nclass RandomizedSet(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.array = []\n        self.dic = dict()\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val in self.dic:\n            return False\n        self.dic[val] = len(self.array)\n        self.array.append(val)\n        return True\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val not in self.dic:\n            return False\n        # val.index in self.array\n        index = self.dic[val]\n        \n        # check not the last\n        if index < len(self.array) - 1:\n            last = self.array[-1]\n            self.dic[last] = index\n            self.array[index] = last\n            \n        self.array.pop()\n        del(self.dic[val])\n        return True\n        \n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n        return self.array[random.randint(0, len(self.array)-1)]\n\n\n# Your RandomizedSet object will be instantiated and called as such:\n# obj = RandomizedSet()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n```\n### 381. Insert Delete GetRandom O(1) - Duplicates allowed\ndic里面的值用set来记录\n\n```python\nimport random\nclass RandomizedCollection(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.array = []\n        self.dic = dict()\n\n    def insert(self, val):\n        \"\"\"\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        \n        if val not in self.dic:\n            self.dic[val] = set()\n            self.dic[val].add(len(self.array))\n            self.array.append(val)\n            return True\n        else:\n            self.dic[val].add(len(self.array))\n            self.array.append(val)\n            \n            return False\n\n    def remove(self, val):\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        :type val: int\n        :rtype: bool\n        \"\"\"\n        if val not in self.dic:\n            return False\n        \n        # val.index in self.array\n        index = self.dic[val].pop()\n        \n        if index < len(self.array) - 1:\n            \n            last = self.array[-1]\n            self.array[index] = last\n            # last item delete\n            # remove old insert new\n            \n            self.dic[last].remove(len(self.array)-1)\n            self.dic[last].add(index)\n            \n        self.array.pop()\n        if not self.dic[val]:\n            del(self.dic[val])\n        return True\n        \n\n    def getRandom(self):\n        \"\"\"\n        Get a random element from the set.\n        :rtype: int\n        \"\"\"\n        return self.array[random.randint(0, len(self.array)-1)]\n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()\n```\n\n## Trie类型\n### 简单构建\n在程序中需要简单构建一个Trie\n\n```python\ntrie = {}\nfor w in words:\n    t = trie\n    for c in w:\n        if c not in t:\n            t[c] = {}\n        t = t[c]\n    t['#'] = '#'\n```\n### 208. Implement Trie (Prefix Tree)\n基础类型\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return curr.isword\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return True\n        \n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)\n```\n### 211. Add and Search Word - Data structure design\n如何处理. 的问题，用string的slice来搞，find的递归操作\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        self.node = defaultdict(TrieNode)\n        self.isWord = False\n\n    def __repr__(self):\n        return repr(self.node)\n        \nclass WordDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.node[char]\n        curr.isWord = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return self.find(self.root, word)\n    \n    def find(self, trie, word):\n        if word == '':\n            return trie.isWord\n        \n        if word[0] == '.':\n            for i in trie.node:\n                if self.find(trie.node[i], word[1:]):\n                    return True\n        else:\n            child = trie.node.get(word[0])\n            if child:\n                return self.find(child, word[1:])\n        return False\n```\n### 642. Design Search Autocomplete System\n进阶版本 取前三个。很复杂的题\n\n```python\nclass TrieNode(object):\n    def __init__(self):\n        self.children = dict()\n        self.isEnd = False\n        self.rank = 0\n        self.data  = None\n        \nclass AutocompleteSystem(object):\n\n    def __init__(self, sentences, times):\n        \"\"\"\n        :type sentences: List[str]\n        :type times: List[int]\n        \"\"\"\n        self.root = TrieNode()\n        self.keyword = \"\"\n        for i, sentence in enumerate(sentences):\n            self.addRecord(sentence, times[i])\n            \n    def addRecord(self, word, rank):\n        p = self.root\n        for char in word:\n            if char not in p.children:\n                p.children[char] = TrieNode()\n            p = p.children[char]\n        p.isEnd = True   \n        p.data = word\n        # compare\n        p.rank -= rank\n        \n\n    def search(self, word):\n        p = self.root\n        for char in word:\n            if char not in p.children:\n                return []\n            p = p.children[char]\n        return self.dfs(p)\n    \n    def dfs(self, root):\n        res = []\n        if root:\n            # find the end\n            if root.isEnd:\n                res.append((root.rank, root.data))\n            for child in root.children:\n                res.extend(self.dfs(root.children[child]))\n        return res\n    \n    def input(self, c):\n        \"\"\"\n        :type c: str\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if c != \"#\":\n            self.keyword += c\n            res = self.search(self.keyword)\n        else:\n            self.addWord(self.keyword,1)\n            self.keyword = \"\"\n        return [item[1] for item in sorted(res)[:3]]\n        \n\n\n# Your AutocompleteSystem object will be instantiated and called as such:\n# obj = AutocompleteSystem(sentences, times)\n# param_1 = obj.input(c)\n```\n\n## 一般的题\n### 281. Zigzag Iterator\n就是正常的来\n\n```python\nclass ZigzagIterator(object):\n\n    def __init__(self, v1, v2):\n        \"\"\"\n        Initialize your data structure here.\n        :type v1: List[int]\n        :type v2: List[int]\n        \"\"\"\n        self.res = []\n        pos = 0\n        while pos < max(len(v1), len(v2)):\n            if pos < len(v1):\n                self.res.append(v1[pos])\n            if pos < len(v2):\n                self.res.append(v2[pos])\n            pos += 1\n        self.index = 0\n        \n\n    def next(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        res = self.res[self.index]\n        self.index += 1\n        return res\n        \n\n    def hasNext(self):\n        \"\"\"\n        :rtype: bool\n        \"\"\"\n        return self.index < len(self.res)\n        \n\n# Your ZigzagIterator object will be instantiated and called as such:\n# i, v = ZigzagIterator(v1, v2), []\n# while i.hasNext(): v.append(i.next())\n```\n### 284. Peeking Iterator\n先预存next的值\n\n```python\n# Below is the interface for Iterator, which is already defined for you.\n#\n# class Iterator(object):\n#     def __init__(self, nums):\n#         \"\"\"\n#         Initializes an iterator object to the beginning of a list.\n#         :type nums: List[int]\n#         \"\"\"\n#\n#     def hasNext(self):\n#         \"\"\"\n#         Returns true if the iteration has more elements.\n#         :rtype: bool\n#         \"\"\"\n#\n#     def next(self):\n#         \"\"\"\n#         Returns the next element in the iteration.\n#         :rtype: int\n#         \"\"\"\n\nclass PeekingIterator(object):\n    def __init__(self, iterator):\n        self.iter = iterator\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n\n    def peek(self):\n        return self.temp\n\n    def next(self):\n        ret = self.temp\n        self.temp = self.iter.next() if self.iter.hasNext() else None\n        return ret\n\n    def hasNext(self):\n        return self.temp is not None\n        \n\n# Your PeekingIterator object will be instantiated and called as such:\n# iter = PeekingIterator(Iterator(nums))\n# while iter.hasNext():\n#     val = iter.peek()   # Get the next element but not advance the iterator.\n#     iter.next()         # Should return the same value as [val].\n```\n### 359. Logger Rate Limiter\nwindow的size为10\n\n```python\nclass Logger(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.dic = dict()\n        \n\n    def shouldPrintMessage(self, timestamp, message):\n        \"\"\"\n        Returns true if the message should be printed in the given timestamp, otherwise returns false.\n        If this method returns false, the message will not be printed.\n        The timestamp is in seconds granularity.\n        :type timestamp: int\n        :type message: str\n        :rtype: bool\n        \"\"\"\n        # condition one \n        if message in self.dic and timestamp - self.dic[message] < 10:\n            return False\n        else:\n            self.dic[message] = timestamp\n            return True\n\n\n# Your Logger object will be instantiated and called as such:\n# obj = Logger()\n# param_1 = obj.shouldPrintMessage(timestamp,message)\n```\n### 362. Design Hit Counter\n因为是统计当时的hit值，所以可以维护一个全局变量hit\n\n```python\nclass HitCounter(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.count = 0\n        self.queue = []\n\n    def hit(self, timestamp):\n        \"\"\"\n        Record a hit.\n        @param timestamp - The current timestamp (in seconds granularity).\n        :type timestamp: int\n        :rtype: void\n        \"\"\"\n        if not self.queue or self.queue[-1][0] != timestamp:\n            self.queue.append([timestamp,1])\n        else:\n            self.queue[-1][1] += 1\n        self.count += 1\n        \n    def getHits(self, timestamp):\n        \"\"\"\n        Return the number of hits in the past 5 minutes.\n        @param timestamp - The current timestamp (in seconds granularity).\n        :type timestamp: int\n        :rtype: int\n        \"\"\"\n        # move forward\n        while self.queue and timestamp - self.queue[0][0] >= 300:\n            self.count -= self.queue.pop(0)[1]\n        return self.count\n\n\n# Your HitCounter object will be instantiated and called as such:\n# obj = HitCounter()\n# obj.hit(timestamp)\n# param_2 = obj.getHits(timestamp)\n```","slug":"Design-问题","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdeq000dm2ca2pl0fd1u","content":"<h1 id=\"Design系列问题\"><a href=\"#Design系列问题\" class=\"headerlink\" title=\"Design系列问题\"></a>Design系列问题</h1><h2 id=\"高频题\"><a href=\"#高频题\" class=\"headerlink\" title=\"高频题\"></a>高频题</h2><p>这类题基本上都是高频题</p>\n<h3 id=\"146-LRU-Cache\"><a href=\"#146-LRU-Cache\" class=\"headerlink\" title=\"146. LRU Cache\"></a>146. LRU Cache</h3><p>这道题是很高频的题目，主要hint就是用双向链表来实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, k, v)</span>:</span></span><br><span class=\"line\">\t\tself.key = k</span><br><span class=\"line\">\t\tself.val = v</span><br><span class=\"line\">\t\tself.prev = <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\tself.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, capacity)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type capacity: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.capacity = capacity</span><br><span class=\"line\">        self.dic = &#123;&#125;</span><br><span class=\"line\">        self.head = Node(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.tail = Node(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.head.next = self.tail</span><br><span class=\"line\">        self.tail.prev = self.head</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            n = self.dic[key]</span><br><span class=\"line\">            self._remove(n)</span><br><span class=\"line\">            self._add(n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.val</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: int</span></span><br><span class=\"line\"><span class=\"string\">        :type value: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            self._remove(self.dic[key])</span><br><span class=\"line\">        n = Node(key, value)</span><br><span class=\"line\">        self._add(n)</span><br><span class=\"line\">        <span class=\"comment\"># imp value - node</span></span><br><span class=\"line\">        self.dic[key] = n</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.dic) &gt; self.capacity:</span><br><span class=\"line\">            n = self.head.next</span><br><span class=\"line\">            self._remove(n)</span><br><span class=\"line\">            <span class=\"keyword\">del</span>(self.dic[n.key])</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_add</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        p = self.tail.prev</span><br><span class=\"line\">        p.next = node</span><br><span class=\"line\">        self.tail.prev = node</span><br><span class=\"line\">        node.prev = p</span><br><span class=\"line\">        node.next = self.tail</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_remove</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        p = node.prev</span><br><span class=\"line\">        n = node.next</span><br><span class=\"line\">        p.next = n</span><br><span class=\"line\">        n.prev = p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = LRUCache(capacity)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.get(key)</span></span><br><span class=\"line\"><span class=\"comment\"># obj.put(key,value)</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155. Min Stack\"></a>155. Min Stack</h3><p>这道题就是用stack来存sofar的最小值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.stack) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.stack.append((x,x))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            min_sofar = min(x, self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">            self.stack.append((x, min_sofar))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack.pop()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.getMin()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"716-Max-Stack\"><a href=\"#716-Max-Stack\" class=\"headerlink\" title=\"716. Max Stack\"></a>716. Max Stack</h3><p>与上一道题相类似，区别就是在popMax的时候用临时stack来记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        maxNumber = max(x, self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]) <span class=\"keyword\">if</span> self.stack <span class=\"keyword\">else</span> x</span><br><span class=\"line\">        self.stack.append((x,maxNumber))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack.pop()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peekMax</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">popMax</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        temp = self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        tempStack = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] != temp:</span><br><span class=\"line\">            tempStack.append(self.stack.pop())</span><br><span class=\"line\">        self.stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> tempStack:</span><br><span class=\"line\">            self.push(tempStack.pop()[<span class=\"number\">0</span>])</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MaxStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MaxStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.peekMax()</span></span><br><span class=\"line\"><span class=\"comment\"># param_5 = obj.popMax()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225. Implement Stack using Queues\"></a>225. Implement Stack using Queues</h3><p>在init的时候，每当新元素进来的时候，不断让queue的元素pop出来在加到queue尾，从而index为0 的元素就是最后加进来的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Push element x onto stack.</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue.append(x)</span><br><span class=\"line\">        size = len(self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> size &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.queue.append(self.queue.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            size -= <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes the element on top of the stack and returns that element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get the top element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns whether the stack is empty.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.queue) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MyStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MyStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232. Implement Queue using Stacks\"></a>232. Implement Queue using Stacks</h3><p>用两个stack，在pop的时候，也是同样的像上一题的操作，加到另外一个stack中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.input = []</span><br><span class=\"line\">        self.output = []</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.input.append(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.output == []):</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(self.input != []):</span><br><span class=\"line\">                self.output.append(self.input.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.input == [] <span class=\"keyword\">and</span> self.output == []</span><br></pre></td></tr></table></figure>\n<h3 id=\"297-Serialize-and-Deserialize-Binary-Tree\"><a href=\"#297-Serialize-and-Deserialize-Binary-Tree\" class=\"headerlink\" title=\"297. Serialize and Deserialize Binary Tree\"></a>297. Serialize and Deserialize Binary Tree</h3><p>这道题就是BFS遍历树，然后BFS解析树，注意index的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Codec</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serialize</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        queue = [root]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node:</span><br><span class=\"line\">                queue.append(node.left)</span><br><span class=\"line\">                queue.append(node.right)</span><br><span class=\"line\">            res.append(str(node.val) <span class=\"keyword\">if</span> node <span class=\"keyword\">else</span> <span class=\"string\">\"#\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># strip left ','</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\",\"</span>.join(res).strip(<span class=\"string\">','</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deserialize</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        :type data: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        nodes = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data.split(<span class=\"string\">\",\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != <span class=\"string\">'#'</span>:</span><br><span class=\"line\">                nodes.append(TreeNode(i))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                nodes.append(<span class=\"keyword\">None</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = [nodes[<span class=\"number\">0</span>]]</span><br><span class=\"line\">        index = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &lt; len(nodes) <span class=\"keyword\">and</span> nodes[index]:</span><br><span class=\"line\">                node.left = nodes[index]</span><br><span class=\"line\">                queue.append(nodes[index])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index + <span class=\"number\">1</span> &lt; len(nodes) <span class=\"keyword\">and</span> nodes[index+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                node.right = nodes[index+<span class=\"number\">1</span>]</span><br><span class=\"line\">                queue.append(nodes[index+<span class=\"number\">1</span>])</span><br><span class=\"line\">            index += <span class=\"number\">2</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodes[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Codec object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># codec = Codec()</span></span><br><span class=\"line\"><span class=\"comment\"># codec.deserialize(codec.serialize(root))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"173-Binary-Search-Tree-Iterator\"><a href=\"#173-Binary-Search-Tree-Iterator\" class=\"headerlink\" title=\"173. Binary Search Tree Iterator\"></a>173. Binary Search Tree Iterator</h3><p>这道题也是高频题，FB面过.注意pushAll的时候是判断root！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a  binary tree node</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        self.pushAll(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pushAll</span><span class=\"params\">(self,root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            self.stack.append(root)</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        node = self.stack.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.pushAll(node.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.val</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your BSTIterator will be called like this:</span></span><br><span class=\"line\"><span class=\"comment\"># i, v = BSTIterator(root), []</span></span><br><span class=\"line\"><span class=\"comment\"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"380-Insert-Delete-GetRandom-O-1\"><a href=\"#380-Insert-Delete-GetRandom-O-1\" class=\"headerlink\" title=\"380. Insert Delete GetRandom O(1)\"></a>380. Insert Delete GetRandom O(1)</h3><p>用dic来记录value和对应的index，从而能保证O（1）时间内删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedSet</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.array = []</span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.dic[val] = len(self.array)</span><br><span class=\"line\">        self.array.append(val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># val.index in self.array</span></span><br><span class=\"line\">        index = self.dic[val]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># check not the last</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; len(self.array) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            last = self.array[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            self.dic[last] = index</span><br><span class=\"line\">            self.array[index] = last</span><br><span class=\"line\">            </span><br><span class=\"line\">        self.array.pop()</span><br><span class=\"line\">        <span class=\"keyword\">del</span>(self.dic[val])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get a random element from the set.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.array[random.randint(<span class=\"number\">0</span>, len(self.array)<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = RandomizedSet()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.insert(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.remove(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\"><a href=\"#381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\" class=\"headerlink\" title=\"381. Insert Delete GetRandom O(1) - Duplicates allowed\"></a>381. Insert Delete GetRandom O(1) - Duplicates allowed</h3><p>dic里面的值用set来记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedCollection</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.array = []</span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            self.dic[val] = set()</span><br><span class=\"line\">            self.dic[val].add(len(self.array))</span><br><span class=\"line\">            self.array.append(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.dic[val].add(len(self.array))</span><br><span class=\"line\">            self.array.append(val)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># val.index in self.array</span></span><br><span class=\"line\">        index = self.dic[val].pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; len(self.array) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            </span><br><span class=\"line\">            last = self.array[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            self.array[index] = last</span><br><span class=\"line\">            <span class=\"comment\"># last item delete</span></span><br><span class=\"line\">            <span class=\"comment\"># remove old insert new</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            self.dic[last].remove(len(self.array)<span class=\"number\">-1</span>)</span><br><span class=\"line\">            self.dic[last].add(index)</span><br><span class=\"line\">            </span><br><span class=\"line\">        self.array.pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.dic[val]:</span><br><span class=\"line\">            <span class=\"keyword\">del</span>(self.dic[val])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get a random element from the set.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.array[random.randint(<span class=\"number\">0</span>, len(self.array)<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = RandomizedCollection()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.insert(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.remove(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Trie类型\"><a href=\"#Trie类型\" class=\"headerlink\" title=\"Trie类型\"></a>Trie类型</h2><h3 id=\"简单构建\"><a href=\"#简单构建\" class=\"headerlink\" title=\"简单构建\"></a>简单构建</h3><p>在程序中需要简单构建一个Trie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trie = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">    t = trie</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> w:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            t[c] = &#123;&#125;</span><br><span class=\"line\">        t = t[c]</span><br><span class=\"line\">    t[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"208-Implement-Trie-Prefix-Tree\"><a href=\"#208-Implement-Trie-Prefix-Tree\" class=\"headerlink\" title=\"208. Implement Trie (Prefix Tree)\"></a>208. Implement Trie (Prefix Tree)</h3><p>基础类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.isword</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># Your Trie object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Trie()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.insert(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.search(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"211-Add-and-Search-Word-Data-structure-design\"><a href=\"#211-Add-and-Search-Word-Data-structure-design\" class=\"headerlink\" title=\"211. Add and Search Word - Data structure design\"></a>211. Add and Search Word - Data structure design</h3><p>如何处理. 的问题，用string的slice来搞，find的递归操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.node = defaultdict(TrieNode)</span><br><span class=\"line\">        self.isWord = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repr(self.node)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDictionary</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addWord</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Adds a word into the data structure.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.node[char]</span><br><span class=\"line\">        curr.isWord = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(self.root, word)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, trie, word)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> word == <span class=\"string\">''</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> trie.isWord</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> word[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trie.node:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.find(trie.node[i], word[<span class=\"number\">1</span>:]):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            child = trie.node.get(word[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.find(child, word[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"642-Design-Search-Autocomplete-System\"><a href=\"#642-Design-Search-Autocomplete-System\" class=\"headerlink\" title=\"642. Design Search Autocomplete System\"></a>642. Design Search Autocomplete System</h3><p>进阶版本 取前三个。很复杂的题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.children = dict()</span><br><span class=\"line\">        self.isEnd = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.rank = <span class=\"number\">0</span></span><br><span class=\"line\">        self.data  = <span class=\"keyword\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSystem</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, sentences, times)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type sentences: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type times: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        self.keyword = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, sentence <span class=\"keyword\">in</span> enumerate(sentences):</span><br><span class=\"line\">            self.addRecord(sentence, times[i])</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addRecord</span><span class=\"params\">(self, word, rank)</span>:</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p.children:</span><br><span class=\"line\">                p.children[char] = TrieNode()</span><br><span class=\"line\">            p = p.children[char]</span><br><span class=\"line\">        p.isEnd = <span class=\"keyword\">True</span>   </span><br><span class=\"line\">        p.data = word</span><br><span class=\"line\">        <span class=\"comment\"># compare</span></span><br><span class=\"line\">        p.rank -= rank</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p.children:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> []</span><br><span class=\"line\">            p = p.children[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dfs(p)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">            <span class=\"comment\"># find the end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> root.isEnd:</span><br><span class=\"line\">                res.append((root.rank, root.data))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> root.children:</span><br><span class=\"line\">                res.extend(self.dfs(root.children[child]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">input</span><span class=\"params\">(self, c)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type c: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c != <span class=\"string\">\"#\"</span>:</span><br><span class=\"line\">            self.keyword += c</span><br><span class=\"line\">            res = self.search(self.keyword)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.addWord(self.keyword,<span class=\"number\">1</span>)</span><br><span class=\"line\">            self.keyword = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sorted(res)[:<span class=\"number\">3</span>]]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your AutocompleteSystem object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = AutocompleteSystem(sentences, times)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.input(c)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一般的题\"><a href=\"#一般的题\" class=\"headerlink\" title=\"一般的题\"></a>一般的题</h2><h3 id=\"281-Zigzag-Iterator\"><a href=\"#281-Zigzag-Iterator\" class=\"headerlink\" title=\"281. Zigzag Iterator\"></a>281. Zigzag Iterator</h3><p>就是正常的来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZigzagIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, v1, v2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        :type v1: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type v2: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.res = []</span><br><span class=\"line\">        pos = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pos &lt; max(len(v1), len(v2)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pos &lt; len(v1):</span><br><span class=\"line\">                self.res.append(v1[pos])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pos &lt; len(v2):</span><br><span class=\"line\">                self.res.append(v2[pos])</span><br><span class=\"line\">            pos += <span class=\"number\">1</span></span><br><span class=\"line\">        self.index = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = self.res[self.index]</span><br><span class=\"line\">        self.index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.index &lt; len(self.res)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your ZigzagIterator object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># i, v = ZigzagIterator(v1, v2), []</span></span><br><span class=\"line\"><span class=\"comment\"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"284-Peeking-Iterator\"><a href=\"#284-Peeking-Iterator\" class=\"headerlink\" title=\"284. Peeking Iterator\"></a>284. Peeking Iterator</h3><p>先预存next的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Below is the interface for Iterator, which is already defined for you.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># class Iterator(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, nums):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Initializes an iterator object to the beginning of a list.</span></span><br><span class=\"line\"><span class=\"comment\">#         :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def hasNext(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Returns true if the iteration has more elements.</span></span><br><span class=\"line\"><span class=\"comment\">#         :rtype: bool</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def next(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Returns the next element in the iteration.</span></span><br><span class=\"line\"><span class=\"comment\">#         :rtype: int</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeekingIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, iterator)</span>:</span></span><br><span class=\"line\">        self.iter = iterator</span><br><span class=\"line\">        self.temp = self.iter.next() <span class=\"keyword\">if</span> self.iter.hasNext() <span class=\"keyword\">else</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        ret = self.temp</span><br><span class=\"line\">        self.temp = self.iter.next() <span class=\"keyword\">if</span> self.iter.hasNext() <span class=\"keyword\">else</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.temp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your PeekingIterator object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># iter = PeekingIterator(Iterator(nums))</span></span><br><span class=\"line\"><span class=\"comment\"># while iter.hasNext():</span></span><br><span class=\"line\"><span class=\"comment\">#     val = iter.peek()   # Get the next element but not advance the iterator.</span></span><br><span class=\"line\"><span class=\"comment\">#     iter.next()         # Should return the same value as [val].</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"359-Logger-Rate-Limiter\"><a href=\"#359-Logger-Rate-Limiter\" class=\"headerlink\" title=\"359. Logger Rate Limiter\"></a>359. Logger Rate Limiter</h3><p>window的size为10</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shouldPrintMessage</span><span class=\"params\">(self, timestamp, message)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns true if the message should be printed in the given timestamp, otherwise returns false.</span></span><br><span class=\"line\"><span class=\"string\">        If this method returns false, the message will not be printed.</span></span><br><span class=\"line\"><span class=\"string\">        The timestamp is in seconds granularity.</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :type message: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># condition one </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> message <span class=\"keyword\">in</span> self.dic <span class=\"keyword\">and</span> timestamp - self.dic[message] &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.dic[message] = timestamp</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Logger object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Logger()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.shouldPrintMessage(timestamp,message)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"362-Design-Hit-Counter\"><a href=\"#362-Design-Hit-Counter\" class=\"headerlink\" title=\"362. Design Hit Counter\"></a>362. Design Hit Counter</h3><p>因为是统计当时的hit值，所以可以维护一个全局变量hit</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HitCounter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hit</span><span class=\"params\">(self, timestamp)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Record a hit.</span></span><br><span class=\"line\"><span class=\"string\">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.queue <span class=\"keyword\">or</span> self.queue[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] != timestamp:</span><br><span class=\"line\">            self.queue.append([timestamp,<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.queue[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHits</span><span class=\"params\">(self, timestamp)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Return the number of hits in the past 5 minutes.</span></span><br><span class=\"line\"><span class=\"string\">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># move forward</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.queue <span class=\"keyword\">and</span> timestamp - self.queue[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &gt;= <span class=\"number\">300</span>:</span><br><span class=\"line\">            self.count -= self.queue.pop(<span class=\"number\">0</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your HitCounter object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = HitCounter()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.hit(timestamp)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.getHits(timestamp)</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Design系列问题\"><a href=\"#Design系列问题\" class=\"headerlink\" title=\"Design系列问题\"></a>Design系列问题</h1><h2 id=\"高频题\"><a href=\"#高频题\" class=\"headerlink\" title=\"高频题\"></a>高频题</h2><p>这类题基本上都是高频题</p>\n<h3 id=\"146-LRU-Cache\"><a href=\"#146-LRU-Cache\" class=\"headerlink\" title=\"146. LRU Cache\"></a>146. LRU Cache</h3><p>这道题是很高频的题目，主要hint就是用双向链表来实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, k, v)</span>:</span></span><br><span class=\"line\">\t\tself.key = k</span><br><span class=\"line\">\t\tself.val = v</span><br><span class=\"line\">\t\tself.prev = <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\tself.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, capacity)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type capacity: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.capacity = capacity</span><br><span class=\"line\">        self.dic = &#123;&#125;</span><br><span class=\"line\">        self.head = Node(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.tail = Node(<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">        self.head.next = self.tail</span><br><span class=\"line\">        self.tail.prev = self.head</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            n = self.dic[key]</span><br><span class=\"line\">            self._remove(n)</span><br><span class=\"line\">            self._add(n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.val</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: int</span></span><br><span class=\"line\"><span class=\"string\">        :type value: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            self._remove(self.dic[key])</span><br><span class=\"line\">        n = Node(key, value)</span><br><span class=\"line\">        self._add(n)</span><br><span class=\"line\">        <span class=\"comment\"># imp value - node</span></span><br><span class=\"line\">        self.dic[key] = n</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.dic) &gt; self.capacity:</span><br><span class=\"line\">            n = self.head.next</span><br><span class=\"line\">            self._remove(n)</span><br><span class=\"line\">            <span class=\"keyword\">del</span>(self.dic[n.key])</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_add</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        p = self.tail.prev</span><br><span class=\"line\">        p.next = node</span><br><span class=\"line\">        self.tail.prev = node</span><br><span class=\"line\">        node.prev = p</span><br><span class=\"line\">        node.next = self.tail</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_remove</span><span class=\"params\">(self, node)</span>:</span></span><br><span class=\"line\">        p = node.prev</span><br><span class=\"line\">        n = node.next</span><br><span class=\"line\">        p.next = n</span><br><span class=\"line\">        n.prev = p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = LRUCache(capacity)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.get(key)</span></span><br><span class=\"line\"><span class=\"comment\"># obj.put(key,value)</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"155-Min-Stack\"><a href=\"#155-Min-Stack\" class=\"headerlink\" title=\"155. Min Stack\"></a>155. Min Stack</h3><p>这道题就是用stack来存sofar的最小值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(self.stack) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.stack.append((x,x))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            min_sofar = min(x, self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>])</span><br><span class=\"line\">            self.stack.append((x, min_sofar))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack.pop()  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMin</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.getMin()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"716-Max-Stack\"><a href=\"#716-Max-Stack\" class=\"headerlink\" title=\"716. Max Stack\"></a>716. Max Stack</h3><p>与上一道题相类似，区别就是在popMax的时候用临时stack来记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        maxNumber = max(x, self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]) <span class=\"keyword\">if</span> self.stack <span class=\"keyword\">else</span> x</span><br><span class=\"line\">        self.stack.append((x,maxNumber))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack.pop()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peekMax</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">popMax</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        temp = self.stack[<span class=\"number\">-1</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">        tempStack = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.stack[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] != temp:</span><br><span class=\"line\">            tempStack.append(self.stack.pop())</span><br><span class=\"line\">        self.stack.pop()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> tempStack:</span><br><span class=\"line\">            self.push(tempStack.pop()[<span class=\"number\">0</span>])</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MaxStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MaxStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.peekMax()</span></span><br><span class=\"line\"><span class=\"comment\"># param_5 = obj.popMax()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225. Implement Stack using Queues\"></a>225. Implement Stack using Queues</h3><p>在init的时候，每当新元素进来的时候，不断让queue的元素pop出来在加到queue尾，从而index为0 的元素就是最后加进来的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Push element x onto stack.</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue.append(x)</span><br><span class=\"line\">        size = len(self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> size &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.queue.append(self.queue.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            size -= <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes the element on top of the stack and returns that element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get the top element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns whether the stack is empty.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.queue) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your MyStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MyStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232. Implement Queue using Stacks\"></a>232. Implement Queue using Stacks</h3><p>用两个stack，在pop的时候，也是同样的像上一题的操作，加到另外一个stack中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.input = []</span><br><span class=\"line\">        self.output = []</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.input.append(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.output == []):</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(self.input != []):</span><br><span class=\"line\">                self.output.append(self.input.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.input == [] <span class=\"keyword\">and</span> self.output == []</span><br></pre></td></tr></table></figure>\n<h3 id=\"297-Serialize-and-Deserialize-Binary-Tree\"><a href=\"#297-Serialize-and-Deserialize-Binary-Tree\" class=\"headerlink\" title=\"297. Serialize and Deserialize Binary Tree\"></a>297. Serialize and Deserialize Binary Tree</h3><p>这道题就是BFS遍历树，然后BFS解析树，注意index的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Codec</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serialize</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        queue = [root]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node:</span><br><span class=\"line\">                queue.append(node.left)</span><br><span class=\"line\">                queue.append(node.right)</span><br><span class=\"line\">            res.append(str(node.val) <span class=\"keyword\">if</span> node <span class=\"keyword\">else</span> <span class=\"string\">\"#\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># strip left ','</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\",\"</span>.join(res).strip(<span class=\"string\">','</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deserialize</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        :type data: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        nodes = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data.split(<span class=\"string\">\",\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i != <span class=\"string\">'#'</span>:</span><br><span class=\"line\">                nodes.append(TreeNode(i))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                nodes.append(<span class=\"keyword\">None</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = [nodes[<span class=\"number\">0</span>]]</span><br><span class=\"line\">        index = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index &lt; len(nodes) <span class=\"keyword\">and</span> nodes[index]:</span><br><span class=\"line\">                node.left = nodes[index]</span><br><span class=\"line\">                queue.append(nodes[index])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index + <span class=\"number\">1</span> &lt; len(nodes) <span class=\"keyword\">and</span> nodes[index+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                node.right = nodes[index+<span class=\"number\">1</span>]</span><br><span class=\"line\">                queue.append(nodes[index+<span class=\"number\">1</span>])</span><br><span class=\"line\">            index += <span class=\"number\">2</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodes[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Codec object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># codec = Codec()</span></span><br><span class=\"line\"><span class=\"comment\"># codec.deserialize(codec.serialize(root))</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"173-Binary-Search-Tree-Iterator\"><a href=\"#173-Binary-Search-Tree-Iterator\" class=\"headerlink\" title=\"173. Binary Search Tree Iterator\"></a>173. Binary Search Tree Iterator</h3><p>这道题也是高频题，FB面过.注意pushAll的时候是判断root！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a  binary tree node</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BSTIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">        self.pushAll(root)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pushAll</span><span class=\"params\">(self,root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            self.stack.append(root)</span><br><span class=\"line\">            root = root.left</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        node = self.stack.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">        self.pushAll(node.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.val</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your BSTIterator will be called like this:</span></span><br><span class=\"line\"><span class=\"comment\"># i, v = BSTIterator(root), []</span></span><br><span class=\"line\"><span class=\"comment\"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"380-Insert-Delete-GetRandom-O-1\"><a href=\"#380-Insert-Delete-GetRandom-O-1\" class=\"headerlink\" title=\"380. Insert Delete GetRandom O(1)\"></a>380. Insert Delete GetRandom O(1)</h3><p>用dic来记录value和对应的index，从而能保证O（1）时间内删除</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedSet</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.array = []</span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.dic[val] = len(self.array)</span><br><span class=\"line\">        self.array.append(val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># val.index in self.array</span></span><br><span class=\"line\">        index = self.dic[val]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># check not the last</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; len(self.array) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            last = self.array[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            self.dic[last] = index</span><br><span class=\"line\">            self.array[index] = last</span><br><span class=\"line\">            </span><br><span class=\"line\">        self.array.pop()</span><br><span class=\"line\">        <span class=\"keyword\">del</span>(self.dic[val])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get a random element from the set.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.array[random.randint(<span class=\"number\">0</span>, len(self.array)<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = RandomizedSet()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.insert(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.remove(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\"><a href=\"#381-Insert-Delete-GetRandom-O-1-Duplicates-allowed\" class=\"headerlink\" title=\"381. Insert Delete GetRandom O(1) - Duplicates allowed\"></a>381. Insert Delete GetRandom O(1) - Duplicates allowed</h3><p>dic里面的值用set来记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomizedCollection</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.array = []</span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            self.dic[val] = set()</span><br><span class=\"line\">            self.dic[val].add(len(self.array))</span><br><span class=\"line\">            self.array.append(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.dic[val].add(len(self.array))</span><br><span class=\"line\">            self.array.append(val)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove</span><span class=\"params\">(self, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> val <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># val.index in self.array</span></span><br><span class=\"line\">        index = self.dic[val].pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> index &lt; len(self.array) - <span class=\"number\">1</span>:</span><br><span class=\"line\">            </span><br><span class=\"line\">            last = self.array[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            self.array[index] = last</span><br><span class=\"line\">            <span class=\"comment\"># last item delete</span></span><br><span class=\"line\">            <span class=\"comment\"># remove old insert new</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            self.dic[last].remove(len(self.array)<span class=\"number\">-1</span>)</span><br><span class=\"line\">            self.dic[last].add(index)</span><br><span class=\"line\">            </span><br><span class=\"line\">        self.array.pop()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.dic[val]:</span><br><span class=\"line\">            <span class=\"keyword\">del</span>(self.dic[val])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRandom</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get a random element from the set.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.array[random.randint(<span class=\"number\">0</span>, len(self.array)<span class=\"number\">-1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = RandomizedCollection()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.insert(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.remove(val)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Trie类型\"><a href=\"#Trie类型\" class=\"headerlink\" title=\"Trie类型\"></a>Trie类型</h2><h3 id=\"简单构建\"><a href=\"#简单构建\" class=\"headerlink\" title=\"简单构建\"></a>简单构建</h3><p>在程序中需要简单构建一个Trie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trie = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">    t = trie</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> w:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            t[c] = &#123;&#125;</span><br><span class=\"line\">        t = t[c]</span><br><span class=\"line\">    t[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"208-Implement-Trie-Prefix-Tree\"><a href=\"#208-Implement-Trie-Prefix-Tree\" class=\"headerlink\" title=\"208. Implement Trie (Prefix Tree)\"></a>208. Implement Trie (Prefix Tree)</h3><p>基础类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.isword</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># Your Trie object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Trie()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.insert(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.search(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"211-Add-and-Search-Word-Data-structure-design\"><a href=\"#211-Add-and-Search-Word-Data-structure-design\" class=\"headerlink\" title=\"211. Add and Search Word - Data structure design\"></a>211. Add and Search Word - Data structure design</h3><p>如何处理. 的问题，用string的slice来搞，find的递归操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.node = defaultdict(TrieNode)</span><br><span class=\"line\">        self.isWord = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repr(self.node)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDictionary</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addWord</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Adds a word into the data structure.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.node[char]</span><br><span class=\"line\">        curr.isWord = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(self.root, word)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, trie, word)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> word == <span class=\"string\">''</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> trie.isWord</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> word[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trie.node:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.find(trie.node[i], word[<span class=\"number\">1</span>:]):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            child = trie.node.get(word[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.find(child, word[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"642-Design-Search-Autocomplete-System\"><a href=\"#642-Design-Search-Autocomplete-System\" class=\"headerlink\" title=\"642. Design Search Autocomplete System\"></a>642. Design Search Autocomplete System</h3><p>进阶版本 取前三个。很复杂的题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.children = dict()</span><br><span class=\"line\">        self.isEnd = <span class=\"keyword\">False</span></span><br><span class=\"line\">        self.rank = <span class=\"number\">0</span></span><br><span class=\"line\">        self.data  = <span class=\"keyword\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutocompleteSystem</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, sentences, times)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type sentences: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type times: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        self.keyword = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, sentence <span class=\"keyword\">in</span> enumerate(sentences):</span><br><span class=\"line\">            self.addRecord(sentence, times[i])</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addRecord</span><span class=\"params\">(self, word, rank)</span>:</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p.children:</span><br><span class=\"line\">                p.children[char] = TrieNode()</span><br><span class=\"line\">            p = p.children[char]</span><br><span class=\"line\">        p.isEnd = <span class=\"keyword\">True</span>   </span><br><span class=\"line\">        p.data = word</span><br><span class=\"line\">        <span class=\"comment\"># compare</span></span><br><span class=\"line\">        p.rank -= rank</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p.children:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> []</span><br><span class=\"line\">            p = p.children[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.dfs(p)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">            <span class=\"comment\"># find the end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> root.isEnd:</span><br><span class=\"line\">                res.append((root.rank, root.data))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> root.children:</span><br><span class=\"line\">                res.extend(self.dfs(root.children[child]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">input</span><span class=\"params\">(self, c)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type c: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> c != <span class=\"string\">\"#\"</span>:</span><br><span class=\"line\">            self.keyword += c</span><br><span class=\"line\">            res = self.search(self.keyword)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.addWord(self.keyword,<span class=\"number\">1</span>)</span><br><span class=\"line\">            self.keyword = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [item[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sorted(res)[:<span class=\"number\">3</span>]]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your AutocompleteSystem object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = AutocompleteSystem(sentences, times)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.input(c)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一般的题\"><a href=\"#一般的题\" class=\"headerlink\" title=\"一般的题\"></a>一般的题</h2><h3 id=\"281-Zigzag-Iterator\"><a href=\"#281-Zigzag-Iterator\" class=\"headerlink\" title=\"281. Zigzag Iterator\"></a>281. Zigzag Iterator</h3><p>就是正常的来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZigzagIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, v1, v2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        :type v1: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type v2: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.res = []</span><br><span class=\"line\">        pos = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> pos &lt; max(len(v1), len(v2)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pos &lt; len(v1):</span><br><span class=\"line\">                self.res.append(v1[pos])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> pos &lt; len(v2):</span><br><span class=\"line\">                self.res.append(v2[pos])</span><br><span class=\"line\">            pos += <span class=\"number\">1</span></span><br><span class=\"line\">        self.index = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = self.res[self.index]</span><br><span class=\"line\">        self.index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.index &lt; len(self.res)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your ZigzagIterator object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># i, v = ZigzagIterator(v1, v2), []</span></span><br><span class=\"line\"><span class=\"comment\"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"284-Peeking-Iterator\"><a href=\"#284-Peeking-Iterator\" class=\"headerlink\" title=\"284. Peeking Iterator\"></a>284. Peeking Iterator</h3><p>先预存next的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Below is the interface for Iterator, which is already defined for you.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># class Iterator(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, nums):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Initializes an iterator object to the beginning of a list.</span></span><br><span class=\"line\"><span class=\"comment\">#         :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def hasNext(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Returns true if the iteration has more elements.</span></span><br><span class=\"line\"><span class=\"comment\">#         :rtype: bool</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def next(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">#         Returns the next element in the iteration.</span></span><br><span class=\"line\"><span class=\"comment\">#         :rtype: int</span></span><br><span class=\"line\"><span class=\"comment\">#         \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PeekingIterator</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, iterator)</span>:</span></span><br><span class=\"line\">        self.iter = iterator</span><br><span class=\"line\">        self.temp = self.iter.next() <span class=\"keyword\">if</span> self.iter.hasNext() <span class=\"keyword\">else</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.temp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">next</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        ret = self.temp</span><br><span class=\"line\">        self.temp = self.iter.next() <span class=\"keyword\">if</span> self.iter.hasNext() <span class=\"keyword\">else</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasNext</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.temp <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your PeekingIterator object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># iter = PeekingIterator(Iterator(nums))</span></span><br><span class=\"line\"><span class=\"comment\"># while iter.hasNext():</span></span><br><span class=\"line\"><span class=\"comment\">#     val = iter.peek()   # Get the next element but not advance the iterator.</span></span><br><span class=\"line\"><span class=\"comment\">#     iter.next()         # Should return the same value as [val].</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"359-Logger-Rate-Limiter\"><a href=\"#359-Logger-Rate-Limiter\" class=\"headerlink\" title=\"359. Logger Rate Limiter\"></a>359. Logger Rate Limiter</h3><p>window的size为10</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.dic = dict()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shouldPrintMessage</span><span class=\"params\">(self, timestamp, message)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns true if the message should be printed in the given timestamp, otherwise returns false.</span></span><br><span class=\"line\"><span class=\"string\">        If this method returns false, the message will not be printed.</span></span><br><span class=\"line\"><span class=\"string\">        The timestamp is in seconds granularity.</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :type message: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># condition one </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> message <span class=\"keyword\">in</span> self.dic <span class=\"keyword\">and</span> timestamp - self.dic[message] &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.dic[message] = timestamp</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Logger object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Logger()</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.shouldPrintMessage(timestamp,message)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"362-Design-Hit-Counter\"><a href=\"#362-Design-Hit-Counter\" class=\"headerlink\" title=\"362. Design Hit Counter\"></a>362. Design Hit Counter</h3><p>因为是统计当时的hit值，所以可以维护一个全局变量hit</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HitCounter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hit</span><span class=\"params\">(self, timestamp)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Record a hit.</span></span><br><span class=\"line\"><span class=\"string\">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.queue <span class=\"keyword\">or</span> self.queue[<span class=\"number\">-1</span>][<span class=\"number\">0</span>] != timestamp:</span><br><span class=\"line\">            self.queue.append([timestamp,<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.queue[<span class=\"number\">-1</span>][<span class=\"number\">1</span>] += <span class=\"number\">1</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHits</span><span class=\"params\">(self, timestamp)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Return the number of hits in the past 5 minutes.</span></span><br><span class=\"line\"><span class=\"string\">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class=\"line\"><span class=\"string\">        :type timestamp: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># move forward</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> self.queue <span class=\"keyword\">and</span> timestamp - self.queue[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &gt;= <span class=\"number\">300</span>:</span><br><span class=\"line\">            self.count -= self.queue.pop(<span class=\"number\">0</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your HitCounter object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = HitCounter()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.hit(timestamp)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.getHits(timestamp)</span></span><br></pre></td></tr></table></figure>"},{"title":"Google面经不断更新","comments":1,"date":"2017-07-08T23:18:45.000Z","updated":"2017-07-08T23:18:45.000Z","_content":"\n## 把之前准备的Google面经总结一下\n### 持续更新\n.281 Zigzag Iterator  \n用全局变量index记录call next位置，pos记录append位置\n\n```python\nwhile pos < max(len(v1), len(v2)):\n    if pos < len(v1):\n        self.res.append(v1[pos])\n    if pos < len(v2):\n        self.res.append(v2[pos])\n    pos += 1\n```\n\n.298 Binary Tree Longest Consecutive Sequence  \n用BFS（stack添加的时候记录node 和 value）， DFS记录`dfs(self,root, cur, target)`\n\n.163 Missing Range  \n注意最后一个需要curr = upper + 1， 然后其他的情况curr = nums[i] ，getRange（pre+1， cur-1）\n\n·66 Plus one  \n需要注意当进位最后仍为1的时候，digits.insert(0,1)\n\n`346 Moving Average from Data Stream  \n用queue来做\n\n`425 Valid WordSquare  \n每行每列的长度需要保持一致，对应的字符一样words[i][j] == words[j][i]","source":"_posts/Google面经不断更新.md","raw":"---\ntitle: Google面经不断更新\ncomments: true\ndate: 2017-07-08 16:18:45\nupdated: 2017-07-08 16:18:45\ncategories: Leetcode\ntags: [String, BFS, DFS]\n---\n\n## 把之前准备的Google面经总结一下\n### 持续更新\n.281 Zigzag Iterator  \n用全局变量index记录call next位置，pos记录append位置\n\n```python\nwhile pos < max(len(v1), len(v2)):\n    if pos < len(v1):\n        self.res.append(v1[pos])\n    if pos < len(v2):\n        self.res.append(v2[pos])\n    pos += 1\n```\n\n.298 Binary Tree Longest Consecutive Sequence  \n用BFS（stack添加的时候记录node 和 value）， DFS记录`dfs(self,root, cur, target)`\n\n.163 Missing Range  \n注意最后一个需要curr = upper + 1， 然后其他的情况curr = nums[i] ，getRange（pre+1， cur-1）\n\n·66 Plus one  \n需要注意当进位最后仍为1的时候，digits.insert(0,1)\n\n`346 Moving Average from Data Stream  \n用queue来做\n\n`425 Valid WordSquare  \n每行每列的长度需要保持一致，对应的字符一样words[i][j] == words[j][i]","slug":"Google面经不断更新","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hder000em2cas59ft1vy","content":"<h2 id=\"把之前准备的Google面经总结一下\"><a href=\"#把之前准备的Google面经总结一下\" class=\"headerlink\" title=\"把之前准备的Google面经总结一下\"></a>把之前准备的Google面经总结一下</h2><h3 id=\"持续更新\"><a href=\"#持续更新\" class=\"headerlink\" title=\"持续更新\"></a>持续更新</h3><p>.281 Zigzag Iterator<br>用全局变量index记录call next位置，pos记录append位置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> pos &lt; max(len(v1), len(v2)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos &lt; len(v1):</span><br><span class=\"line\">        self.res.append(v1[pos])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos &lt; len(v2):</span><br><span class=\"line\">        self.res.append(v2[pos])</span><br><span class=\"line\">    pos += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>.298 Binary Tree Longest Consecutive Sequence<br>用BFS（stack添加的时候记录node 和 value）， DFS记录<code>dfs(self,root, cur, target)</code></p>\n<p>.163 Missing Range<br>注意最后一个需要curr = upper + 1， 然后其他的情况curr = nums[i] ，getRange（pre+1， cur-1）</p>\n<p>·66 Plus one<br>需要注意当进位最后仍为1的时候，digits.insert(0,1)</p>\n<p>`346 Moving Average from Data Stream<br>用queue来做</p>\n<p>`425 Valid WordSquare<br>每行每列的长度需要保持一致，对应的字符一样words[i][j] == words[j][i]</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"把之前准备的Google面经总结一下\"><a href=\"#把之前准备的Google面经总结一下\" class=\"headerlink\" title=\"把之前准备的Google面经总结一下\"></a>把之前准备的Google面经总结一下</h2><h3 id=\"持续更新\"><a href=\"#持续更新\" class=\"headerlink\" title=\"持续更新\"></a>持续更新</h3><p>.281 Zigzag Iterator<br>用全局变量index记录call next位置，pos记录append位置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> pos &lt; max(len(v1), len(v2)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos &lt; len(v1):</span><br><span class=\"line\">        self.res.append(v1[pos])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pos &lt; len(v2):</span><br><span class=\"line\">        self.res.append(v2[pos])</span><br><span class=\"line\">    pos += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>.298 Binary Tree Longest Consecutive Sequence<br>用BFS（stack添加的时候记录node 和 value）， DFS记录<code>dfs(self,root, cur, target)</code></p>\n<p>.163 Missing Range<br>注意最后一个需要curr = upper + 1， 然后其他的情况curr = nums[i] ，getRange（pre+1， cur-1）</p>\n<p>·66 Plus one<br>需要注意当进位最后仍为1的时候，digits.insert(0,1)</p>\n<p>`346 Moving Average from Data Stream<br>用queue来做</p>\n<p>`425 Valid WordSquare<br>每行每列的长度需要保持一致，对应的字符一样words[i][j] == words[j][i]</p>\n"},{"title":"Heap总结","comments":1,"date":"2017-09-21T04:07:39.000Z","updated":"2018-03-21T04:07:39.000Z","_content":"# heapq--堆数据结构\n\nheapq模块是python的一个标准库，它实现了一个堆数据结构，堆数据结构是一种二叉树。\n\n## 什么是堆数据结构？\n\n官网给出的定义是：\n`\nThis implementation uses arrays for which \nheap[k] <= heap[2*k+1] and heap[k] <= heap[2*k+2]\nfor all k, counting elements from zero.`\n我们可以这样理解：\n堆是完全二叉树或者近似二叉树，它的各个节点的键值都有固定对应的的数字，根节点（即root,最上面起始位置）是0，若父节点为heap[k]，则子节点为heap[2*k+1]和heap[2*k+2]。父节点对应的值总是小于或者等于子节点，称为最小堆。对应的，父节点的值总是大于或者等于子节点，称为最大堆。**在heapq中，使用的是最小堆。**\n\n正因为堆的这种特殊结构，使得通过heapq模块，可以快速获取一个列表的前N个最大(小)值，即Top N。\n\n## 特点 \n这里，可能我们不禁要问，python不是内置了sort方法用来排序么？\n\n现在我们假设一种情景，我们在维护一个列表，并且这个列表在变化，不断有新元素加入，而在任何时候我们可能需要获取里面的Top N，因此我们要求列表始终可以处于已排序状态。\n\n这时候sort方法就显得不那么好用了，因为每次新加入一个元素，我们都要调用一次sort。数据量小时还是可以的，当数据量较大时，效率就会降低，并且python内置的sort方法本身在实现上也不是那么的高效，复杂度是O(NlgN)。\n\n**特别强调，当初我思考了半天，构建heap需要O(N)的复杂度--见算法导论，而heapsort的话，每次操作heappop()是需要lgN的复杂度，而list中有N个元素，所以整体复杂度是O(NlgN)**\n\npython维护了一个堆，使用的存储结构是列表，通过heapq模块来管理、操作这个堆。heapq提供了插入、删除元素的方法，并且保证在插入或删除元素时，所有节点自动调整，保证堆的结构，同时尽量高效，复杂度为O(log n)，在大数据时，效率高于sort排序。\n\n## 常用方法使用\nheapq.heappush(heap, item) 把item添加到heap这个list中  \nheapq.heappop(heap)把堆顶元素弹出\n两种操作的复杂度均为O（logN）\n\n# 题目\n## 215. Kth Largest Element in an Array\n基本操作就好\n\n```python\nT O(Nlgk)\nS O(N)\nimport heapq\nclass Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        heap = []\n        for num in nums:\n            heapq.heappush(heap,num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return heapq.heappop(heap)\n        \n```\n## 347. Top K Frequent Elements\n最基本的题目，只要注意Python中是最小堆就好，由于我们只取前K个元素，所以是klgN\n\n```python\nT O(N + klgN)\nS O(N)\nimport heapq\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        cntDict = collections.defaultdict(int)\n        for i in nums:\n            cntDict[i] += 1\n        cnt_list = []\n        res = []\n        for key in cntDict.keys():\n            heapq.heappush(cnt_list,(-cntDict[key],key))\n        while k:\n            res.append(heapq.heappop(cnt_list)[1])\n            k -= 1\n        return res\n```\n\n## 378. Kth Smallest Element in a Sorted Matrix\nExample:\n\n```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n```\n这道题目当然可以暴力解，就是n^2lgK，不过显然不是题目要求的,通过观察可以发现每一行每一列都是增序排列，所以可以每次只加横行或者纵列。但如何避免重复呢？可以维持一个数组记录已经访问过的点，要是为了节约空间的话，借鉴网上大神的想法，只有当处于第一列时才往下遍历，否则只横向遍历。\n\n```python\n# T O(klgN)\n# S O(N)\nimport heapq\nclass Solution(object):\n    def kthSmallest(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        m, n = len(matrix), len(matrix[0])\n        q = [(matrix[0][0], 0, 0)]\n        # ans = None\n        while k:\n            ans, i, j = heapq.heappop(q)\n            if j == 0 and i + 1 < m:\n                heapq.heappush(q, (matrix[i + 1][j], i + 1, j))\n            if j + 1 < n:\n                heapq.heappush(q, (matrix[i][j + 1], i, j + 1))\n            k -= 1\n        return ans\n```","source":"_posts/Heap总结.md","raw":"---\ntitle: Heap总结\ncomments: true\ndate: 2017-09-20 21:07:39\nupdated: 2018-03-20 21:07:39\ncategories: [heap]\ntags: Leetcode\n---\n# heapq--堆数据结构\n\nheapq模块是python的一个标准库，它实现了一个堆数据结构，堆数据结构是一种二叉树。\n\n## 什么是堆数据结构？\n\n官网给出的定义是：\n`\nThis implementation uses arrays for which \nheap[k] <= heap[2*k+1] and heap[k] <= heap[2*k+2]\nfor all k, counting elements from zero.`\n我们可以这样理解：\n堆是完全二叉树或者近似二叉树，它的各个节点的键值都有固定对应的的数字，根节点（即root,最上面起始位置）是0，若父节点为heap[k]，则子节点为heap[2*k+1]和heap[2*k+2]。父节点对应的值总是小于或者等于子节点，称为最小堆。对应的，父节点的值总是大于或者等于子节点，称为最大堆。**在heapq中，使用的是最小堆。**\n\n正因为堆的这种特殊结构，使得通过heapq模块，可以快速获取一个列表的前N个最大(小)值，即Top N。\n\n## 特点 \n这里，可能我们不禁要问，python不是内置了sort方法用来排序么？\n\n现在我们假设一种情景，我们在维护一个列表，并且这个列表在变化，不断有新元素加入，而在任何时候我们可能需要获取里面的Top N，因此我们要求列表始终可以处于已排序状态。\n\n这时候sort方法就显得不那么好用了，因为每次新加入一个元素，我们都要调用一次sort。数据量小时还是可以的，当数据量较大时，效率就会降低，并且python内置的sort方法本身在实现上也不是那么的高效，复杂度是O(NlgN)。\n\n**特别强调，当初我思考了半天，构建heap需要O(N)的复杂度--见算法导论，而heapsort的话，每次操作heappop()是需要lgN的复杂度，而list中有N个元素，所以整体复杂度是O(NlgN)**\n\npython维护了一个堆，使用的存储结构是列表，通过heapq模块来管理、操作这个堆。heapq提供了插入、删除元素的方法，并且保证在插入或删除元素时，所有节点自动调整，保证堆的结构，同时尽量高效，复杂度为O(log n)，在大数据时，效率高于sort排序。\n\n## 常用方法使用\nheapq.heappush(heap, item) 把item添加到heap这个list中  \nheapq.heappop(heap)把堆顶元素弹出\n两种操作的复杂度均为O（logN）\n\n# 题目\n## 215. Kth Largest Element in an Array\n基本操作就好\n\n```python\nT O(Nlgk)\nS O(N)\nimport heapq\nclass Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        heap = []\n        for num in nums:\n            heapq.heappush(heap,num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return heapq.heappop(heap)\n        \n```\n## 347. Top K Frequent Elements\n最基本的题目，只要注意Python中是最小堆就好，由于我们只取前K个元素，所以是klgN\n\n```python\nT O(N + klgN)\nS O(N)\nimport heapq\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        cntDict = collections.defaultdict(int)\n        for i in nums:\n            cntDict[i] += 1\n        cnt_list = []\n        res = []\n        for key in cntDict.keys():\n            heapq.heappush(cnt_list,(-cntDict[key],key))\n        while k:\n            res.append(heapq.heappop(cnt_list)[1])\n            k -= 1\n        return res\n```\n\n## 378. Kth Smallest Element in a Sorted Matrix\nExample:\n\n```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\nreturn 13.\n```\n这道题目当然可以暴力解，就是n^2lgK，不过显然不是题目要求的,通过观察可以发现每一行每一列都是增序排列，所以可以每次只加横行或者纵列。但如何避免重复呢？可以维持一个数组记录已经访问过的点，要是为了节约空间的话，借鉴网上大神的想法，只有当处于第一列时才往下遍历，否则只横向遍历。\n\n```python\n# T O(klgN)\n# S O(N)\nimport heapq\nclass Solution(object):\n    def kthSmallest(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        m, n = len(matrix), len(matrix[0])\n        q = [(matrix[0][0], 0, 0)]\n        # ans = None\n        while k:\n            ans, i, j = heapq.heappop(q)\n            if j == 0 and i + 1 < m:\n                heapq.heappush(q, (matrix[i + 1][j], i + 1, j))\n            if j + 1 < n:\n                heapq.heappush(q, (matrix[i][j + 1], i, j + 1))\n            k -= 1\n        return ans\n```","slug":"Heap总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdet000im2cahyn82wr8","content":"<h1 id=\"heapq–堆数据结构\"><a href=\"#heapq–堆数据结构\" class=\"headerlink\" title=\"heapq–堆数据结构\"></a>heapq–堆数据结构</h1><p>heapq模块是python的一个标准库，它实现了一个堆数据结构，堆数据结构是一种二叉树。</p>\n<h2 id=\"什么是堆数据结构？\"><a href=\"#什么是堆数据结构？\" class=\"headerlink\" title=\"什么是堆数据结构？\"></a>什么是堆数据结构？</h2><p>官网给出的定义是：<br><code>This implementation uses arrays for which \nheap[k] &lt;= heap[2*k+1] and heap[k] &lt;= heap[2*k+2]\nfor all k, counting elements from zero.</code><br>我们可以这样理解：<br>堆是完全二叉树或者近似二叉树，它的各个节点的键值都有固定对应的的数字，根节点（即root,最上面起始位置）是0，若父节点为heap[k]，则子节点为heap[2<em>k+1]和heap[2</em>k+2]。父节点对应的值总是小于或者等于子节点，称为最小堆。对应的，父节点的值总是大于或者等于子节点，称为最大堆。<strong>在heapq中，使用的是最小堆。</strong></p>\n<p>正因为堆的这种特殊结构，使得通过heapq模块，可以快速获取一个列表的前N个最大(小)值，即Top N。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>这里，可能我们不禁要问，python不是内置了sort方法用来排序么？</p>\n<p>现在我们假设一种情景，我们在维护一个列表，并且这个列表在变化，不断有新元素加入，而在任何时候我们可能需要获取里面的Top N，因此我们要求列表始终可以处于已排序状态。</p>\n<p>这时候sort方法就显得不那么好用了，因为每次新加入一个元素，我们都要调用一次sort。数据量小时还是可以的，当数据量较大时，效率就会降低，并且python内置的sort方法本身在实现上也不是那么的高效，复杂度是O(NlgN)。</p>\n<p><strong>特别强调，当初我思考了半天，构建heap需要O(N)的复杂度–见算法导论，而heapsort的话，每次操作heappop()是需要lgN的复杂度，而list中有N个元素，所以整体复杂度是O(NlgN)</strong></p>\n<p>python维护了一个堆，使用的存储结构是列表，通过heapq模块来管理、操作这个堆。heapq提供了插入、删除元素的方法，并且保证在插入或删除元素时，所有节点自动调整，保证堆的结构，同时尽量高效，复杂度为O(log n)，在大数据时，效率高于sort排序。</p>\n<h2 id=\"常用方法使用\"><a href=\"#常用方法使用\" class=\"headerlink\" title=\"常用方法使用\"></a>常用方法使用</h2><p>heapq.heappush(heap, item) 把item添加到heap这个list中<br>heapq.heappop(heap)把堆顶元素弹出<br>两种操作的复杂度均为O（logN）</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"215-Kth-Largest-Element-in-an-Array\"><a href=\"#215-Kth-Largest-Element-in-an-Array\" class=\"headerlink\" title=\"215. Kth Largest Element in an Array\"></a>215. Kth Largest Element in an Array</h2><p>基本操作就好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(Nlgk)</span><br><span class=\"line\">S O(N)</span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        heap = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            heapq.heappush(heap,num)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(heap) &gt; k:</span><br><span class=\"line\">                heapq.heappop(heap)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heapq.heappop(heap)</span><br></pre></td></tr></table></figure>\n<h2 id=\"347-Top-K-Frequent-Elements\"><a href=\"#347-Top-K-Frequent-Elements\" class=\"headerlink\" title=\"347. Top K Frequent Elements\"></a>347. Top K Frequent Elements</h2><p>最基本的题目，只要注意Python中是最小堆就好，由于我们只取前K个元素，所以是klgN</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(N + klgN)</span><br><span class=\"line\">S O(N)</span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">topKFrequent</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        cntDict = collections.defaultdict(int)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            cntDict[i] += <span class=\"number\">1</span></span><br><span class=\"line\">        cnt_list = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> cntDict.keys():</span><br><span class=\"line\">            heapq.heappush(cnt_list,(-cntDict[key],key))</span><br><span class=\"line\">        <span class=\"keyword\">while</span> k:</span><br><span class=\"line\">            res.append(heapq.heappop(cnt_list)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            k -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"378-Kth-Smallest-Element-in-a-Sorted-Matrix\"><a href=\"#378-Kth-Smallest-Element-in-a-Sorted-Matrix\" class=\"headerlink\" title=\"378. Kth Smallest Element in a Sorted Matrix\"></a>378. Kth Smallest Element in a Sorted Matrix</h2><p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">   [ 1,  5,  9],</span><br><span class=\"line\">   [10, 11, 13],</span><br><span class=\"line\">   [12, 13, 15]</span><br><span class=\"line\">],</span><br><span class=\"line\">k = 8,</span><br><span class=\"line\"></span><br><span class=\"line\">return 13.</span><br></pre></td></tr></table></figure>\n<p>这道题目当然可以暴力解，就是n^2lgK，不过显然不是题目要求的,通过观察可以发现每一行每一列都是增序排列，所以可以每次只加横行或者纵列。但如何避免重复呢？可以维持一个数组记录已经访问过的点，要是为了节约空间的话，借鉴网上大神的想法，只有当处于第一列时才往下遍历，否则只横向遍历。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># T O(klgN)</span></span><br><span class=\"line\"><span class=\"comment\"># S O(N)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(self, matrix, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m, n = len(matrix), len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        q = [(matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"number\">0</span>, <span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># ans = None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> k:</span><br><span class=\"line\">            ans, i, j = heapq.heappop(q)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i + <span class=\"number\">1</span> &lt; m:</span><br><span class=\"line\">                heapq.heappush(q, (matrix[i + <span class=\"number\">1</span>][j], i + <span class=\"number\">1</span>, j))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt; n:</span><br><span class=\"line\">                heapq.heappush(q, (matrix[i][j + <span class=\"number\">1</span>], i, j + <span class=\"number\">1</span>))</span><br><span class=\"line\">            k -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"heapq–堆数据结构\"><a href=\"#heapq–堆数据结构\" class=\"headerlink\" title=\"heapq–堆数据结构\"></a>heapq–堆数据结构</h1><p>heapq模块是python的一个标准库，它实现了一个堆数据结构，堆数据结构是一种二叉树。</p>\n<h2 id=\"什么是堆数据结构？\"><a href=\"#什么是堆数据结构？\" class=\"headerlink\" title=\"什么是堆数据结构？\"></a>什么是堆数据结构？</h2><p>官网给出的定义是：<br><code>This implementation uses arrays for which \nheap[k] &lt;= heap[2*k+1] and heap[k] &lt;= heap[2*k+2]\nfor all k, counting elements from zero.</code><br>我们可以这样理解：<br>堆是完全二叉树或者近似二叉树，它的各个节点的键值都有固定对应的的数字，根节点（即root,最上面起始位置）是0，若父节点为heap[k]，则子节点为heap[2<em>k+1]和heap[2</em>k+2]。父节点对应的值总是小于或者等于子节点，称为最小堆。对应的，父节点的值总是大于或者等于子节点，称为最大堆。<strong>在heapq中，使用的是最小堆。</strong></p>\n<p>正因为堆的这种特殊结构，使得通过heapq模块，可以快速获取一个列表的前N个最大(小)值，即Top N。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>这里，可能我们不禁要问，python不是内置了sort方法用来排序么？</p>\n<p>现在我们假设一种情景，我们在维护一个列表，并且这个列表在变化，不断有新元素加入，而在任何时候我们可能需要获取里面的Top N，因此我们要求列表始终可以处于已排序状态。</p>\n<p>这时候sort方法就显得不那么好用了，因为每次新加入一个元素，我们都要调用一次sort。数据量小时还是可以的，当数据量较大时，效率就会降低，并且python内置的sort方法本身在实现上也不是那么的高效，复杂度是O(NlgN)。</p>\n<p><strong>特别强调，当初我思考了半天，构建heap需要O(N)的复杂度–见算法导论，而heapsort的话，每次操作heappop()是需要lgN的复杂度，而list中有N个元素，所以整体复杂度是O(NlgN)</strong></p>\n<p>python维护了一个堆，使用的存储结构是列表，通过heapq模块来管理、操作这个堆。heapq提供了插入、删除元素的方法，并且保证在插入或删除元素时，所有节点自动调整，保证堆的结构，同时尽量高效，复杂度为O(log n)，在大数据时，效率高于sort排序。</p>\n<h2 id=\"常用方法使用\"><a href=\"#常用方法使用\" class=\"headerlink\" title=\"常用方法使用\"></a>常用方法使用</h2><p>heapq.heappush(heap, item) 把item添加到heap这个list中<br>heapq.heappop(heap)把堆顶元素弹出<br>两种操作的复杂度均为O（logN）</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"215-Kth-Largest-Element-in-an-Array\"><a href=\"#215-Kth-Largest-Element-in-an-Array\" class=\"headerlink\" title=\"215. Kth Largest Element in an Array\"></a>215. Kth Largest Element in an Array</h2><p>基本操作就好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(Nlgk)</span><br><span class=\"line\">S O(N)</span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        heap = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            heapq.heappush(heap,num)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(heap) &gt; k:</span><br><span class=\"line\">                heapq.heappop(heap)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heapq.heappop(heap)</span><br></pre></td></tr></table></figure>\n<h2 id=\"347-Top-K-Frequent-Elements\"><a href=\"#347-Top-K-Frequent-Elements\" class=\"headerlink\" title=\"347. Top K Frequent Elements\"></a>347. Top K Frequent Elements</h2><p>最基本的题目，只要注意Python中是最小堆就好，由于我们只取前K个元素，所以是klgN</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(N + klgN)</span><br><span class=\"line\">S O(N)</span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">topKFrequent</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        cntDict = collections.defaultdict(int)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            cntDict[i] += <span class=\"number\">1</span></span><br><span class=\"line\">        cnt_list = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> cntDict.keys():</span><br><span class=\"line\">            heapq.heappush(cnt_list,(-cntDict[key],key))</span><br><span class=\"line\">        <span class=\"keyword\">while</span> k:</span><br><span class=\"line\">            res.append(heapq.heappop(cnt_list)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            k -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"378-Kth-Smallest-Element-in-a-Sorted-Matrix\"><a href=\"#378-Kth-Smallest-Element-in-a-Sorted-Matrix\" class=\"headerlink\" title=\"378. Kth Smallest Element in a Sorted Matrix\"></a>378. Kth Smallest Element in a Sorted Matrix</h2><p>Example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [</span><br><span class=\"line\">   [ 1,  5,  9],</span><br><span class=\"line\">   [10, 11, 13],</span><br><span class=\"line\">   [12, 13, 15]</span><br><span class=\"line\">],</span><br><span class=\"line\">k = 8,</span><br><span class=\"line\"></span><br><span class=\"line\">return 13.</span><br></pre></td></tr></table></figure>\n<p>这道题目当然可以暴力解，就是n^2lgK，不过显然不是题目要求的,通过观察可以发现每一行每一列都是增序排列，所以可以每次只加横行或者纵列。但如何避免重复呢？可以维持一个数组记录已经访问过的点，要是为了节约空间的话，借鉴网上大神的想法，只有当处于第一列时才往下遍历，否则只横向遍历。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># T O(klgN)</span></span><br><span class=\"line\"><span class=\"comment\"># S O(N)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kthSmallest</span><span class=\"params\">(self, matrix, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type matrix: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        m, n = len(matrix), len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        q = [(matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"number\">0</span>, <span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># ans = None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> k:</span><br><span class=\"line\">            ans, i, j = heapq.heappop(q)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == <span class=\"number\">0</span> <span class=\"keyword\">and</span> i + <span class=\"number\">1</span> &lt; m:</span><br><span class=\"line\">                heapq.heappush(q, (matrix[i + <span class=\"number\">1</span>][j], i + <span class=\"number\">1</span>, j))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt; n:</span><br><span class=\"line\">                heapq.heappush(q, (matrix[i][j + <span class=\"number\">1</span>], i, j + <span class=\"number\">1</span>))</span><br><span class=\"line\">            k -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>"},{"title":"Hexo配置","comments":1,"date":"2017-04-21T03:50:04.000Z","updated":"2017-04-21T22:01:04.000Z","_content":"# 部署\n## Hexo原生配置\n```bash\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n## Next主题\n```bash\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\nMore info: [NexT](http://theme-next.iissnan.com/getting-started.html)\n## 进阶配置\n### 更新时间\n### 本地搜索\nMore info: [More](http://wuchenxu.com/categories/hexo/)\n```bash\n$ hexo g deploy -d\n```\n\n","source":"_posts/Hexo配置-2.md","raw":"---\ntitle: Hexo配置\ncomments: true\ndate: 2017-04-20 20:50:04\nupdated: 2017-04-21 15:01:04\ncategories: Technology\ntags: 配置\n---\n# 部署\n## Hexo原生配置\n```bash\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n## Next主题\n```bash\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\nMore info: [NexT](http://theme-next.iissnan.com/getting-started.html)\n## 进阶配置\n### 更新时间\n### 本地搜索\nMore info: [More](http://wuchenxu.com/categories/hexo/)\n```bash\n$ hexo g deploy -d\n```\n\n","slug":"Hexo配置-2","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdeu000km2catwzrr4r3","content":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"Hexo原生配置\"><a href=\"#Hexo原生配置\" class=\"headerlink\" title=\"Hexo原生配置\"></a>Hexo原生配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT</a></p>\n<h2 id=\"进阶配置\"><a href=\"#进阶配置\" class=\"headerlink\" title=\"进阶配置\"></a>进阶配置</h2><h3 id=\"更新时间\"><a href=\"#更新时间\" class=\"headerlink\" title=\"更新时间\"></a>更新时间</h3><h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>More info: <a href=\"http://wuchenxu.com/categories/hexo/\" target=\"_blank\" rel=\"noopener\">More</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g deploy <span class=\"_\">-d</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h1><h2 id=\"Hexo原生配置\"><a href=\"#Hexo原生配置\" class=\"headerlink\" title=\"Hexo原生配置\"></a>Hexo原生配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> your-hexo-site</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">NexT</a></p>\n<h2 id=\"进阶配置\"><a href=\"#进阶配置\" class=\"headerlink\" title=\"进阶配置\"></a>进阶配置</h2><h3 id=\"更新时间\"><a href=\"#更新时间\" class=\"headerlink\" title=\"更新时间\"></a>更新时间</h3><h3 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h3><p>More info: <a href=\"http://wuchenxu.com/categories/hexo/\" target=\"_blank\" rel=\"noopener\">More</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g deploy <span class=\"_\">-d</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"Indeed面试总结","comments":1,"date":"2017-10-19T20:11:15.000Z","updated":"2017-10-19T20:11:15.000Z","_content":"# 流程\nHR联系-> 确认电话面试时间-> 电话面试 -> 后续跟进（move on fail）\nData Engineer\n\n# 参考\n1. 易梦前尘前辈的地里帖子 [链接](http://www.1point3acres.com/bbs/thread-223228-1-1.html)\n2. Github总结 [链接] (https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed)\n<!--more-->\n# 题目\n当时根据地里的总结了一下题目，但是电话面试的时候还是出了一道我似乎见过的但是没有复习到题目，直接给出了brute force解，优化的时候有点紧张就没有答上来....就最后跪了\n## UnrolledLinked List\n\n```python\nclass Node(object):\n\tdef __init__(self, array):\n\t\tself.array = array\n\t\tself.len = len(self.array)\n\t\twhile len(self.array) < 5:\n\t\t\tself.array.append(' ')\n\t\t\n\nclass LinkedList(object):\n\tdef __init__(self, head):\n\t\tself.head = head\n\t\tself.next = None\n\t\tself.len = head.len\n\n\ndef get(head, index):\n\tif index < 0:\n\t\treturn ''\n\tcur = head\n\twhile cur and index:\n\t\tif index >= 5: # cur.len\n\t\t\tindex -= 5\n\t\telse:\n\t\t\treturn cur.head.array[index]\n\t\tcur = cur.next\n\treturn ''\n\ndef insert(head, index, char):\n\tif index < 0:\n\t\treturn \n\tcur = head\n\twhile cur and index:\n\t\tif index >= 5:\n\t\t\tindex -= 5\n\t\telse:\n\t\t\tif cur.len == 5:\n\t\t\t\tnewNode = Node([cur.head.array[-1]])\n\t\t\t\tnewlist = LinkedList(newNode)\n\t\t\t\tcur.head.array[4] = char\n\t\t\telse:\n\t\t\t\tlength = cur.len\n\t\t\t\tfor i in range(length+1,index,-1):\n\t\t\t\t\tcur.head.array[i] = cur.head.array[i-1]\n\t\t\t\tcur.head.array[index] = char \n\t\t\t\treturn cur.head.array\n\t\t\t#break\n\t\tprev = cur\n\t\tcur = cur.next\n\tif not cur:\n\t\tnode = Node([char])\n\t\t\n\t\tnewlist = LinkedList(node)\n\t\tprev.next = newlist\n\t\treturn newlist.head.array\n\t#return cur.head.array\nn1 = Node(['a','t','y'])\nn2 = Node(['r','i','p'])\nl1 = LinkedList(n1)\nl2 = LinkedList(n2)\nl1.next = l2\n\n\nprint get(l1, 2)\nprint insert(l1,1,'c')\n```\n\n## Dice Sum\n\n```python\nimport math\n# O(6*m)\n# O(mn)\ndef helper(dice, target, memo):\n\tres = 0\n\t# base case\n\tif dice == 0:\n\t\tif target == 0:\n\t\t\treturn 1\n\n\tif target > 6 * dice or target < dice:\n\t\treturn 0\n\n\tif memo[dice][target]:\n\t\treturn memo[dice][target]\n\n\tfor i in range(1,7):\n\t\tres += helper(dice-1, target-i, memo)\n\n\tmemo[dice][target] = res\n\treturn res\n\ndef dicesum(dice, target):\n\t# dice --- number of dice\n\t# target --- int\n\n\t# base case\n\tif dice < 1 or target < dice or target > 6* dice:\n\t\treturn 0.0\n\ttotal = int(math.pow(6,dice))\n\n\tmemo = [[0 for _ in range(target+1)] for _ in range(dice+1)]\n\n\tcount = helper(dice, target, memo)\n\n\treturn float(count) / total\n\nprint dicesum(2,4)\n```\n\n## Expire Time\n\n```python\nfrom collections import OrderedDict\nimport time\n\nclass expireDict(object):\n\tdef __init__(self):\n\t\tself.key = \"\"\n\t\tself.value = \"\"\n\t\tself.regular_dict = dict()\n\t\tself.ordered_dict = OrderedDict()\n\n\tdef put(self, key, value,duration):\n\t\tself.regular_dict[key] = value\n\t\tticks = time.time()\n\t\tself.ordered_dict[str(ticks+duration)] = key\n\t\tself.check()\n\n\tdef get(self, key):\n\t\tself.check()\n\t\tif key not in self.regular_dict:\n\t\t\treturn None\n\t\telse:\n\t\t\treturn self.regular_dict[key]\n\n\tdef check(self):\n\t\tticks = time.time()\n\t\tfor timestamp in self.ordered_dict:\n\t\t\tkey = self.ordered_dict[timestamp]\n\t\t\tif ticks - float(timestamp) > 0:\n\t\t\t\tdel(self.ordered_dict[timestamp])\n\t\t\t\tdel(self.regular_dict[key])\n\t\t\t\n\t\t\n\n# T = expireDict()\n# T.put('A',100,1)\n# time.sleep(0.6)\n# print T.ordered_dict\n# T.put('B',200,1)\n# time.sleep(0.6)\n# print T.ordered_dict\n# T.put('C',300,1)\n# time.sleep(0.1)\n# print T.ordered_dict\n# T.put('D',400,1)\n# time.sleep(0.1)\n# print T.ordered_dict\n# print T.get('D')\n# print T.ordered_dict\n\n# print T.get('A')\n```\n\n## Find Peak Element\n\n```python\ndef findPeakElement(nums): \n\t# O (lgN)\n\t# O(1)\n\tl = 0\n\tr = len(nums) - 1\n\twhile l < r :\n\t\tmid = l + (r - l) / 2\n\t\tif nums[mid] > nums[mid+1]:\n\t\t\tr = mid\n\t\telse:\n\t\t\tl = mid + 1\n\treturn l\nprint findPeakElement([1,2,3,4,1])\n```\n\n## Git relate question\n\n```python\nclass GitNode(object):\n\t\"\"\"docstring for ClassName\"\"\"\n\tdef __init__(self,id, parent):\n\t\tself.id = id\n\t\tself.parent = parent\n\ndef findAllCommits(node):\n\tres = []\n\tqueue = [node]\n\tvisited = set()\n\tvisited.add(node.id)\n\n\twhile queue:\n\t\tcur = queue.pop(0)\n\t\tres.append(cur.id)\n\t\tfor par in cur.parent:\n\n\t\t\tif par.id not in visited:\n\t\t\t\tqueue.append(par)\n\t\t\t\tvisited.add(par.id)\n\treturn res\n\ng1 = GitNode(1,[])\ng2 = GitNode(2,[g1])\ng3 = GitNode(3,[g2])\ng4 = GitNode(4,[g1])\nprint findAllCommits(g3)\n\ndef findLCA(node1, node2):\n\t# O(V+E)\n\t# visit every node and for each node needs to visit each edge\n\t# O(N)\n\t# create queue, each node enter \n\tif not node1 or not node2:\n\t\treturn None\n\n\tqueue1 = [node1]\n\tqueue2 = [node2]\n\n\tset1 = set()\n\tset1.add(node1.id)\n\tset2 = set()\n\tset2.add(node2.id)\n\n\twhile queue1 and queue2:\n\t\tsize1 = len(queue1)\n\t\tsize2 = len(queue2)\n\t\twhile size1:\n\t\t\tcur = queue1.pop(0)\n\t\t\tif cur.id in set2:\n\t\t\t\treturn cur.id\n\t\t\tset1.add(cur.id)\n\t\t\tfor par in cur.parent:\n\t\t\t\tqueue1.append(par)\n\t\t\t\tset1.add(par.id)\n\t\t\tsize1 -= 1\n\t\twhile size2:\n\t\t\tcur = queue2.pop(0)\n\t\t\tif cur.id in set1:\n\t\t\t\treturn cur.id\n\t\t\tset2.add(cur.id)\n\t\t\tfor par in cur.parent:\n\t\t\t\tqueue2.append(par)\n\t\t\t\tset2.add(par.id)\n\t\t\tsize2 -= 1\n\treturn None\n\nprint findLCA(g2, g4)\n```\n\n## Merge List\n\n```python\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # O(N)\n        # O(1)\n        dummy = ListNode(-1)\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        if l1:\n            curr.next = l1\n        else:\n            curr.next = l2\n        return dummy.next\n\nimport heapq\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        # O(Nlogk)\n        # O(N)\n        dummy = ListNode(0)\n        curr = dummy\n        pq = []\n        for node in lists:\n            if node: ## empty\n                heapq.heappush(pq,(node.val, node))\n        while pq:\n            curr.next = heapq.heappop(pq)[1]\n            curr = curr.next\n            if curr.next:\n                heapq.heappush(pq,(curr.next.val, curr.next))\n        return dummy.next\n```\n\n## Range Summary\n\n```python\ndef rangePrint(nums):\n\t# O(n)\n\t# O(1)\n\tres = []\n\tif not nums:\n\t\treturn res\n\tori = 0\n\tpreVal = nums[0]\n\n\tfor i in range(1, len(nums)):\n\t\tif nums[i] == preVal+1:\n\t\t\tpreVal = nums[i]\n\t\tif nums[i] == preVal:\n\t\t\tcontinue\n\t\telse:\n\t\t\tif i - ori == 1:\n\t\t\t\tres.append(str(nums[ori]))\n\t\t\telse:\n\t\t\t\tif nums[ori] == preVal:\n\t\t\t\t\tres.append(str(nums[ori]))\n\t\t\t\telse:\n\t\t\t\t\ttemp = str(nums[ori]) + \"->\" + str(preVal)\n\t\t\t\t\tres.append(temp)\n\t\t\tori = i\n\t\t\tpreVal = nums[i]\n\tif ori +1 != len(nums):\n\t\tres.append(str(ori)+\"->\"+str(nums[-1]))\t\n\telse:\n\t\tres.append(str(nums[-1]))\n\treturn res\n\nprint rangePrint([1,2,3,4,5,5,7,7,8,9,11])\n\ndef rangesummary2(nums):\n\t# O(nlgn)\n\tdef helper(nums, l, r):\n\t\twhile l +1 < r:\n\t\t\tm = (l+r)/2\n\t\t\tif nums[m] - nums[l] == m - l:\n\t\t\t\tl = m\n\t\t\telse:\n\t\t\t\tr = m\n\t\treturn l\n\tres = []\n\ti = 0\n\n\twhile i < len(nums):\n\t\tk = helper(nums, i, len(nums))\n\n\t\tif i != k:\n\t\t\tres.append(str(nums[i])+\"->\"+str(nums[k]))\n\t\telse:\n\t\t\tres.append(str(nums[i]))\n\t\ti = k+1\n\treturn res\nprint rangesummary2([1,2,3,4,4,5,6,8])\n```\n\n## Rearrange Lists\n\n```python \n# [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -> [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]\n# This is not a unique solution; [ [\"a\", \"b\"], [\"a\", \"b\"], [\"a\", \"c\"] ] would also be a valid output. You only need to return one valid output.\n# Order does not matter in any way for either the input or the output.\n# Your solution should minimize the number of inner lists. \n# For example: \n# [ [\"a\"], [\"a\"], [\"b\"] ] would not be a correct solution for [\"a\", \"a\", \"b\"].\n# The correct solution would be [ [\"a\", \"b\"], [\"a\"] ]\n\n\n\n# rearrange the strings into a list of lists of strings where each inner list contains no duplicates\n# [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -> [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]\nfrom collections import defaultdict\ndef func(s):\n\tres = [[]]\n\tindex = [0 for _ in range(26)]\n\tfor char in s:\n\t\tif len(res) <=index[ord(char) - 97]:\n\t\t\ttemp = []\n\t\t\tres.append(temp)\n\t\tres[index[ord(char) - 97]].append(char)\n\t\tindex[ord(char) - 97] += 1\n\n\t\n\treturn res\nprint func([\"a\", \"a\", \"b\"])\n```\n\n## Reverse String\n\n```python\ndef reverse_a_string_more_slowly(a_string):\n    new_strings = []\n    index = len(a_string)\n    while index:\n        index -= 1                       \n        new_strings.append(a_string[index])\n    return ''.join(new_strings)\n\ndef reverse_a_string_slowly(a_string):\n    new_string = ''\n    index = len(a_string)\n    while index:\n        index -= 1                    # index = index - 1\n        new_string += a_string[index] # new_string = new_string + character\n    return new_string\n\ndef reverseWords(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return ''\n    li = s.strip().split()\n    print li\n    res = []\n    for each in range(len(li)-1,-1,-1):\n        res.append(li[each])\n    return ' '.join(res)\nprint reverseWords('  a  b ')\n```\n\n## shortest word distance\n\n```python\nclass Solution(object):\n    \n\n    def shortestDistance1(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(1)\n        p1, p2 = -1, -1\n        res = len(words)\n        for i in range(len(words)):\n            if words[i] == word1:\n                p1 = i\n            if words[i] == word2:\n                p2 = i\n            if p1!=-1 and p2 != -1:\n                temp = abs(p1-p2)\n                res = min(res, temp)\n        return res\n        \n    def shortestWordDistance3(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(1)\n        p1, p2 = -len(words), -1\n        res = len(words)\n        for i in range(len(words)):\n            if word1 != word2:\n                if words[i] == word1:\n                    p1 = i\n                if words[i] == word2:\n                    p2 = i\n                if p1!=-1 and p2 != -1:\n                    temp = abs(p1-p2)\n                    res = min(res, temp)\n            else:\n                if words[i] == word1:\n                    res = min(res, abs(p1 - i))\n                    p1 = i\n        return res\n        \n \nfrom collections import defaultdict\nclass WordDistance(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        self.map = defaultdict(list)\n        for i in range(len(words)):\n            self.map[words[i]] += [i]\n\n    def shortest(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(n)\n        l1 = self.map[word1]\n        l2 = self.map[word2]\n        if l1[0]>l2[0]:\n            l1,l2 = l2, l1\n        p1 = 0\n        p2 = 0\n        res = float('inf')\n        while p1 < len(l1) and p2 < len(l2):\n            temp = abs(l1[p1]- l2[p2])\n            res = min(temp, res)\n            if l1[p1] < l2[p2]:\n                p1 +=1\n            else:\n                p2 += 1\n        return res\n        \n\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance(words)\n# param_1 = obj.shortest(word1,word2)\n```","source":"_posts/Indeed面试总结.md","raw":"---\ntitle: Indeed面试总结\ncomments: true\ndate: 2017-10-19 13:11:15\nupdated: 2017-10-19 13:11:15\ncategories: Interview\ntags: Indeed\n---\n# 流程\nHR联系-> 确认电话面试时间-> 电话面试 -> 后续跟进（move on fail）\nData Engineer\n\n# 参考\n1. 易梦前尘前辈的地里帖子 [链接](http://www.1point3acres.com/bbs/thread-223228-1-1.html)\n2. Github总结 [链接] (https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed)\n<!--more-->\n# 题目\n当时根据地里的总结了一下题目，但是电话面试的时候还是出了一道我似乎见过的但是没有复习到题目，直接给出了brute force解，优化的时候有点紧张就没有答上来....就最后跪了\n## UnrolledLinked List\n\n```python\nclass Node(object):\n\tdef __init__(self, array):\n\t\tself.array = array\n\t\tself.len = len(self.array)\n\t\twhile len(self.array) < 5:\n\t\t\tself.array.append(' ')\n\t\t\n\nclass LinkedList(object):\n\tdef __init__(self, head):\n\t\tself.head = head\n\t\tself.next = None\n\t\tself.len = head.len\n\n\ndef get(head, index):\n\tif index < 0:\n\t\treturn ''\n\tcur = head\n\twhile cur and index:\n\t\tif index >= 5: # cur.len\n\t\t\tindex -= 5\n\t\telse:\n\t\t\treturn cur.head.array[index]\n\t\tcur = cur.next\n\treturn ''\n\ndef insert(head, index, char):\n\tif index < 0:\n\t\treturn \n\tcur = head\n\twhile cur and index:\n\t\tif index >= 5:\n\t\t\tindex -= 5\n\t\telse:\n\t\t\tif cur.len == 5:\n\t\t\t\tnewNode = Node([cur.head.array[-1]])\n\t\t\t\tnewlist = LinkedList(newNode)\n\t\t\t\tcur.head.array[4] = char\n\t\t\telse:\n\t\t\t\tlength = cur.len\n\t\t\t\tfor i in range(length+1,index,-1):\n\t\t\t\t\tcur.head.array[i] = cur.head.array[i-1]\n\t\t\t\tcur.head.array[index] = char \n\t\t\t\treturn cur.head.array\n\t\t\t#break\n\t\tprev = cur\n\t\tcur = cur.next\n\tif not cur:\n\t\tnode = Node([char])\n\t\t\n\t\tnewlist = LinkedList(node)\n\t\tprev.next = newlist\n\t\treturn newlist.head.array\n\t#return cur.head.array\nn1 = Node(['a','t','y'])\nn2 = Node(['r','i','p'])\nl1 = LinkedList(n1)\nl2 = LinkedList(n2)\nl1.next = l2\n\n\nprint get(l1, 2)\nprint insert(l1,1,'c')\n```\n\n## Dice Sum\n\n```python\nimport math\n# O(6*m)\n# O(mn)\ndef helper(dice, target, memo):\n\tres = 0\n\t# base case\n\tif dice == 0:\n\t\tif target == 0:\n\t\t\treturn 1\n\n\tif target > 6 * dice or target < dice:\n\t\treturn 0\n\n\tif memo[dice][target]:\n\t\treturn memo[dice][target]\n\n\tfor i in range(1,7):\n\t\tres += helper(dice-1, target-i, memo)\n\n\tmemo[dice][target] = res\n\treturn res\n\ndef dicesum(dice, target):\n\t# dice --- number of dice\n\t# target --- int\n\n\t# base case\n\tif dice < 1 or target < dice or target > 6* dice:\n\t\treturn 0.0\n\ttotal = int(math.pow(6,dice))\n\n\tmemo = [[0 for _ in range(target+1)] for _ in range(dice+1)]\n\n\tcount = helper(dice, target, memo)\n\n\treturn float(count) / total\n\nprint dicesum(2,4)\n```\n\n## Expire Time\n\n```python\nfrom collections import OrderedDict\nimport time\n\nclass expireDict(object):\n\tdef __init__(self):\n\t\tself.key = \"\"\n\t\tself.value = \"\"\n\t\tself.regular_dict = dict()\n\t\tself.ordered_dict = OrderedDict()\n\n\tdef put(self, key, value,duration):\n\t\tself.regular_dict[key] = value\n\t\tticks = time.time()\n\t\tself.ordered_dict[str(ticks+duration)] = key\n\t\tself.check()\n\n\tdef get(self, key):\n\t\tself.check()\n\t\tif key not in self.regular_dict:\n\t\t\treturn None\n\t\telse:\n\t\t\treturn self.regular_dict[key]\n\n\tdef check(self):\n\t\tticks = time.time()\n\t\tfor timestamp in self.ordered_dict:\n\t\t\tkey = self.ordered_dict[timestamp]\n\t\t\tif ticks - float(timestamp) > 0:\n\t\t\t\tdel(self.ordered_dict[timestamp])\n\t\t\t\tdel(self.regular_dict[key])\n\t\t\t\n\t\t\n\n# T = expireDict()\n# T.put('A',100,1)\n# time.sleep(0.6)\n# print T.ordered_dict\n# T.put('B',200,1)\n# time.sleep(0.6)\n# print T.ordered_dict\n# T.put('C',300,1)\n# time.sleep(0.1)\n# print T.ordered_dict\n# T.put('D',400,1)\n# time.sleep(0.1)\n# print T.ordered_dict\n# print T.get('D')\n# print T.ordered_dict\n\n# print T.get('A')\n```\n\n## Find Peak Element\n\n```python\ndef findPeakElement(nums): \n\t# O (lgN)\n\t# O(1)\n\tl = 0\n\tr = len(nums) - 1\n\twhile l < r :\n\t\tmid = l + (r - l) / 2\n\t\tif nums[mid] > nums[mid+1]:\n\t\t\tr = mid\n\t\telse:\n\t\t\tl = mid + 1\n\treturn l\nprint findPeakElement([1,2,3,4,1])\n```\n\n## Git relate question\n\n```python\nclass GitNode(object):\n\t\"\"\"docstring for ClassName\"\"\"\n\tdef __init__(self,id, parent):\n\t\tself.id = id\n\t\tself.parent = parent\n\ndef findAllCommits(node):\n\tres = []\n\tqueue = [node]\n\tvisited = set()\n\tvisited.add(node.id)\n\n\twhile queue:\n\t\tcur = queue.pop(0)\n\t\tres.append(cur.id)\n\t\tfor par in cur.parent:\n\n\t\t\tif par.id not in visited:\n\t\t\t\tqueue.append(par)\n\t\t\t\tvisited.add(par.id)\n\treturn res\n\ng1 = GitNode(1,[])\ng2 = GitNode(2,[g1])\ng3 = GitNode(3,[g2])\ng4 = GitNode(4,[g1])\nprint findAllCommits(g3)\n\ndef findLCA(node1, node2):\n\t# O(V+E)\n\t# visit every node and for each node needs to visit each edge\n\t# O(N)\n\t# create queue, each node enter \n\tif not node1 or not node2:\n\t\treturn None\n\n\tqueue1 = [node1]\n\tqueue2 = [node2]\n\n\tset1 = set()\n\tset1.add(node1.id)\n\tset2 = set()\n\tset2.add(node2.id)\n\n\twhile queue1 and queue2:\n\t\tsize1 = len(queue1)\n\t\tsize2 = len(queue2)\n\t\twhile size1:\n\t\t\tcur = queue1.pop(0)\n\t\t\tif cur.id in set2:\n\t\t\t\treturn cur.id\n\t\t\tset1.add(cur.id)\n\t\t\tfor par in cur.parent:\n\t\t\t\tqueue1.append(par)\n\t\t\t\tset1.add(par.id)\n\t\t\tsize1 -= 1\n\t\twhile size2:\n\t\t\tcur = queue2.pop(0)\n\t\t\tif cur.id in set1:\n\t\t\t\treturn cur.id\n\t\t\tset2.add(cur.id)\n\t\t\tfor par in cur.parent:\n\t\t\t\tqueue2.append(par)\n\t\t\t\tset2.add(par.id)\n\t\t\tsize2 -= 1\n\treturn None\n\nprint findLCA(g2, g4)\n```\n\n## Merge List\n\n```python\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        # O(N)\n        # O(1)\n        dummy = ListNode(-1)\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        if l1:\n            curr.next = l1\n        else:\n            curr.next = l2\n        return dummy.next\n\nimport heapq\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        # O(Nlogk)\n        # O(N)\n        dummy = ListNode(0)\n        curr = dummy\n        pq = []\n        for node in lists:\n            if node: ## empty\n                heapq.heappush(pq,(node.val, node))\n        while pq:\n            curr.next = heapq.heappop(pq)[1]\n            curr = curr.next\n            if curr.next:\n                heapq.heappush(pq,(curr.next.val, curr.next))\n        return dummy.next\n```\n\n## Range Summary\n\n```python\ndef rangePrint(nums):\n\t# O(n)\n\t# O(1)\n\tres = []\n\tif not nums:\n\t\treturn res\n\tori = 0\n\tpreVal = nums[0]\n\n\tfor i in range(1, len(nums)):\n\t\tif nums[i] == preVal+1:\n\t\t\tpreVal = nums[i]\n\t\tif nums[i] == preVal:\n\t\t\tcontinue\n\t\telse:\n\t\t\tif i - ori == 1:\n\t\t\t\tres.append(str(nums[ori]))\n\t\t\telse:\n\t\t\t\tif nums[ori] == preVal:\n\t\t\t\t\tres.append(str(nums[ori]))\n\t\t\t\telse:\n\t\t\t\t\ttemp = str(nums[ori]) + \"->\" + str(preVal)\n\t\t\t\t\tres.append(temp)\n\t\t\tori = i\n\t\t\tpreVal = nums[i]\n\tif ori +1 != len(nums):\n\t\tres.append(str(ori)+\"->\"+str(nums[-1]))\t\n\telse:\n\t\tres.append(str(nums[-1]))\n\treturn res\n\nprint rangePrint([1,2,3,4,5,5,7,7,8,9,11])\n\ndef rangesummary2(nums):\n\t# O(nlgn)\n\tdef helper(nums, l, r):\n\t\twhile l +1 < r:\n\t\t\tm = (l+r)/2\n\t\t\tif nums[m] - nums[l] == m - l:\n\t\t\t\tl = m\n\t\t\telse:\n\t\t\t\tr = m\n\t\treturn l\n\tres = []\n\ti = 0\n\n\twhile i < len(nums):\n\t\tk = helper(nums, i, len(nums))\n\n\t\tif i != k:\n\t\t\tres.append(str(nums[i])+\"->\"+str(nums[k]))\n\t\telse:\n\t\t\tres.append(str(nums[i]))\n\t\ti = k+1\n\treturn res\nprint rangesummary2([1,2,3,4,4,5,6,8])\n```\n\n## Rearrange Lists\n\n```python \n# [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -> [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]\n# This is not a unique solution; [ [\"a\", \"b\"], [\"a\", \"b\"], [\"a\", \"c\"] ] would also be a valid output. You only need to return one valid output.\n# Order does not matter in any way for either the input or the output.\n# Your solution should minimize the number of inner lists. \n# For example: \n# [ [\"a\"], [\"a\"], [\"b\"] ] would not be a correct solution for [\"a\", \"a\", \"b\"].\n# The correct solution would be [ [\"a\", \"b\"], [\"a\"] ]\n\n\n\n# rearrange the strings into a list of lists of strings where each inner list contains no duplicates\n# [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -> [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]\nfrom collections import defaultdict\ndef func(s):\n\tres = [[]]\n\tindex = [0 for _ in range(26)]\n\tfor char in s:\n\t\tif len(res) <=index[ord(char) - 97]:\n\t\t\ttemp = []\n\t\t\tres.append(temp)\n\t\tres[index[ord(char) - 97]].append(char)\n\t\tindex[ord(char) - 97] += 1\n\n\t\n\treturn res\nprint func([\"a\", \"a\", \"b\"])\n```\n\n## Reverse String\n\n```python\ndef reverse_a_string_more_slowly(a_string):\n    new_strings = []\n    index = len(a_string)\n    while index:\n        index -= 1                       \n        new_strings.append(a_string[index])\n    return ''.join(new_strings)\n\ndef reverse_a_string_slowly(a_string):\n    new_string = ''\n    index = len(a_string)\n    while index:\n        index -= 1                    # index = index - 1\n        new_string += a_string[index] # new_string = new_string + character\n    return new_string\n\ndef reverseWords(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    if not s:\n        return ''\n    li = s.strip().split()\n    print li\n    res = []\n    for each in range(len(li)-1,-1,-1):\n        res.append(li[each])\n    return ' '.join(res)\nprint reverseWords('  a  b ')\n```\n\n## shortest word distance\n\n```python\nclass Solution(object):\n    \n\n    def shortestDistance1(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(1)\n        p1, p2 = -1, -1\n        res = len(words)\n        for i in range(len(words)):\n            if words[i] == word1:\n                p1 = i\n            if words[i] == word2:\n                p2 = i\n            if p1!=-1 and p2 != -1:\n                temp = abs(p1-p2)\n                res = min(res, temp)\n        return res\n        \n    def shortestWordDistance3(self, words, word1, word2):\n        \"\"\"\n        :type words: List[str]\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(1)\n        p1, p2 = -len(words), -1\n        res = len(words)\n        for i in range(len(words)):\n            if word1 != word2:\n                if words[i] == word1:\n                    p1 = i\n                if words[i] == word2:\n                    p2 = i\n                if p1!=-1 and p2 != -1:\n                    temp = abs(p1-p2)\n                    res = min(res, temp)\n            else:\n                if words[i] == word1:\n                    res = min(res, abs(p1 - i))\n                    p1 = i\n        return res\n        \n \nfrom collections import defaultdict\nclass WordDistance(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        self.map = defaultdict(list)\n        for i in range(len(words)):\n            self.map[words[i]] += [i]\n\n    def shortest(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        # O(n)\n        # O(n)\n        l1 = self.map[word1]\n        l2 = self.map[word2]\n        if l1[0]>l2[0]:\n            l1,l2 = l2, l1\n        p1 = 0\n        p2 = 0\n        res = float('inf')\n        while p1 < len(l1) and p2 < len(l2):\n            temp = abs(l1[p1]- l2[p2])\n            res = min(temp, res)\n            if l1[p1] < l2[p2]:\n                p1 +=1\n            else:\n                p2 += 1\n        return res\n        \n\n\n# Your WordDistance object will be instantiated and called as such:\n# obj = WordDistance(words)\n# param_1 = obj.shortest(word1,word2)\n```","slug":"Indeed面试总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdev000om2ca7pofh5x5","content":"<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p>HR联系-&gt; 确认电话面试时间-&gt; 电话面试 -&gt; 后续跟进（move on fail）<br>Data Engineer</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li>易梦前尘前辈的地里帖子 <a href=\"http://www.1point3acres.com/bbs/thread-223228-1-1.html\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>Github总结 [链接] (<a href=\"https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed\" target=\"_blank\" rel=\"noopener\">https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed</a>)<a id=\"more\"></a>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1>当时根据地里的总结了一下题目，但是电话面试的时候还是出了一道我似乎见过的但是没有复习到题目，直接给出了brute force解，优化的时候有点紧张就没有答上来….就最后跪了<h2 id=\"UnrolledLinked-List\"><a href=\"#UnrolledLinked-List\" class=\"headerlink\" title=\"UnrolledLinked List\"></a>UnrolledLinked List</h2></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, array)</span>:</span></span><br><span class=\"line\">\t\tself.array = array</span><br><span class=\"line\">\t\tself.len = len(self.array)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> len(self.array) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tself.array.append(<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">\t\tself.head = head</span><br><span class=\"line\">\t\tself.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\tself.len = head.len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(head, index)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">\tcur = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> cur <span class=\"keyword\">and</span> index:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index &gt;= <span class=\"number\">5</span>: <span class=\"comment\"># cur.len</span></span><br><span class=\"line\">\t\t\tindex -= <span class=\"number\">5</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> cur.head.array[index]</span><br><span class=\"line\">\t\tcur = cur.next</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(head, index, char)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\tcur = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> cur <span class=\"keyword\">and</span> index:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index &gt;= <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tindex -= <span class=\"number\">5</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.len == <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\tnewNode = Node([cur.head.array[<span class=\"number\">-1</span>]])</span><br><span class=\"line\">\t\t\t\tnewlist = LinkedList(newNode)</span><br><span class=\"line\">\t\t\t\tcur.head.array[<span class=\"number\">4</span>] = char</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tlength = cur.len</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length+<span class=\"number\">1</span>,index,<span class=\"number\">-1</span>):</span><br><span class=\"line\">\t\t\t\t\tcur.head.array[i] = cur.head.array[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t\t\tcur.head.array[index] = char </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.head.array</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#break</span></span><br><span class=\"line\">\t\tprev = cur</span><br><span class=\"line\">\t\tcur = cur.next</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cur:</span><br><span class=\"line\">\t\tnode = Node([char])</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tnewlist = LinkedList(node)</span><br><span class=\"line\">\t\tprev.next = newlist</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newlist.head.array</span><br><span class=\"line\">\t<span class=\"comment\">#return cur.head.array</span></span><br><span class=\"line\">n1 = Node([<span class=\"string\">'a'</span>,<span class=\"string\">'t'</span>,<span class=\"string\">'y'</span>])</span><br><span class=\"line\">n2 = Node([<span class=\"string\">'r'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'p'</span>])</span><br><span class=\"line\">l1 = LinkedList(n1)</span><br><span class=\"line\">l2 = LinkedList(n2)</span><br><span class=\"line\">l1.next = l2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> get(l1, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> insert(l1,<span class=\"number\">1</span>,<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dice-Sum\"><a href=\"#Dice-Sum\" class=\"headerlink\" title=\"Dice Sum\"></a>Dice Sum</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># O(6*m)</span></span><br><span class=\"line\"><span class=\"comment\"># O(mn)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(dice, target, memo)</span>:</span></span><br><span class=\"line\">\tres = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\"># base case</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dice == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> target &gt; <span class=\"number\">6</span> * dice <span class=\"keyword\">or</span> target &lt; dice:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> memo[dice][target]:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memo[dice][target]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">7</span>):</span><br><span class=\"line\">\t\tres += helper(dice<span class=\"number\">-1</span>, target-i, memo)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemo[dice][target] = res</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dicesum</span><span class=\"params\">(dice, target)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># dice --- number of dice</span></span><br><span class=\"line\">\t<span class=\"comment\"># target --- int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># base case</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dice &lt; <span class=\"number\">1</span> <span class=\"keyword\">or</span> target &lt; dice <span class=\"keyword\">or</span> target &gt; <span class=\"number\">6</span>* dice:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">\ttotal = int(math.pow(<span class=\"number\">6</span>,dice))</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemo = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(target+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(dice+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = helper(dice, target, memo)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> float(count) / total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> dicesum(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expire-Time\"><a href=\"#Expire-Time\" class=\"headerlink\" title=\"Expire Time\"></a>Expire Time</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">expireDict</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tself.key = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\tself.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\tself.regular_dict = dict()</span><br><span class=\"line\">\t\tself.ordered_dict = OrderedDict()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value,duration)</span>:</span></span><br><span class=\"line\">\t\tself.regular_dict[key] = value</span><br><span class=\"line\">\t\tticks = time.time()</span><br><span class=\"line\">\t\tself.ordered_dict[str(ticks+duration)] = key</span><br><span class=\"line\">\t\tself.check()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">\t\tself.check()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.regular_dict:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.regular_dict[key]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tticks = time.time()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> timestamp <span class=\"keyword\">in</span> self.ordered_dict:</span><br><span class=\"line\">\t\t\tkey = self.ordered_dict[timestamp]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ticks - float(timestamp) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">del</span>(self.ordered_dict[timestamp])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">del</span>(self.regular_dict[key])</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># T = expireDict()</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('A',100,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.6)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('B',200,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.6)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('C',300,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.1)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('D',400,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.1)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># print T.get('D')</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print T.get('A')</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Find-Peak-Element\"><a href=\"#Find-Peak-Element\" class=\"headerlink\" title=\"Find Peak Element\"></a>Find Peak Element</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(nums)</span>:</span> </span><br><span class=\"line\">\t<span class=\"comment\"># O (lgN)</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(1)</span></span><br><span class=\"line\">\tl = <span class=\"number\">0</span></span><br><span class=\"line\">\tr = len(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> l &lt; r :</span><br><span class=\"line\">\t\tmid = l + (r - l) / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[mid] &gt; nums[mid+<span class=\"number\">1</span>]:</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\"><span class=\"keyword\">print</span> findPeakElement([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-relate-question\"><a href=\"#Git-relate-question\" class=\"headerlink\" title=\"Git relate question\"></a>Git relate question</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"string\">\"\"\"docstring for ClassName\"\"\"</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,id, parent)</span>:</span></span><br><span class=\"line\">\t\tself.id = id</span><br><span class=\"line\">\t\tself.parent = parent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllCommits</span><span class=\"params\">(node)</span>:</span></span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\tqueue = [node]</span><br><span class=\"line\">\tvisited = set()</span><br><span class=\"line\">\tvisited.add(node.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\t\tcur = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tres.append(cur.id)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> par.id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">\t\t\t\tqueue.append(par)</span><br><span class=\"line\">\t\t\t\tvisited.add(par.id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">g1 = GitNode(<span class=\"number\">1</span>,[])</span><br><span class=\"line\">g2 = GitNode(<span class=\"number\">2</span>,[g1])</span><br><span class=\"line\">g3 = GitNode(<span class=\"number\">3</span>,[g2])</span><br><span class=\"line\">g4 = GitNode(<span class=\"number\">4</span>,[g1])</span><br><span class=\"line\"><span class=\"keyword\">print</span> findAllCommits(g3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findLCA</span><span class=\"params\">(node1, node2)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(V+E)</span></span><br><span class=\"line\">\t<span class=\"comment\"># visit every node and for each node needs to visit each edge</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(N)</span></span><br><span class=\"line\">\t<span class=\"comment\"># create queue, each node enter </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue1 = [node1]</span><br><span class=\"line\">\tqueue2 = [node2]</span><br><span class=\"line\"></span><br><span class=\"line\">\tset1 = set()</span><br><span class=\"line\">\tset1.add(node1.id)</span><br><span class=\"line\">\tset2 = set()</span><br><span class=\"line\">\tset2.add(node2.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> queue1 <span class=\"keyword\">and</span> queue2:</span><br><span class=\"line\">\t\tsize1 = len(queue1)</span><br><span class=\"line\">\t\tsize2 = len(queue2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> size1:</span><br><span class=\"line\">\t\t\tcur = queue1.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.id <span class=\"keyword\">in</span> set2:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.id</span><br><span class=\"line\">\t\t\tset1.add(cur.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\">\t\t\t\tqueue1.append(par)</span><br><span class=\"line\">\t\t\t\tset1.add(par.id)</span><br><span class=\"line\">\t\t\tsize1 -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> size2:</span><br><span class=\"line\">\t\t\tcur = queue2.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.id <span class=\"keyword\">in</span> set1:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.id</span><br><span class=\"line\">\t\t\tset2.add(cur.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\">\t\t\t\tqueue2.append(par)</span><br><span class=\"line\">\t\t\t\tset2.add(par.id)</span><br><span class=\"line\">\t\t\tsize2 -= <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> findLCA(g2, g4)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge-List\"><a href=\"#Merge-List\" class=\"headerlink\" title=\"Merge List\"></a>Merge List</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(N)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">-1</span>)</span><br><span class=\"line\">        curr = dummy</span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1.val &lt; l2.val:</span><br><span class=\"line\">                curr.next = l1</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr.next = l2</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1:</span><br><span class=\"line\">            curr.next = l1</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            curr.next = l2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeKLists</span><span class=\"params\">(self, lists)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type lists: List[ListNode]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(Nlogk)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(N)</span></span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        curr = dummy</span><br><span class=\"line\">        pq = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> lists:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node: <span class=\"comment\">## empty</span></span><br><span class=\"line\">                heapq.heappush(pq,(node.val, node))</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            curr.next = heapq.heappop(pq)[<span class=\"number\">1</span>]</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr.next:</span><br><span class=\"line\">                heapq.heappush(pq,(curr.next.val, curr.next))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"Range-Summary\"><a href=\"#Range-Summary\" class=\"headerlink\" title=\"Range Summary\"></a>Range Summary</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rangePrint</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(n)</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(1)</span></span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\tori = <span class=\"number\">0</span></span><br><span class=\"line\">\tpreVal = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(nums)):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] == preVal+<span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tpreVal = nums[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] == preVal:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i - ori == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tres.append(str(nums[ori]))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> nums[ori] == preVal:</span><br><span class=\"line\">\t\t\t\t\tres.append(str(nums[ori]))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\ttemp = str(nums[ori]) + <span class=\"string\">\"-&gt;\"</span> + str(preVal)</span><br><span class=\"line\">\t\t\t\t\tres.append(temp)</span><br><span class=\"line\">\t\t\tori = i</span><br><span class=\"line\">\t\t\tpreVal = nums[i]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ori +<span class=\"number\">1</span> != len(nums):</span><br><span class=\"line\">\t\tres.append(str(ori)+<span class=\"string\">\"-&gt;\"</span>+str(nums[<span class=\"number\">-1</span>]))\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tres.append(str(nums[<span class=\"number\">-1</span>]))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> rangePrint([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rangesummary2</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(nlgn)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(nums, l, r)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> l +<span class=\"number\">1</span> &lt; r:</span><br><span class=\"line\">\t\t\tm = (l+r)/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nums[m] - nums[l] == m - l:</span><br><span class=\"line\">\t\t\t\tl = m</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tr = m</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\ti = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> i &lt; len(nums):</span><br><span class=\"line\">\t\tk = helper(nums, i, len(nums))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i != k:</span><br><span class=\"line\">\t\t\tres.append(str(nums[i])+<span class=\"string\">\"-&gt;\"</span>+str(nums[k]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tres.append(str(nums[i]))</span><br><span class=\"line\">\t\ti = k+<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">print</span> rangesummary2([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rearrange-Lists\"><a href=\"#Rearrange-Lists\" class=\"headerlink\" title=\"Rearrange Lists\"></a>Rearrange Lists</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -&gt; [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"><span class=\"comment\"># This is not a unique solution; [ [\"a\", \"b\"], [\"a\", \"b\"], [\"a\", \"c\"] ] would also be a valid output. You only need to return one valid output.</span></span><br><span class=\"line\"><span class=\"comment\"># Order does not matter in any way for either the input or the output.</span></span><br><span class=\"line\"><span class=\"comment\"># Your solution should minimize the number of inner lists. </span></span><br><span class=\"line\"><span class=\"comment\"># For example: </span></span><br><span class=\"line\"><span class=\"comment\"># [ [\"a\"], [\"a\"], [\"b\"] ] would not be a correct solution for [\"a\", \"a\", \"b\"].</span></span><br><span class=\"line\"><span class=\"comment\"># The correct solution would be [ [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rearrange the strings into a list of lists of strings where each inner list contains no duplicates</span></span><br><span class=\"line\"><span class=\"comment\"># [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -&gt; [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">\tres = [[]]</span><br><span class=\"line\">\tindex = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">26</span>)]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(res) &lt;=index[ord(char) - <span class=\"number\">97</span>]:</span><br><span class=\"line\">\t\t\ttemp = []</span><br><span class=\"line\">\t\t\tres.append(temp)</span><br><span class=\"line\">\t\tres[index[ord(char) - <span class=\"number\">97</span>]].append(char)</span><br><span class=\"line\">\t\tindex[ord(char) - <span class=\"number\">97</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">print</span> func([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-String\"><a href=\"#Reverse-String\" class=\"headerlink\" title=\"Reverse String\"></a>Reverse String</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse_a_string_more_slowly</span><span class=\"params\">(a_string)</span>:</span></span><br><span class=\"line\">    new_strings = []</span><br><span class=\"line\">    index = len(a_string)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span>                       </span><br><span class=\"line\">        new_strings.append(a_string[index])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(new_strings)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse_a_string_slowly</span><span class=\"params\">(a_string)</span>:</span></span><br><span class=\"line\">    new_string = <span class=\"string\">''</span></span><br><span class=\"line\">    index = len(a_string)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span>                    <span class=\"comment\"># index = index - 1</span></span><br><span class=\"line\">        new_string += a_string[index] <span class=\"comment\"># new_string = new_string + character</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseWords</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type s: str</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    li = s.strip().split()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> li</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(len(li)<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        res.append(li[each])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">' '</span>.join(res)</span><br><span class=\"line\"><span class=\"keyword\">print</span> reverseWords(<span class=\"string\">'  a  b '</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"shortest-word-distance\"><a href=\"#shortest-word-distance\" class=\"headerlink\" title=\"shortest word distance\"></a>shortest word distance</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestDistance1</span><span class=\"params\">(self, words, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        p1, p2 = <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\">        res = len(words)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                p1 = i</span><br><span class=\"line\">            <span class=\"keyword\">if</span> words[i] == word2:</span><br><span class=\"line\">                p2 = i</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p1!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> p2 != <span class=\"number\">-1</span>:</span><br><span class=\"line\">                temp = abs(p1-p2)</span><br><span class=\"line\">                res = min(res, temp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestWordDistance3</span><span class=\"params\">(self, words, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        p1, p2 = -len(words), <span class=\"number\">-1</span></span><br><span class=\"line\">        res = len(words)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word1 != word2:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                    p1 = i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word2:</span><br><span class=\"line\">                    p2 = i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p1!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> p2 != <span class=\"number\">-1</span>:</span><br><span class=\"line\">                    temp = abs(p1-p2)</span><br><span class=\"line\">                    res = min(res, temp)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                    res = min(res, abs(p1 - i))</span><br><span class=\"line\">                    p1 = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDistance</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.map = defaultdict(list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            self.map[words[i]] += [i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortest</span><span class=\"params\">(self, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        l1 = self.map[word1]</span><br><span class=\"line\">        l2 = self.map[word2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1[<span class=\"number\">0</span>]&gt;l2[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            l1,l2 = l2, l1</span><br><span class=\"line\">        p1 = <span class=\"number\">0</span></span><br><span class=\"line\">        p2 = <span class=\"number\">0</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p1 &lt; len(l1) <span class=\"keyword\">and</span> p2 &lt; len(l2):</span><br><span class=\"line\">            temp = abs(l1[p1]- l2[p2])</span><br><span class=\"line\">            res = min(temp, res)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1[p1] &lt; l2[p2]:</span><br><span class=\"line\">                p1 +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                p2 += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your WordDistance object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = WordDistance(words)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.shortest(word1,word2)</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p>HR联系-&gt; 确认电话面试时间-&gt; 电话面试 -&gt; 后续跟进（move on fail）<br>Data Engineer</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li>易梦前尘前辈的地里帖子 <a href=\"http://www.1point3acres.com/bbs/thread-223228-1-1.html\" target=\"_blank\" rel=\"noopener\">链接</a></li>\n<li>Github总结 [链接] (<a href=\"https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed\" target=\"_blank\" rel=\"noopener\">https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed</a>)","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1>当时根据地里的总结了一下题目，但是电话面试的时候还是出了一道我似乎见过的但是没有复习到题目，直接给出了brute force解，优化的时候有点紧张就没有答上来….就最后跪了<h2 id=\"UnrolledLinked-List\"><a href=\"#UnrolledLinked-List\" class=\"headerlink\" title=\"UnrolledLinked List\"></a>UnrolledLinked List</h2></li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, array)</span>:</span></span><br><span class=\"line\">\t\tself.array = array</span><br><span class=\"line\">\t\tself.len = len(self.array)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> len(self.array) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tself.array.append(<span class=\"string\">' '</span>)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">\t\tself.head = head</span><br><span class=\"line\">\t\tself.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\tself.len = head.len</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(head, index)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">\tcur = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> cur <span class=\"keyword\">and</span> index:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index &gt;= <span class=\"number\">5</span>: <span class=\"comment\"># cur.len</span></span><br><span class=\"line\">\t\t\tindex -= <span class=\"number\">5</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> cur.head.array[index]</span><br><span class=\"line\">\t\tcur = cur.next</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(head, index, char)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> index &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\tcur = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> cur <span class=\"keyword\">and</span> index:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> index &gt;= <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tindex -= <span class=\"number\">5</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.len == <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\tnewNode = Node([cur.head.array[<span class=\"number\">-1</span>]])</span><br><span class=\"line\">\t\t\t\tnewlist = LinkedList(newNode)</span><br><span class=\"line\">\t\t\t\tcur.head.array[<span class=\"number\">4</span>] = char</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tlength = cur.len</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length+<span class=\"number\">1</span>,index,<span class=\"number\">-1</span>):</span><br><span class=\"line\">\t\t\t\t\tcur.head.array[i] = cur.head.array[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t\t\tcur.head.array[index] = char </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.head.array</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#break</span></span><br><span class=\"line\">\t\tprev = cur</span><br><span class=\"line\">\t\tcur = cur.next</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cur:</span><br><span class=\"line\">\t\tnode = Node([char])</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tnewlist = LinkedList(node)</span><br><span class=\"line\">\t\tprev.next = newlist</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> newlist.head.array</span><br><span class=\"line\">\t<span class=\"comment\">#return cur.head.array</span></span><br><span class=\"line\">n1 = Node([<span class=\"string\">'a'</span>,<span class=\"string\">'t'</span>,<span class=\"string\">'y'</span>])</span><br><span class=\"line\">n2 = Node([<span class=\"string\">'r'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'p'</span>])</span><br><span class=\"line\">l1 = LinkedList(n1)</span><br><span class=\"line\">l2 = LinkedList(n2)</span><br><span class=\"line\">l1.next = l2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> get(l1, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> insert(l1,<span class=\"number\">1</span>,<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dice-Sum\"><a href=\"#Dice-Sum\" class=\"headerlink\" title=\"Dice Sum\"></a>Dice Sum</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"comment\"># O(6*m)</span></span><br><span class=\"line\"><span class=\"comment\"># O(mn)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(dice, target, memo)</span>:</span></span><br><span class=\"line\">\tres = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\"># base case</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dice == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> target &gt; <span class=\"number\">6</span> * dice <span class=\"keyword\">or</span> target &lt; dice:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> memo[dice][target]:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> memo[dice][target]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">7</span>):</span><br><span class=\"line\">\t\tres += helper(dice<span class=\"number\">-1</span>, target-i, memo)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemo[dice][target] = res</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dicesum</span><span class=\"params\">(dice, target)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># dice --- number of dice</span></span><br><span class=\"line\">\t<span class=\"comment\"># target --- int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># base case</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dice &lt; <span class=\"number\">1</span> <span class=\"keyword\">or</span> target &lt; dice <span class=\"keyword\">or</span> target &gt; <span class=\"number\">6</span>* dice:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">\ttotal = int(math.pow(<span class=\"number\">6</span>,dice))</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemo = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(target+<span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(dice+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">\tcount = helper(dice, target, memo)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> float(count) / total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> dicesum(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expire-Time\"><a href=\"#Expire-Time\" class=\"headerlink\" title=\"Expire Time\"></a>Expire Time</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">expireDict</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tself.key = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\tself.value = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t\tself.regular_dict = dict()</span><br><span class=\"line\">\t\tself.ordered_dict = OrderedDict()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span><span class=\"params\">(self, key, value,duration)</span>:</span></span><br><span class=\"line\">\t\tself.regular_dict[key] = value</span><br><span class=\"line\">\t\tticks = time.time()</span><br><span class=\"line\">\t\tself.ordered_dict[str(ticks+duration)] = key</span><br><span class=\"line\">\t\tself.check()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">\t\tself.check()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.regular_dict:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.regular_dict[key]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tticks = time.time()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> timestamp <span class=\"keyword\">in</span> self.ordered_dict:</span><br><span class=\"line\">\t\t\tkey = self.ordered_dict[timestamp]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ticks - float(timestamp) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">del</span>(self.ordered_dict[timestamp])</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">del</span>(self.regular_dict[key])</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># T = expireDict()</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('A',100,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.6)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('B',200,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.6)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('C',300,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.1)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># T.put('D',400,1)</span></span><br><span class=\"line\"><span class=\"comment\"># time.sleep(0.1)</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"><span class=\"comment\"># print T.get('D')</span></span><br><span class=\"line\"><span class=\"comment\"># print T.ordered_dict</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print T.get('A')</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Find-Peak-Element\"><a href=\"#Find-Peak-Element\" class=\"headerlink\" title=\"Find Peak Element\"></a>Find Peak Element</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(nums)</span>:</span> </span><br><span class=\"line\">\t<span class=\"comment\"># O (lgN)</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(1)</span></span><br><span class=\"line\">\tl = <span class=\"number\">0</span></span><br><span class=\"line\">\tr = len(nums) - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> l &lt; r :</span><br><span class=\"line\">\t\tmid = l + (r - l) / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[mid] &gt; nums[mid+<span class=\"number\">1</span>]:</span><br><span class=\"line\">\t\t\tr = mid</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tl = mid + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\"><span class=\"keyword\">print</span> findPeakElement([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git-relate-question\"><a href=\"#Git-relate-question\" class=\"headerlink\" title=\"Git relate question\"></a>Git relate question</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"string\">\"\"\"docstring for ClassName\"\"\"</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,id, parent)</span>:</span></span><br><span class=\"line\">\t\tself.id = id</span><br><span class=\"line\">\t\tself.parent = parent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAllCommits</span><span class=\"params\">(node)</span>:</span></span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\tqueue = [node]</span><br><span class=\"line\">\tvisited = set()</span><br><span class=\"line\">\tvisited.add(node.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\t\tcur = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tres.append(cur.id)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> par.id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">\t\t\t\tqueue.append(par)</span><br><span class=\"line\">\t\t\t\tvisited.add(par.id)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">g1 = GitNode(<span class=\"number\">1</span>,[])</span><br><span class=\"line\">g2 = GitNode(<span class=\"number\">2</span>,[g1])</span><br><span class=\"line\">g3 = GitNode(<span class=\"number\">3</span>,[g2])</span><br><span class=\"line\">g4 = GitNode(<span class=\"number\">4</span>,[g1])</span><br><span class=\"line\"><span class=\"keyword\">print</span> findAllCommits(g3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findLCA</span><span class=\"params\">(node1, node2)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(V+E)</span></span><br><span class=\"line\">\t<span class=\"comment\"># visit every node and for each node needs to visit each edge</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(N)</span></span><br><span class=\"line\">\t<span class=\"comment\"># create queue, each node enter </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue1 = [node1]</span><br><span class=\"line\">\tqueue2 = [node2]</span><br><span class=\"line\"></span><br><span class=\"line\">\tset1 = set()</span><br><span class=\"line\">\tset1.add(node1.id)</span><br><span class=\"line\">\tset2 = set()</span><br><span class=\"line\">\tset2.add(node2.id)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> queue1 <span class=\"keyword\">and</span> queue2:</span><br><span class=\"line\">\t\tsize1 = len(queue1)</span><br><span class=\"line\">\t\tsize2 = len(queue2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> size1:</span><br><span class=\"line\">\t\t\tcur = queue1.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.id <span class=\"keyword\">in</span> set2:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.id</span><br><span class=\"line\">\t\t\tset1.add(cur.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\">\t\t\t\tqueue1.append(par)</span><br><span class=\"line\">\t\t\t\tset1.add(par.id)</span><br><span class=\"line\">\t\t\tsize1 -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> size2:</span><br><span class=\"line\">\t\t\tcur = queue2.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> cur.id <span class=\"keyword\">in</span> set1:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> cur.id</span><br><span class=\"line\">\t\t\tset2.add(cur.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> par <span class=\"keyword\">in</span> cur.parent:</span><br><span class=\"line\">\t\t\t\tqueue2.append(par)</span><br><span class=\"line\">\t\t\t\tset2.add(par.id)</span><br><span class=\"line\">\t\t\tsize2 -= <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> findLCA(g2, g4)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Merge-List\"><a href=\"#Merge-List\" class=\"headerlink\" title=\"Merge List\"></a>Merge List</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type l1: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :type l2: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(N)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">-1</span>)</span><br><span class=\"line\">        curr = dummy</span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1.val &lt; l2.val:</span><br><span class=\"line\">                curr.next = l1</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr.next = l2</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1:</span><br><span class=\"line\">            curr.next = l1</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            curr.next = l2</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeKLists</span><span class=\"params\">(self, lists)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type lists: List[ListNode]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: ListNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(Nlogk)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(N)</span></span><br><span class=\"line\">        dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">        curr = dummy</span><br><span class=\"line\">        pq = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> lists:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node: <span class=\"comment\">## empty</span></span><br><span class=\"line\">                heapq.heappush(pq,(node.val, node))</span><br><span class=\"line\">        <span class=\"keyword\">while</span> pq:</span><br><span class=\"line\">            curr.next = heapq.heappop(pq)[<span class=\"number\">1</span>]</span><br><span class=\"line\">            curr = curr.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr.next:</span><br><span class=\"line\">                heapq.heappush(pq,(curr.next.val, curr.next))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"Range-Summary\"><a href=\"#Range-Summary\" class=\"headerlink\" title=\"Range Summary\"></a>Range Summary</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rangePrint</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(n)</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(1)</span></span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">\tori = <span class=\"number\">0</span></span><br><span class=\"line\">\tpreVal = nums[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(nums)):</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] == preVal+<span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tpreVal = nums[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] == preVal:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i - ori == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tres.append(str(nums[ori]))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> nums[ori] == preVal:</span><br><span class=\"line\">\t\t\t\t\tres.append(str(nums[ori]))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t\ttemp = str(nums[ori]) + <span class=\"string\">\"-&gt;\"</span> + str(preVal)</span><br><span class=\"line\">\t\t\t\t\tres.append(temp)</span><br><span class=\"line\">\t\t\tori = i</span><br><span class=\"line\">\t\t\tpreVal = nums[i]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ori +<span class=\"number\">1</span> != len(nums):</span><br><span class=\"line\">\t\tres.append(str(ori)+<span class=\"string\">\"-&gt;\"</span>+str(nums[<span class=\"number\">-1</span>]))\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tres.append(str(nums[<span class=\"number\">-1</span>]))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> rangePrint([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rangesummary2</span><span class=\"params\">(nums)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># O(nlgn)</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(nums, l, r)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> l +<span class=\"number\">1</span> &lt; r:</span><br><span class=\"line\">\t\t\tm = (l+r)/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nums[m] - nums[l] == m - l:</span><br><span class=\"line\">\t\t\t\tl = m</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\tr = m</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">\tres = []</span><br><span class=\"line\">\ti = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> i &lt; len(nums):</span><br><span class=\"line\">\t\tk = helper(nums, i, len(nums))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i != k:</span><br><span class=\"line\">\t\t\tres.append(str(nums[i])+<span class=\"string\">\"-&gt;\"</span>+str(nums[k]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tres.append(str(nums[i]))</span><br><span class=\"line\">\t\ti = k+<span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">print</span> rangesummary2([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Rearrange-Lists\"><a href=\"#Rearrange-Lists\" class=\"headerlink\" title=\"Rearrange Lists\"></a>Rearrange Lists</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -&gt; [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"><span class=\"comment\"># This is not a unique solution; [ [\"a\", \"b\"], [\"a\", \"b\"], [\"a\", \"c\"] ] would also be a valid output. You only need to return one valid output.</span></span><br><span class=\"line\"><span class=\"comment\"># Order does not matter in any way for either the input or the output.</span></span><br><span class=\"line\"><span class=\"comment\"># Your solution should minimize the number of inner lists. </span></span><br><span class=\"line\"><span class=\"comment\"># For example: </span></span><br><span class=\"line\"><span class=\"comment\"># [ [\"a\"], [\"a\"], [\"b\"] ] would not be a correct solution for [\"a\", \"a\", \"b\"].</span></span><br><span class=\"line\"><span class=\"comment\"># The correct solution would be [ [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rearrange the strings into a list of lists of strings where each inner list contains no duplicates</span></span><br><span class=\"line\"><span class=\"comment\"># [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] -&gt; [ [\"a\", \"b\", \"c\"], [\"a\", \"b\"], [\"a\"] ]</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">\tres = [[]]</span><br><span class=\"line\">\tindex = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">26</span>)]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(res) &lt;=index[ord(char) - <span class=\"number\">97</span>]:</span><br><span class=\"line\">\t\t\ttemp = []</span><br><span class=\"line\">\t\t\tres.append(temp)</span><br><span class=\"line\">\t\tres[index[ord(char) - <span class=\"number\">97</span>]].append(char)</span><br><span class=\"line\">\t\tindex[ord(char) - <span class=\"number\">97</span>] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\"><span class=\"keyword\">print</span> func([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reverse-String\"><a href=\"#Reverse-String\" class=\"headerlink\" title=\"Reverse String\"></a>Reverse String</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse_a_string_more_slowly</span><span class=\"params\">(a_string)</span>:</span></span><br><span class=\"line\">    new_strings = []</span><br><span class=\"line\">    index = len(a_string)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span>                       </span><br><span class=\"line\">        new_strings.append(a_string[index])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>.join(new_strings)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse_a_string_slowly</span><span class=\"params\">(a_string)</span>:</span></span><br><span class=\"line\">    new_string = <span class=\"string\">''</span></span><br><span class=\"line\">    index = len(a_string)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> index:</span><br><span class=\"line\">        index -= <span class=\"number\">1</span>                    <span class=\"comment\"># index = index - 1</span></span><br><span class=\"line\">        new_string += a_string[index] <span class=\"comment\"># new_string = new_string + character</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_string</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseWords</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type s: str</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">    li = s.strip().split()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> li</span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> range(len(li)<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        res.append(li[each])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">' '</span>.join(res)</span><br><span class=\"line\"><span class=\"keyword\">print</span> reverseWords(<span class=\"string\">'  a  b '</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"shortest-word-distance\"><a href=\"#shortest-word-distance\" class=\"headerlink\" title=\"shortest word distance\"></a>shortest word distance</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestDistance1</span><span class=\"params\">(self, words, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        p1, p2 = <span class=\"number\">-1</span>, <span class=\"number\">-1</span></span><br><span class=\"line\">        res = len(words)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                p1 = i</span><br><span class=\"line\">            <span class=\"keyword\">if</span> words[i] == word2:</span><br><span class=\"line\">                p2 = i</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p1!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> p2 != <span class=\"number\">-1</span>:</span><br><span class=\"line\">                temp = abs(p1-p2)</span><br><span class=\"line\">                res = min(res, temp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortestWordDistance3</span><span class=\"params\">(self, words, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(1)</span></span><br><span class=\"line\">        p1, p2 = -len(words), <span class=\"number\">-1</span></span><br><span class=\"line\">        res = len(words)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word1 != word2:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                    p1 = i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word2:</span><br><span class=\"line\">                    p2 = i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p1!=<span class=\"number\">-1</span> <span class=\"keyword\">and</span> p2 != <span class=\"number\">-1</span>:</span><br><span class=\"line\">                    temp = abs(p1-p2)</span><br><span class=\"line\">                    res = min(res, temp)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> words[i] == word1:</span><br><span class=\"line\">                    res = min(res, abs(p1 - i))</span><br><span class=\"line\">                    p1 = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDistance</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.map = defaultdict(list)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">            self.map[words[i]] += [i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shortest</span><span class=\"params\">(self, word1, word2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type word1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type word2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        l1 = self.map[word1]</span><br><span class=\"line\">        l2 = self.map[word2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l1[<span class=\"number\">0</span>]&gt;l2[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            l1,l2 = l2, l1</span><br><span class=\"line\">        p1 = <span class=\"number\">0</span></span><br><span class=\"line\">        p2 = <span class=\"number\">0</span></span><br><span class=\"line\">        res = float(<span class=\"string\">'inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> p1 &lt; len(l1) <span class=\"keyword\">and</span> p2 &lt; len(l2):</span><br><span class=\"line\">            temp = abs(l1[p1]- l2[p2])</span><br><span class=\"line\">            res = min(temp, res)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1[p1] &lt; l2[p2]:</span><br><span class=\"line\">                p1 +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                p2 += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your WordDistance object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = WordDistance(words)</span></span><br><span class=\"line\"><span class=\"comment\"># param_1 = obj.shortest(word1,word2)</span></span><br></pre></td></tr></table></figure>"},{"title":"Joshua之美东探索II--纽约波士顿","comments":1,"date":"2017-06-01T00:34:00.000Z","updated":"2017-06-01T00:34:00.000Z","_content":"> Time: 2017-05-20~05-23  \n> Travel: Bus\n\n# 引子\n说起美东，不能不提的两个城市自然是大苹果城和历史底蕴深厚的波士顿，我这次也不能免俗；摩天楼下的摩肩与一波波爱国主义游客的接踵，交织着最热闹的双城。\n<!--more-->\n# 纽约\n> 如果你爱他，就送他去纽约，因为那里是天堂；如果你恨他，就送他去纽约，因为那里是地狱 --<北京人在纽约> \n \n走进纽约\n[![IMG_1502.jpg](https://s5.postimg.org/6z8309j5z/IMG_1502.jpg)](https://postimg.org/image/wurtjgkzn/)\n## 楼\n不得不说的是各种有名的楼，比着赛着的通向云端，于是我也无法一一介绍，比如这座出名建筑，那座有历史底蕴的摩天楼，那个象征着20世纪纽约文化的擎天柱。不知道是不是住在人堆里的42街与8街的缘故，一出门便是流浪汉与游客的无视穿梭，纽约客们穿梭在见缝插针的无车的红灯路口，似乎绿灯下白白的行人标志，区分着憧憬的游客与纽约的老炮儿。  \n[![IMG_4584.jpg](https://s5.postimg.org/cmw086tzb/IMG_4584.jpg)](https://postimg.org/image/upp2zeptv/)\n[![IMG_4541.jpg](https://s5.postimg.org/6fp7lrnlz/IMG_4541.jpg)](https://postimg.org/image/87i6go6yr/)\n洛克菲勒中心-纽约夜景三选一，面朝帝国大厦背靠中央公园；多云下的夜晚依旧闪耀着忙碌的办公室的灯光，也就是不夜城的金融大苹果。  \n[![IMG_1450.jpg](https://s5.postimg.org/5mqdydlqf/IMG_1450.jpg)](https://postimg.org/image/cd6v7t8w3/)\n[![IMG_4552.jpg](https://s5.postimg.org/toouaa8uf/IMG_4552.jpg)](https://postimg.org/image/j1v14v0oz/)\n时代广场-这可以为建筑作结，唯一的可以树立着大大的灯箱，卖肉的宣传在小小的广场。当然我们也能见到熟悉的中国元素，软实力的扑广嘛。 \n[![IMG_1508.jpg](https://s5.postimg.org/edxesn51j/IMG_1508.jpg)](https://postimg.org/image/3r3ln7ww3/)\n[![IMG_4506.jpg](https://s5.postimg.org/qxa5xezpj/IMG_4506.jpg)](https://postimg.org/image/xaz90o4lf/) \n## 博物馆\n### MoMA\n借着周五下午优衣库赞助的免票活动，穿过拥挤的人群与各地方言的嘈杂，带着典型工科生不懂现代艺术的细胞的我，匆匆的拍照下著名作品后，变远离了这圣地。这需要好好做功课的地方。\n[![IMG_4512.jpg](https://s5.postimg.org/rlj0gcyfb/IMG_4512.jpg)](https://postimg.org/image/8t75cs20z/)\n[![IMG_4514.jpg](https://s5.postimg.org/hzpg0279j/IMG_4514.jpg)](https://postimg.org/image/fv52yz5mr/)\n[![IMG_4517.jpg](https://s5.postimg.org/sy0pi8vuv/IMG_4517.jpg)](https://postimg.org/image/u0aw0seo3/)\n[![IMG_4518.jpg](https://s5.postimg.org/ppw8579l3/IMG_4518.jpg)](https://postimg.org/image/bw7vg5gzn/)\n[![IMG_4520.jpg](https://s5.postimg.org/mghsyqlhj/IMG_4520.jpg)](https://postimg.org/image/su6w1zqdf/)\n[![IMG_1434.jpg](https://s5.postimg.org/jy9w3a3wn/IMG_1434.jpg)](https://postimg.org/image/grfcjnjgj/)\n> I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.  \n\n### The Met\n三大博物馆其一，不可比拟的馆藏与凭借我贫瘠的中学文化知识能认出的绘画与雕塑作品，特展的兵马俑让我回想起在西安的种种。\n[![IMG_4597.jpg](https://s5.postimg.org/z91bkx7pj/IMG_4597.jpg)](https://postimg.org/image/yw9xeqpfn/)\n[![IMG_4609.jpg](https://s5.postimg.org/65d3oojlz/IMG_4609.jpg)](https://postimg.org/image/5slpii1c3/)\n[![IMG_4612.jpg](https://s5.postimg.org/7vw4q6153/IMG_4612.jpg)](https://postimg.org/image/y479fjl8j/)\n[![IMG_4617.jpg](https://s5.postimg.org/h2efdg6dj/IMG_4617.jpg)](https://postimg.org/image/t49t7lflv/)\n[![IMG_4619.jpg](https://s5.postimg.org/5orw28vuv/IMG_4619.jpg)](https://postimg.org/image/d4r5o1jk3/)\n[![IMG_4620.jpg](https://s5.postimg.org/lydgreh53/IMG_4620.jpg)](https://postimg.org/image/uteb1x5xf/)\n化学课本上隐藏的拉瓦锡的夫人\n[![IMG_4622.jpg](https://s5.postimg.org/mmmbacfuv/IMG_4622.jpg)](https://postimg.org/image/4wkmpb29v/)\n没有瘦脸的珍珠耳环的少女\n[![IMG_4624.jpg](https://s5.postimg.org/gj4qqfpl3/IMG_4624.jpg)](https://postimg.org/image/3rqkjxfsz/)\n\n## 杂\n老友记，小鬼当家的场景与现实  \n[![IMG_1706.jpg](https://s5.postimg.org/hji0iunnr/IMG_1706.jpg)](https://postimg.org/image/m5e4r796r/)\n[![IMG_4670.jpg](https://s5.postimg.org/r4om2fvwn/IMG_4670.jpg)](https://postimg.org/image/lgibbjrk3/)\n游客们华丽的马车与不为人知的功能。\n[![IMG_4672.jpg](https://s5.postimg.org/7ybez9fev/IMG_4672.jpg)](https://postimg.org/image/5gznrzvib/)\n[![IMG_4691.jpg](https://s5.postimg.org/r24qfls93/IMG_4691.jpg)](https://postimg.org/image/9c31ukeo3/)  \n九一一的纪念群 \n[![IMG_5132.jpg](https://s5.postimg.org/j844u7kg7/IMG_5132.jpg)](https://postimg.org/image/j844u7kg3/) \n[![IMG_5134.jpg](https://s5.postimg.org/wo4xovx3b/IMG_5134.jpg)](https://postimg.org/image/dj1of4if7/)\n落日与余晖\n[![IMG_5136.jpg](https://s5.postimg.org/m016q1n47/IMG_5136.jpg)](https://postimg.org/image/6rb9c9tfn/)\n# 波士顿\n>这些政治事件已经影响了整个国家的历史，正在塑造来到这个伟大国家的人民的思想，波士顿在其中扮演了领头的角色。  \n>-- 亨利·卡伯特·洛奇\n\n## Freedom Trail\n行走在这自由之路，就如同行走在美国短暂的历史的长河上;坐着鸭子船就随着激昂的讲解回到了光辉岁月。\n[![IMG_5119.jpg](https://s5.postimg.org/gde0k1zd3/IMG_5119.jpg)](https://postimg.org/image/p8euuko5f/)\n[![IMG_4714.jpg](https://s5.postimg.org/e4v8oz2vb/IMG_4714.jpg)](https://postimg.org/image/hoh6es5kz/)\n[![IMG_4724.jpg](https://s5.postimg.org/6z3hmits7/IMG_4724.jpg)](https://postimg.org/image/m7tf0angj/)\n[![IMG_4726.jpg](https://s5.postimg.org/8cv4htt1j/IMG_4726.jpg)](https://postimg.org/image/68argqrer/)\n[![IMG_4729.jpg](https://s5.postimg.org/9qmrd4sav/IMG_4729.jpg)](https://postimg.org/image/6wjlzoq4j/)\n[![IMG_4716.jpg](https://s5.postimg.org/4j1o8obpj/IMG_4716.jpg)](https://postimg.org/image/tcb89bupv/)\n## New England Clam Chowder\n###小历史\nThe earliest-established and most popular variety of clam chowder, New England clam chowder, was introduced to the region by French, Nova Scotian, or British settlers, becoming common in the 18th century. The first recipe for another variety, Manhattan clam chowder, known for using tomatoes and its consequently distinctly red coloring, was published in 1934. In 1939, the New England state of Maine debated legislation that would outlaw the use of tomatoes in chowder, thereby essentially prohibiting the \"Manhattan\" form.\n### 居家必备\n一种美国式的浓汤，以蛤为主要材料，配以马铃薯及洋葱等配料，几乎每个餐馆都会有的产品，也是我进入进英格兰地区后每次必点的餐品\n[![IMG_4739.jpg](https://s5.postimg.org/3n56t8213/IMG_4739.jpg)](https://postimg.org/image/5rpjub3nn/)\n## 交通\n不得不说波士顿的历史特点绿线，能形容为城区是地铁，郊外是公交，时不常你赛跑都比它快。每个车厢有售票员，上车厢需要跟公交似的有几个台阶--因为100年的历史，郊区几乎每个路口必停，站台简陋到类似公交--所以每年还有个和绿线赛跑的活动，成为一大特色！\n[![IMG_5183.png](https://s5.postimg.org/4n032o6kn/IMG_5183.png)](https://postimg.org/image/3kpwk4nr7/)\n[![IMG_4707.jpg](https://s5.postimg.org/3w2rj5etj/IMG_4707.jpg)](https://postimg.org/image/w8y99m0jn/)\n[![IMG_4748.jpg](https://s5.postimg.org/lbwxkuds7/IMG_4748.jpg)](https://postimg.org/image/srw76n1hf/)\n## 大学\n不是很明白家长们争先恐后的摸摸后人模仿的哈佛先生的脚，似乎孩子就能进似的，我似乎更关注胡适之先生赠送的石碑，还是比较有特色的。  \n脚\n[![IMG_3251.jpg](https://s5.postimg.org/mgvl3ypmv/IMG_3251.jpg)](https://postimg.org/image/m446xs7cz/)  \n图书馆\n[![IMG_5101.jpg](https://s5.postimg.org/4qkprfxaf/IMG_5101.jpg)](https://postimg.org/image/z80kizkn7/)  \n法学院毕业生与石碑\n[![IMG_5094.jpg](https://s5.postimg.org/s7ckq7ivb/IMG_5094.jpg)](https://postimg.org/image/s7ckq7iv7/)\n[![IMG_5096.jpg](https://s5.postimg.org/unee420xz/IMG_5096.jpg)](https://postimg.org/image/xhhjhi343/)  \n \nMIT的风格就比较典型啦，刚一进去仿佛苏联老大哥的工业化铺面。  \n[![IMG_4871.jpg](https://s5.postimg.org/6d9xco9c7/IMG_4871.jpg)](https://postimg.org/image/bootxdver/)\n[![IMG_4877.jpg](https://s5.postimg.org/snxscn6mf/IMG_4877.jpg)](https://postimg.org/image/vusbw9r2b/)\n[![IMG_4868.jpg](https://s5.postimg.org/uif884j0n/IMG_4868.jpg)](https://postimg.org/image/6rfuq0itf/)\n特色的如人工智能实验室楼如下\n[![IMG_4878.jpg](https://s5.postimg.org/ajurs08xz/IMG_4878.jpg)](https://postimg.org/image/94t73a7ur/)\n[![IMG_4879.jpg](https://s5.postimg.org/k34glgwg7/IMG_4879.jpg)](https://postimg.org/image/nzhshghfn/)","source":"_posts/Joshua之美东探索II-纽约波士顿.md","raw":"---\ntitle: Joshua之美东探索II--纽约波士顿\ncomments: true\ndate: 2017-05-31 17:34:00\nupdated: 2017-05-31 17:34:00\ncategories: Travel\ntags: [New York, Boston]\n---\n> Time: 2017-05-20~05-23  \n> Travel: Bus\n\n# 引子\n说起美东，不能不提的两个城市自然是大苹果城和历史底蕴深厚的波士顿，我这次也不能免俗；摩天楼下的摩肩与一波波爱国主义游客的接踵，交织着最热闹的双城。\n<!--more-->\n# 纽约\n> 如果你爱他，就送他去纽约，因为那里是天堂；如果你恨他，就送他去纽约，因为那里是地狱 --<北京人在纽约> \n \n走进纽约\n[![IMG_1502.jpg](https://s5.postimg.org/6z8309j5z/IMG_1502.jpg)](https://postimg.org/image/wurtjgkzn/)\n## 楼\n不得不说的是各种有名的楼，比着赛着的通向云端，于是我也无法一一介绍，比如这座出名建筑，那座有历史底蕴的摩天楼，那个象征着20世纪纽约文化的擎天柱。不知道是不是住在人堆里的42街与8街的缘故，一出门便是流浪汉与游客的无视穿梭，纽约客们穿梭在见缝插针的无车的红灯路口，似乎绿灯下白白的行人标志，区分着憧憬的游客与纽约的老炮儿。  \n[![IMG_4584.jpg](https://s5.postimg.org/cmw086tzb/IMG_4584.jpg)](https://postimg.org/image/upp2zeptv/)\n[![IMG_4541.jpg](https://s5.postimg.org/6fp7lrnlz/IMG_4541.jpg)](https://postimg.org/image/87i6go6yr/)\n洛克菲勒中心-纽约夜景三选一，面朝帝国大厦背靠中央公园；多云下的夜晚依旧闪耀着忙碌的办公室的灯光，也就是不夜城的金融大苹果。  \n[![IMG_1450.jpg](https://s5.postimg.org/5mqdydlqf/IMG_1450.jpg)](https://postimg.org/image/cd6v7t8w3/)\n[![IMG_4552.jpg](https://s5.postimg.org/toouaa8uf/IMG_4552.jpg)](https://postimg.org/image/j1v14v0oz/)\n时代广场-这可以为建筑作结，唯一的可以树立着大大的灯箱，卖肉的宣传在小小的广场。当然我们也能见到熟悉的中国元素，软实力的扑广嘛。 \n[![IMG_1508.jpg](https://s5.postimg.org/edxesn51j/IMG_1508.jpg)](https://postimg.org/image/3r3ln7ww3/)\n[![IMG_4506.jpg](https://s5.postimg.org/qxa5xezpj/IMG_4506.jpg)](https://postimg.org/image/xaz90o4lf/) \n## 博物馆\n### MoMA\n借着周五下午优衣库赞助的免票活动，穿过拥挤的人群与各地方言的嘈杂，带着典型工科生不懂现代艺术的细胞的我，匆匆的拍照下著名作品后，变远离了这圣地。这需要好好做功课的地方。\n[![IMG_4512.jpg](https://s5.postimg.org/rlj0gcyfb/IMG_4512.jpg)](https://postimg.org/image/8t75cs20z/)\n[![IMG_4514.jpg](https://s5.postimg.org/hzpg0279j/IMG_4514.jpg)](https://postimg.org/image/fv52yz5mr/)\n[![IMG_4517.jpg](https://s5.postimg.org/sy0pi8vuv/IMG_4517.jpg)](https://postimg.org/image/u0aw0seo3/)\n[![IMG_4518.jpg](https://s5.postimg.org/ppw8579l3/IMG_4518.jpg)](https://postimg.org/image/bw7vg5gzn/)\n[![IMG_4520.jpg](https://s5.postimg.org/mghsyqlhj/IMG_4520.jpg)](https://postimg.org/image/su6w1zqdf/)\n[![IMG_1434.jpg](https://s5.postimg.org/jy9w3a3wn/IMG_1434.jpg)](https://postimg.org/image/grfcjnjgj/)\n> I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.  \n\n### The Met\n三大博物馆其一，不可比拟的馆藏与凭借我贫瘠的中学文化知识能认出的绘画与雕塑作品，特展的兵马俑让我回想起在西安的种种。\n[![IMG_4597.jpg](https://s5.postimg.org/z91bkx7pj/IMG_4597.jpg)](https://postimg.org/image/yw9xeqpfn/)\n[![IMG_4609.jpg](https://s5.postimg.org/65d3oojlz/IMG_4609.jpg)](https://postimg.org/image/5slpii1c3/)\n[![IMG_4612.jpg](https://s5.postimg.org/7vw4q6153/IMG_4612.jpg)](https://postimg.org/image/y479fjl8j/)\n[![IMG_4617.jpg](https://s5.postimg.org/h2efdg6dj/IMG_4617.jpg)](https://postimg.org/image/t49t7lflv/)\n[![IMG_4619.jpg](https://s5.postimg.org/5orw28vuv/IMG_4619.jpg)](https://postimg.org/image/d4r5o1jk3/)\n[![IMG_4620.jpg](https://s5.postimg.org/lydgreh53/IMG_4620.jpg)](https://postimg.org/image/uteb1x5xf/)\n化学课本上隐藏的拉瓦锡的夫人\n[![IMG_4622.jpg](https://s5.postimg.org/mmmbacfuv/IMG_4622.jpg)](https://postimg.org/image/4wkmpb29v/)\n没有瘦脸的珍珠耳环的少女\n[![IMG_4624.jpg](https://s5.postimg.org/gj4qqfpl3/IMG_4624.jpg)](https://postimg.org/image/3rqkjxfsz/)\n\n## 杂\n老友记，小鬼当家的场景与现实  \n[![IMG_1706.jpg](https://s5.postimg.org/hji0iunnr/IMG_1706.jpg)](https://postimg.org/image/m5e4r796r/)\n[![IMG_4670.jpg](https://s5.postimg.org/r4om2fvwn/IMG_4670.jpg)](https://postimg.org/image/lgibbjrk3/)\n游客们华丽的马车与不为人知的功能。\n[![IMG_4672.jpg](https://s5.postimg.org/7ybez9fev/IMG_4672.jpg)](https://postimg.org/image/5gznrzvib/)\n[![IMG_4691.jpg](https://s5.postimg.org/r24qfls93/IMG_4691.jpg)](https://postimg.org/image/9c31ukeo3/)  \n九一一的纪念群 \n[![IMG_5132.jpg](https://s5.postimg.org/j844u7kg7/IMG_5132.jpg)](https://postimg.org/image/j844u7kg3/) \n[![IMG_5134.jpg](https://s5.postimg.org/wo4xovx3b/IMG_5134.jpg)](https://postimg.org/image/dj1of4if7/)\n落日与余晖\n[![IMG_5136.jpg](https://s5.postimg.org/m016q1n47/IMG_5136.jpg)](https://postimg.org/image/6rb9c9tfn/)\n# 波士顿\n>这些政治事件已经影响了整个国家的历史，正在塑造来到这个伟大国家的人民的思想，波士顿在其中扮演了领头的角色。  \n>-- 亨利·卡伯特·洛奇\n\n## Freedom Trail\n行走在这自由之路，就如同行走在美国短暂的历史的长河上;坐着鸭子船就随着激昂的讲解回到了光辉岁月。\n[![IMG_5119.jpg](https://s5.postimg.org/gde0k1zd3/IMG_5119.jpg)](https://postimg.org/image/p8euuko5f/)\n[![IMG_4714.jpg](https://s5.postimg.org/e4v8oz2vb/IMG_4714.jpg)](https://postimg.org/image/hoh6es5kz/)\n[![IMG_4724.jpg](https://s5.postimg.org/6z3hmits7/IMG_4724.jpg)](https://postimg.org/image/m7tf0angj/)\n[![IMG_4726.jpg](https://s5.postimg.org/8cv4htt1j/IMG_4726.jpg)](https://postimg.org/image/68argqrer/)\n[![IMG_4729.jpg](https://s5.postimg.org/9qmrd4sav/IMG_4729.jpg)](https://postimg.org/image/6wjlzoq4j/)\n[![IMG_4716.jpg](https://s5.postimg.org/4j1o8obpj/IMG_4716.jpg)](https://postimg.org/image/tcb89bupv/)\n## New England Clam Chowder\n###小历史\nThe earliest-established and most popular variety of clam chowder, New England clam chowder, was introduced to the region by French, Nova Scotian, or British settlers, becoming common in the 18th century. The first recipe for another variety, Manhattan clam chowder, known for using tomatoes and its consequently distinctly red coloring, was published in 1934. In 1939, the New England state of Maine debated legislation that would outlaw the use of tomatoes in chowder, thereby essentially prohibiting the \"Manhattan\" form.\n### 居家必备\n一种美国式的浓汤，以蛤为主要材料，配以马铃薯及洋葱等配料，几乎每个餐馆都会有的产品，也是我进入进英格兰地区后每次必点的餐品\n[![IMG_4739.jpg](https://s5.postimg.org/3n56t8213/IMG_4739.jpg)](https://postimg.org/image/5rpjub3nn/)\n## 交通\n不得不说波士顿的历史特点绿线，能形容为城区是地铁，郊外是公交，时不常你赛跑都比它快。每个车厢有售票员，上车厢需要跟公交似的有几个台阶--因为100年的历史，郊区几乎每个路口必停，站台简陋到类似公交--所以每年还有个和绿线赛跑的活动，成为一大特色！\n[![IMG_5183.png](https://s5.postimg.org/4n032o6kn/IMG_5183.png)](https://postimg.org/image/3kpwk4nr7/)\n[![IMG_4707.jpg](https://s5.postimg.org/3w2rj5etj/IMG_4707.jpg)](https://postimg.org/image/w8y99m0jn/)\n[![IMG_4748.jpg](https://s5.postimg.org/lbwxkuds7/IMG_4748.jpg)](https://postimg.org/image/srw76n1hf/)\n## 大学\n不是很明白家长们争先恐后的摸摸后人模仿的哈佛先生的脚，似乎孩子就能进似的，我似乎更关注胡适之先生赠送的石碑，还是比较有特色的。  \n脚\n[![IMG_3251.jpg](https://s5.postimg.org/mgvl3ypmv/IMG_3251.jpg)](https://postimg.org/image/m446xs7cz/)  \n图书馆\n[![IMG_5101.jpg](https://s5.postimg.org/4qkprfxaf/IMG_5101.jpg)](https://postimg.org/image/z80kizkn7/)  \n法学院毕业生与石碑\n[![IMG_5094.jpg](https://s5.postimg.org/s7ckq7ivb/IMG_5094.jpg)](https://postimg.org/image/s7ckq7iv7/)\n[![IMG_5096.jpg](https://s5.postimg.org/unee420xz/IMG_5096.jpg)](https://postimg.org/image/xhhjhi343/)  \n \nMIT的风格就比较典型啦，刚一进去仿佛苏联老大哥的工业化铺面。  \n[![IMG_4871.jpg](https://s5.postimg.org/6d9xco9c7/IMG_4871.jpg)](https://postimg.org/image/bootxdver/)\n[![IMG_4877.jpg](https://s5.postimg.org/snxscn6mf/IMG_4877.jpg)](https://postimg.org/image/vusbw9r2b/)\n[![IMG_4868.jpg](https://s5.postimg.org/uif884j0n/IMG_4868.jpg)](https://postimg.org/image/6rfuq0itf/)\n特色的如人工智能实验室楼如下\n[![IMG_4878.jpg](https://s5.postimg.org/ajurs08xz/IMG_4878.jpg)](https://postimg.org/image/94t73a7ur/)\n[![IMG_4879.jpg](https://s5.postimg.org/k34glgwg7/IMG_4879.jpg)](https://postimg.org/image/nzhshghfn/)","slug":"Joshua之美东探索II-纽约波士顿","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdew000pm2ca93r687f2","content":"<blockquote>\n<p>Time: 2017-05-20~05-23<br>Travel: Bus</p>\n</blockquote>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>说起美东，不能不提的两个城市自然是大苹果城和历史底蕴深厚的波士顿，我这次也不能免俗；摩天楼下的摩肩与一波波爱国主义游客的接踵，交织着最热闹的双城。<br><a id=\"more\"></a></p>\n<h1 id=\"纽约\"><a href=\"#纽约\" class=\"headerlink\" title=\"纽约\"></a>纽约</h1><blockquote>\n<p>如果你爱他，就送他去纽约，因为那里是天堂；如果你恨他，就送他去纽约，因为那里是地狱 –&lt;北京人在纽约&gt; </p>\n</blockquote>\n<p>走进纽约<br><a href=\"https://postimg.org/image/wurtjgkzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6z8309j5z/IMG_1502.jpg\" alt=\"IMG_1502.jpg\"></a></p>\n<h2 id=\"楼\"><a href=\"#楼\" class=\"headerlink\" title=\"楼\"></a>楼</h2><p>不得不说的是各种有名的楼，比着赛着的通向云端，于是我也无法一一介绍，比如这座出名建筑，那座有历史底蕴的摩天楼，那个象征着20世纪纽约文化的擎天柱。不知道是不是住在人堆里的42街与8街的缘故，一出门便是流浪汉与游客的无视穿梭，纽约客们穿梭在见缝插针的无车的红灯路口，似乎绿灯下白白的行人标志，区分着憧憬的游客与纽约的老炮儿。<br><a href=\"https://postimg.org/image/upp2zeptv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/cmw086tzb/IMG_4584.jpg\" alt=\"IMG_4584.jpg\"></a><br><a href=\"https://postimg.org/image/87i6go6yr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6fp7lrnlz/IMG_4541.jpg\" alt=\"IMG_4541.jpg\"></a><br>洛克菲勒中心-纽约夜景三选一，面朝帝国大厦背靠中央公园；多云下的夜晚依旧闪耀着忙碌的办公室的灯光，也就是不夜城的金融大苹果。<br><a href=\"https://postimg.org/image/cd6v7t8w3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5mqdydlqf/IMG_1450.jpg\" alt=\"IMG_1450.jpg\"></a><br><a href=\"https://postimg.org/image/j1v14v0oz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/toouaa8uf/IMG_4552.jpg\" alt=\"IMG_4552.jpg\"></a><br>时代广场-这可以为建筑作结，唯一的可以树立着大大的灯箱，卖肉的宣传在小小的广场。当然我们也能见到熟悉的中国元素，软实力的扑广嘛。<br><a href=\"https://postimg.org/image/3r3ln7ww3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/edxesn51j/IMG_1508.jpg\" alt=\"IMG_1508.jpg\"></a><br><a href=\"https://postimg.org/image/xaz90o4lf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/qxa5xezpj/IMG_4506.jpg\" alt=\"IMG_4506.jpg\"></a> </p>\n<h2 id=\"博物馆\"><a href=\"#博物馆\" class=\"headerlink\" title=\"博物馆\"></a>博物馆</h2><h3 id=\"MoMA\"><a href=\"#MoMA\" class=\"headerlink\" title=\"MoMA\"></a>MoMA</h3><p>借着周五下午优衣库赞助的免票活动，穿过拥挤的人群与各地方言的嘈杂，带着典型工科生不懂现代艺术的细胞的我，匆匆的拍照下著名作品后，变远离了这圣地。这需要好好做功课的地方。<br><a href=\"https://postimg.org/image/8t75cs20z/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/rlj0gcyfb/IMG_4512.jpg\" alt=\"IMG_4512.jpg\"></a><br><a href=\"https://postimg.org/image/fv52yz5mr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hzpg0279j/IMG_4514.jpg\" alt=\"IMG_4514.jpg\"></a><br><a href=\"https://postimg.org/image/u0aw0seo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/sy0pi8vuv/IMG_4517.jpg\" alt=\"IMG_4517.jpg\"></a><br><a href=\"https://postimg.org/image/bw7vg5gzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ppw8579l3/IMG_4518.jpg\" alt=\"IMG_4518.jpg\"></a><br><a href=\"https://postimg.org/image/su6w1zqdf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mghsyqlhj/IMG_4520.jpg\" alt=\"IMG_4520.jpg\"></a><br><a href=\"https://postimg.org/image/grfcjnjgj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jy9w3a3wn/IMG_1434.jpg\" alt=\"IMG_1434.jpg\"></a></p>\n<blockquote>\n<p>I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.  </p>\n</blockquote>\n<h3 id=\"The-Met\"><a href=\"#The-Met\" class=\"headerlink\" title=\"The Met\"></a>The Met</h3><p>三大博物馆其一，不可比拟的馆藏与凭借我贫瘠的中学文化知识能认出的绘画与雕塑作品，特展的兵马俑让我回想起在西安的种种。<br><a href=\"https://postimg.org/image/yw9xeqpfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/z91bkx7pj/IMG_4597.jpg\" alt=\"IMG_4597.jpg\"></a><br><a href=\"https://postimg.org/image/5slpii1c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/65d3oojlz/IMG_4609.jpg\" alt=\"IMG_4609.jpg\"></a><br><a href=\"https://postimg.org/image/y479fjl8j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7vw4q6153/IMG_4612.jpg\" alt=\"IMG_4612.jpg\"></a><br><a href=\"https://postimg.org/image/t49t7lflv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/h2efdg6dj/IMG_4617.jpg\" alt=\"IMG_4617.jpg\"></a><br><a href=\"https://postimg.org/image/d4r5o1jk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5orw28vuv/IMG_4619.jpg\" alt=\"IMG_4619.jpg\"></a><br><a href=\"https://postimg.org/image/uteb1x5xf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/lydgreh53/IMG_4620.jpg\" alt=\"IMG_4620.jpg\"></a><br>化学课本上隐藏的拉瓦锡的夫人<br><a href=\"https://postimg.org/image/4wkmpb29v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mmmbacfuv/IMG_4622.jpg\" alt=\"IMG_4622.jpg\"></a><br>没有瘦脸的珍珠耳环的少女<br><a href=\"https://postimg.org/image/3rqkjxfsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gj4qqfpl3/IMG_4624.jpg\" alt=\"IMG_4624.jpg\"></a></p>\n<h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2><p>老友记，小鬼当家的场景与现实<br><a href=\"https://postimg.org/image/m5e4r796r/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hji0iunnr/IMG_1706.jpg\" alt=\"IMG_1706.jpg\"></a><br><a href=\"https://postimg.org/image/lgibbjrk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r4om2fvwn/IMG_4670.jpg\" alt=\"IMG_4670.jpg\"></a><br>游客们华丽的马车与不为人知的功能。<br><a href=\"https://postimg.org/image/5gznrzvib/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7ybez9fev/IMG_4672.jpg\" alt=\"IMG_4672.jpg\"></a><br><a href=\"https://postimg.org/image/9c31ukeo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r24qfls93/IMG_4691.jpg\" alt=\"IMG_4691.jpg\"></a><br>九一一的纪念群<br><a href=\"https://postimg.org/image/j844u7kg3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/j844u7kg7/IMG_5132.jpg\" alt=\"IMG_5132.jpg\"></a><br><a href=\"https://postimg.org/image/dj1of4if7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wo4xovx3b/IMG_5134.jpg\" alt=\"IMG_5134.jpg\"></a><br>落日与余晖<br><a href=\"https://postimg.org/image/6rb9c9tfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/m016q1n47/IMG_5136.jpg\" alt=\"IMG_5136.jpg\"></a></p>\n<h1 id=\"波士顿\"><a href=\"#波士顿\" class=\"headerlink\" title=\"波士顿\"></a>波士顿</h1><blockquote>\n<p>这些政治事件已经影响了整个国家的历史，正在塑造来到这个伟大国家的人民的思想，波士顿在其中扮演了领头的角色。<br>– 亨利·卡伯特·洛奇</p>\n</blockquote>\n<h2 id=\"Freedom-Trail\"><a href=\"#Freedom-Trail\" class=\"headerlink\" title=\"Freedom Trail\"></a>Freedom Trail</h2><p>行走在这自由之路，就如同行走在美国短暂的历史的长河上;坐着鸭子船就随着激昂的讲解回到了光辉岁月。<br><a href=\"https://postimg.org/image/p8euuko5f/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gde0k1zd3/IMG_5119.jpg\" alt=\"IMG_5119.jpg\"></a><br><a href=\"https://postimg.org/image/hoh6es5kz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/e4v8oz2vb/IMG_4714.jpg\" alt=\"IMG_4714.jpg\"></a><br><a href=\"https://postimg.org/image/m7tf0angj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6z3hmits7/IMG_4724.jpg\" alt=\"IMG_4724.jpg\"></a><br><a href=\"https://postimg.org/image/68argqrer/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/8cv4htt1j/IMG_4726.jpg\" alt=\"IMG_4726.jpg\"></a><br><a href=\"https://postimg.org/image/6wjlzoq4j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9qmrd4sav/IMG_4729.jpg\" alt=\"IMG_4729.jpg\"></a><br><a href=\"https://postimg.org/image/tcb89bupv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4j1o8obpj/IMG_4716.jpg\" alt=\"IMG_4716.jpg\"></a></p>\n<h2 id=\"New-England-Clam-Chowder\"><a href=\"#New-England-Clam-Chowder\" class=\"headerlink\" title=\"New England Clam Chowder\"></a>New England Clam Chowder</h2><p>###小历史<br>The earliest-established and most popular variety of clam chowder, New England clam chowder, was introduced to the region by French, Nova Scotian, or British settlers, becoming common in the 18th century. The first recipe for another variety, Manhattan clam chowder, known for using tomatoes and its consequently distinctly red coloring, was published in 1934. In 1939, the New England state of Maine debated legislation that would outlaw the use of tomatoes in chowder, thereby essentially prohibiting the “Manhattan” form.</p>\n<h3 id=\"居家必备\"><a href=\"#居家必备\" class=\"headerlink\" title=\"居家必备\"></a>居家必备</h3><p>一种美国式的浓汤，以蛤为主要材料，配以马铃薯及洋葱等配料，几乎每个餐馆都会有的产品，也是我进入进英格兰地区后每次必点的餐品<br><a href=\"https://postimg.org/image/5rpjub3nn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3n56t8213/IMG_4739.jpg\" alt=\"IMG_4739.jpg\"></a></p>\n<h2 id=\"交通\"><a href=\"#交通\" class=\"headerlink\" title=\"交通\"></a>交通</h2><p>不得不说波士顿的历史特点绿线，能形容为城区是地铁，郊外是公交，时不常你赛跑都比它快。每个车厢有售票员，上车厢需要跟公交似的有几个台阶–因为100年的历史，郊区几乎每个路口必停，站台简陋到类似公交–所以每年还有个和绿线赛跑的活动，成为一大特色！<br><a href=\"https://postimg.org/image/3kpwk4nr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4n032o6kn/IMG_5183.png\" alt=\"IMG_5183.png\"></a><br><a href=\"https://postimg.org/image/w8y99m0jn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3w2rj5etj/IMG_4707.jpg\" alt=\"IMG_4707.jpg\"></a><br><a href=\"https://postimg.org/image/srw76n1hf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/lbwxkuds7/IMG_4748.jpg\" alt=\"IMG_4748.jpg\"></a></p>\n<h2 id=\"大学\"><a href=\"#大学\" class=\"headerlink\" title=\"大学\"></a>大学</h2><p>不是很明白家长们争先恐后的摸摸后人模仿的哈佛先生的脚，似乎孩子就能进似的，我似乎更关注胡适之先生赠送的石碑，还是比较有特色的。<br>脚<br><a href=\"https://postimg.org/image/m446xs7cz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mgvl3ypmv/IMG_3251.jpg\" alt=\"IMG_3251.jpg\"></a><br>图书馆<br><a href=\"https://postimg.org/image/z80kizkn7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4qkprfxaf/IMG_5101.jpg\" alt=\"IMG_5101.jpg\"></a><br>法学院毕业生与石碑<br><a href=\"https://postimg.org/image/s7ckq7iv7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/s7ckq7ivb/IMG_5094.jpg\" alt=\"IMG_5094.jpg\"></a><br><a href=\"https://postimg.org/image/xhhjhi343/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/unee420xz/IMG_5096.jpg\" alt=\"IMG_5096.jpg\"></a>  </p>\n<p>MIT的风格就比较典型啦，刚一进去仿佛苏联老大哥的工业化铺面。<br><a href=\"https://postimg.org/image/bootxdver/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6d9xco9c7/IMG_4871.jpg\" alt=\"IMG_4871.jpg\"></a><br><a href=\"https://postimg.org/image/vusbw9r2b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/snxscn6mf/IMG_4877.jpg\" alt=\"IMG_4877.jpg\"></a><br><a href=\"https://postimg.org/image/6rfuq0itf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/uif884j0n/IMG_4868.jpg\" alt=\"IMG_4868.jpg\"></a><br>特色的如人工智能实验室楼如下<br><a href=\"https://postimg.org/image/94t73a7ur/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ajurs08xz/IMG_4878.jpg\" alt=\"IMG_4878.jpg\"></a><br><a href=\"https://postimg.org/image/nzhshghfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/k34glgwg7/IMG_4879.jpg\" alt=\"IMG_4879.jpg\"></a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Time: 2017-05-20~05-23<br>Travel: Bus</p>\n</blockquote>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>说起美东，不能不提的两个城市自然是大苹果城和历史底蕴深厚的波士顿，我这次也不能免俗；摩天楼下的摩肩与一波波爱国主义游客的接踵，交织着最热闹的双城。<br>","more":"</p>\n<h1 id=\"纽约\"><a href=\"#纽约\" class=\"headerlink\" title=\"纽约\"></a>纽约</h1><blockquote>\n<p>如果你爱他，就送他去纽约，因为那里是天堂；如果你恨他，就送他去纽约，因为那里是地狱 –&lt;北京人在纽约&gt; </p>\n</blockquote>\n<p>走进纽约<br><a href=\"https://postimg.org/image/wurtjgkzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6z8309j5z/IMG_1502.jpg\" alt=\"IMG_1502.jpg\"></a></p>\n<h2 id=\"楼\"><a href=\"#楼\" class=\"headerlink\" title=\"楼\"></a>楼</h2><p>不得不说的是各种有名的楼，比着赛着的通向云端，于是我也无法一一介绍，比如这座出名建筑，那座有历史底蕴的摩天楼，那个象征着20世纪纽约文化的擎天柱。不知道是不是住在人堆里的42街与8街的缘故，一出门便是流浪汉与游客的无视穿梭，纽约客们穿梭在见缝插针的无车的红灯路口，似乎绿灯下白白的行人标志，区分着憧憬的游客与纽约的老炮儿。<br><a href=\"https://postimg.org/image/upp2zeptv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/cmw086tzb/IMG_4584.jpg\" alt=\"IMG_4584.jpg\"></a><br><a href=\"https://postimg.org/image/87i6go6yr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6fp7lrnlz/IMG_4541.jpg\" alt=\"IMG_4541.jpg\"></a><br>洛克菲勒中心-纽约夜景三选一，面朝帝国大厦背靠中央公园；多云下的夜晚依旧闪耀着忙碌的办公室的灯光，也就是不夜城的金融大苹果。<br><a href=\"https://postimg.org/image/cd6v7t8w3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5mqdydlqf/IMG_1450.jpg\" alt=\"IMG_1450.jpg\"></a><br><a href=\"https://postimg.org/image/j1v14v0oz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/toouaa8uf/IMG_4552.jpg\" alt=\"IMG_4552.jpg\"></a><br>时代广场-这可以为建筑作结，唯一的可以树立着大大的灯箱，卖肉的宣传在小小的广场。当然我们也能见到熟悉的中国元素，软实力的扑广嘛。<br><a href=\"https://postimg.org/image/3r3ln7ww3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/edxesn51j/IMG_1508.jpg\" alt=\"IMG_1508.jpg\"></a><br><a href=\"https://postimg.org/image/xaz90o4lf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/qxa5xezpj/IMG_4506.jpg\" alt=\"IMG_4506.jpg\"></a> </p>\n<h2 id=\"博物馆\"><a href=\"#博物馆\" class=\"headerlink\" title=\"博物馆\"></a>博物馆</h2><h3 id=\"MoMA\"><a href=\"#MoMA\" class=\"headerlink\" title=\"MoMA\"></a>MoMA</h3><p>借着周五下午优衣库赞助的免票活动，穿过拥挤的人群与各地方言的嘈杂，带着典型工科生不懂现代艺术的细胞的我，匆匆的拍照下著名作品后，变远离了这圣地。这需要好好做功课的地方。<br><a href=\"https://postimg.org/image/8t75cs20z/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/rlj0gcyfb/IMG_4512.jpg\" alt=\"IMG_4512.jpg\"></a><br><a href=\"https://postimg.org/image/fv52yz5mr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hzpg0279j/IMG_4514.jpg\" alt=\"IMG_4514.jpg\"></a><br><a href=\"https://postimg.org/image/u0aw0seo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/sy0pi8vuv/IMG_4517.jpg\" alt=\"IMG_4517.jpg\"></a><br><a href=\"https://postimg.org/image/bw7vg5gzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ppw8579l3/IMG_4518.jpg\" alt=\"IMG_4518.jpg\"></a><br><a href=\"https://postimg.org/image/su6w1zqdf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mghsyqlhj/IMG_4520.jpg\" alt=\"IMG_4520.jpg\"></a><br><a href=\"https://postimg.org/image/grfcjnjgj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jy9w3a3wn/IMG_1434.jpg\" alt=\"IMG_1434.jpg\"></a></p>\n<blockquote>\n<p>I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.  </p>\n</blockquote>\n<h3 id=\"The-Met\"><a href=\"#The-Met\" class=\"headerlink\" title=\"The Met\"></a>The Met</h3><p>三大博物馆其一，不可比拟的馆藏与凭借我贫瘠的中学文化知识能认出的绘画与雕塑作品，特展的兵马俑让我回想起在西安的种种。<br><a href=\"https://postimg.org/image/yw9xeqpfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/z91bkx7pj/IMG_4597.jpg\" alt=\"IMG_4597.jpg\"></a><br><a href=\"https://postimg.org/image/5slpii1c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/65d3oojlz/IMG_4609.jpg\" alt=\"IMG_4609.jpg\"></a><br><a href=\"https://postimg.org/image/y479fjl8j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7vw4q6153/IMG_4612.jpg\" alt=\"IMG_4612.jpg\"></a><br><a href=\"https://postimg.org/image/t49t7lflv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/h2efdg6dj/IMG_4617.jpg\" alt=\"IMG_4617.jpg\"></a><br><a href=\"https://postimg.org/image/d4r5o1jk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5orw28vuv/IMG_4619.jpg\" alt=\"IMG_4619.jpg\"></a><br><a href=\"https://postimg.org/image/uteb1x5xf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/lydgreh53/IMG_4620.jpg\" alt=\"IMG_4620.jpg\"></a><br>化学课本上隐藏的拉瓦锡的夫人<br><a href=\"https://postimg.org/image/4wkmpb29v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mmmbacfuv/IMG_4622.jpg\" alt=\"IMG_4622.jpg\"></a><br>没有瘦脸的珍珠耳环的少女<br><a href=\"https://postimg.org/image/3rqkjxfsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gj4qqfpl3/IMG_4624.jpg\" alt=\"IMG_4624.jpg\"></a></p>\n<h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2><p>老友记，小鬼当家的场景与现实<br><a href=\"https://postimg.org/image/m5e4r796r/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hji0iunnr/IMG_1706.jpg\" alt=\"IMG_1706.jpg\"></a><br><a href=\"https://postimg.org/image/lgibbjrk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r4om2fvwn/IMG_4670.jpg\" alt=\"IMG_4670.jpg\"></a><br>游客们华丽的马车与不为人知的功能。<br><a href=\"https://postimg.org/image/5gznrzvib/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7ybez9fev/IMG_4672.jpg\" alt=\"IMG_4672.jpg\"></a><br><a href=\"https://postimg.org/image/9c31ukeo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r24qfls93/IMG_4691.jpg\" alt=\"IMG_4691.jpg\"></a><br>九一一的纪念群<br><a href=\"https://postimg.org/image/j844u7kg3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/j844u7kg7/IMG_5132.jpg\" alt=\"IMG_5132.jpg\"></a><br><a href=\"https://postimg.org/image/dj1of4if7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wo4xovx3b/IMG_5134.jpg\" alt=\"IMG_5134.jpg\"></a><br>落日与余晖<br><a href=\"https://postimg.org/image/6rb9c9tfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/m016q1n47/IMG_5136.jpg\" alt=\"IMG_5136.jpg\"></a></p>\n<h1 id=\"波士顿\"><a href=\"#波士顿\" class=\"headerlink\" title=\"波士顿\"></a>波士顿</h1><blockquote>\n<p>这些政治事件已经影响了整个国家的历史，正在塑造来到这个伟大国家的人民的思想，波士顿在其中扮演了领头的角色。<br>– 亨利·卡伯特·洛奇</p>\n</blockquote>\n<h2 id=\"Freedom-Trail\"><a href=\"#Freedom-Trail\" class=\"headerlink\" title=\"Freedom Trail\"></a>Freedom Trail</h2><p>行走在这自由之路，就如同行走在美国短暂的历史的长河上;坐着鸭子船就随着激昂的讲解回到了光辉岁月。<br><a href=\"https://postimg.org/image/p8euuko5f/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gde0k1zd3/IMG_5119.jpg\" alt=\"IMG_5119.jpg\"></a><br><a href=\"https://postimg.org/image/hoh6es5kz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/e4v8oz2vb/IMG_4714.jpg\" alt=\"IMG_4714.jpg\"></a><br><a href=\"https://postimg.org/image/m7tf0angj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6z3hmits7/IMG_4724.jpg\" alt=\"IMG_4724.jpg\"></a><br><a href=\"https://postimg.org/image/68argqrer/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/8cv4htt1j/IMG_4726.jpg\" alt=\"IMG_4726.jpg\"></a><br><a href=\"https://postimg.org/image/6wjlzoq4j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9qmrd4sav/IMG_4729.jpg\" alt=\"IMG_4729.jpg\"></a><br><a href=\"https://postimg.org/image/tcb89bupv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4j1o8obpj/IMG_4716.jpg\" alt=\"IMG_4716.jpg\"></a></p>\n<h2 id=\"New-England-Clam-Chowder\"><a href=\"#New-England-Clam-Chowder\" class=\"headerlink\" title=\"New England Clam Chowder\"></a>New England Clam Chowder</h2><p>###小历史<br>The earliest-established and most popular variety of clam chowder, New England clam chowder, was introduced to the region by French, Nova Scotian, or British settlers, becoming common in the 18th century. The first recipe for another variety, Manhattan clam chowder, known for using tomatoes and its consequently distinctly red coloring, was published in 1934. In 1939, the New England state of Maine debated legislation that would outlaw the use of tomatoes in chowder, thereby essentially prohibiting the “Manhattan” form.</p>\n<h3 id=\"居家必备\"><a href=\"#居家必备\" class=\"headerlink\" title=\"居家必备\"></a>居家必备</h3><p>一种美国式的浓汤，以蛤为主要材料，配以马铃薯及洋葱等配料，几乎每个餐馆都会有的产品，也是我进入进英格兰地区后每次必点的餐品<br><a href=\"https://postimg.org/image/5rpjub3nn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3n56t8213/IMG_4739.jpg\" alt=\"IMG_4739.jpg\"></a></p>\n<h2 id=\"交通\"><a href=\"#交通\" class=\"headerlink\" title=\"交通\"></a>交通</h2><p>不得不说波士顿的历史特点绿线，能形容为城区是地铁，郊外是公交，时不常你赛跑都比它快。每个车厢有售票员，上车厢需要跟公交似的有几个台阶–因为100年的历史，郊区几乎每个路口必停，站台简陋到类似公交–所以每年还有个和绿线赛跑的活动，成为一大特色！<br><a href=\"https://postimg.org/image/3kpwk4nr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4n032o6kn/IMG_5183.png\" alt=\"IMG_5183.png\"></a><br><a href=\"https://postimg.org/image/w8y99m0jn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3w2rj5etj/IMG_4707.jpg\" alt=\"IMG_4707.jpg\"></a><br><a href=\"https://postimg.org/image/srw76n1hf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/lbwxkuds7/IMG_4748.jpg\" alt=\"IMG_4748.jpg\"></a></p>\n<h2 id=\"大学\"><a href=\"#大学\" class=\"headerlink\" title=\"大学\"></a>大学</h2><p>不是很明白家长们争先恐后的摸摸后人模仿的哈佛先生的脚，似乎孩子就能进似的，我似乎更关注胡适之先生赠送的石碑，还是比较有特色的。<br>脚<br><a href=\"https://postimg.org/image/m446xs7cz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/mgvl3ypmv/IMG_3251.jpg\" alt=\"IMG_3251.jpg\"></a><br>图书馆<br><a href=\"https://postimg.org/image/z80kizkn7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4qkprfxaf/IMG_5101.jpg\" alt=\"IMG_5101.jpg\"></a><br>法学院毕业生与石碑<br><a href=\"https://postimg.org/image/s7ckq7iv7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/s7ckq7ivb/IMG_5094.jpg\" alt=\"IMG_5094.jpg\"></a><br><a href=\"https://postimg.org/image/xhhjhi343/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/unee420xz/IMG_5096.jpg\" alt=\"IMG_5096.jpg\"></a>  </p>\n<p>MIT的风格就比较典型啦，刚一进去仿佛苏联老大哥的工业化铺面。<br><a href=\"https://postimg.org/image/bootxdver/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/6d9xco9c7/IMG_4871.jpg\" alt=\"IMG_4871.jpg\"></a><br><a href=\"https://postimg.org/image/vusbw9r2b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/snxscn6mf/IMG_4877.jpg\" alt=\"IMG_4877.jpg\"></a><br><a href=\"https://postimg.org/image/6rfuq0itf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/uif884j0n/IMG_4868.jpg\" alt=\"IMG_4868.jpg\"></a><br>特色的如人工智能实验室楼如下<br><a href=\"https://postimg.org/image/94t73a7ur/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ajurs08xz/IMG_4878.jpg\" alt=\"IMG_4878.jpg\"></a><br><a href=\"https://postimg.org/image/nzhshghfn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/k34glgwg7/IMG_4879.jpg\" alt=\"IMG_4879.jpg\"></a></p>"},{"title":"Joshua之美东探索I-罗德岛","comments":1,"date":"2017-05-29T18:45:19.000Z","updated":"2017-05-29T18:45:19.000Z","_content":"> Time: 2017-05-22  \n> Location: Rhode Island  \n> Travel: Zipcar\n> \n> 19世纪富豪们的英伦贵族庄园\n\n# 缘由\n知道罗德岛的时候我似乎还没有来到美国, 自从在大学时代迷上了Downton Abbey后，便想参观各地的古堡豪宅。彼时的我以为罗德岛的豪宅坐落在一个个风景如画的海岛上，还惊异于美国竟有如此风景秀丽的地方，实际上这些豪宅确实在一个大岛上，而罗德岛也不是一个岛，是一个州，美国五十个州里面最小的州。\n<!--more-->  \n# 访问\n## 介绍\n罗得岛与普洛威顿斯庄园州（英语：State of Rhode Island and Providence Plantations）是美国最小的一个州，由于名称过长简称为罗得岛（Rhode Island），是美国州名最长的一州。因该岛形势类似希腊爱琴海口外的罗得岛，便被改名为罗得岛。此州属于美国东北部新英格兰的一部分。也是美国独立革命中的早期13州联盟之一。 周围人了解这个地方可能的原因是有布朗大学和罗德岛设计艺术学院坐落在此吧。\n## 豪宅\n> Before there were the Hamptons, before there was Malibu, there was Newport - acoastal summer playground of the hyper-rich, to which they could repair to consort among themselves and, not least, to show off.\n\n由于拥有美丽的海岸风光，夏季又清凉宜人，19世纪的黄金年代开始，大批富豪\n陆续在这里建造起他们的奢华度假别墅，其中以铁路大亨Vanderbilt最为出名。\n参观中的讲解似乎能让人回想到他们黄金时代的岁月，享受着贵族的生活。印象比较深刻的是小姐们的日常，从吃早饭开始，读书，午饭，园中散步，下午茶，晚宴，聚会，大大小小的活动都需要穿着不同的衣服，为了体现小姐们的姿态，所以她们每天的生活也是蛮忙碌的，换衣服占据的时间永远是大头。  \n我觉得当时他们骨子里都有一种向往英国贵族生活的追求，不仅从仪式上，装潢里还有待人接物的方式，尽量避免看出是暴发户的感觉。\n> 参观网址：http://www.newportmansions.org/  \n\n### The Brakers\n> Location: 44 Ochre Point Ave., Newport, RI 02840  \n\n模仿16世纪义大利西北部的海港Genoa和Turin 的皇宫Palazzos 造型所建造出来的文艺复兴风格建筑物，拥有70间房间，是大众所公认最富丽堂皇的Newport豪宅之一，每间房间都有衣帽间与独立卫浴，更有意大利整块运来的大理石砌为墙，及完整石块雕刻而成的浴缸，墙外的超大片平地更能直接独享专属海景。  \n入口： \n[![IMG_4783.jpg](https://s5.postimg.org/3ndghyix3/IMG_4783.jpg)](https://postimg.org/image/u8fzdilab/)  \n钢琴：\n[![IMG_4797.jpg](https://s5.postimg.org/wzz944jt3/IMG_4797.jpg)](https://postimg.org/image/yrs7z135v/)  \n浴室：  \n[![IMG_4810.jpg](https://s5.postimg.org/5qnvpmipz/IMG_4810.jpg)](https://postimg.org/image/5153d9i6b/)  \n观景： \n[![IMG_4855.jpg](https://s5.postimg.org/ymjvbm6h3/IMG_4855.jpg)](https://postimg.org/image/uq6jfmlhf/)\n### Marble House\n> Location: 596 Bellevue Avenue, Newport, RI 02840  \n\n与The Breakers同为Vanderbilt所有，不仅雕梁画栋，天花板也是布满油画及金箔，从名字上就可以看出这所房子以大理石为主要特色。  \n看房： \n[![IMG_4851.jpg](https://s5.postimg.org/ictp8pvt3/IMG_4851.jpg)](https://postimg.org/image/sa4q1s3er/)\n[![FullSizeRender 3.jpg](https://s5.postimg.org/q0l74rjuv/Full_Size_Render_3.jpg)](https://postimg.org/image/41eshk30j/)\n休息室：  \n[![FullSizeRender 2.jpg](https://s5.postimg.org/r45bgq4hz/Full_Size_Render_2.jpg)](https://postimg.org/image/54ywtinnn/)\n卧室：  \n[![FullSizeRender.jpg](https://s5.postimg.org/b9qf6ufrb/Full_Size_Render.jpg)](https://postimg.org/image/f63r2u0qr/)\n巨大的草坪与无敌的海景  \n[![FullSizeRender 5.jpg](https://s5.postimg.org/4kjvqtufb/Full_Size_Render_5.jpg)](https://postimg.org/image/soanf4cw3/)\n\n## 饮食 The White House Tavern\n> Location: 26 Marlborough St, Newport, RI 02840    \n\n[![IMG_4779.jpg](https://s5.postimg.org/ruouv0s3r/IMG_4779.jpg)](https://postimg.org/image/6l18k6bsz/)  \n[![IMG_4778.jpg](https://s5.postimg.org/avfwfrgw7/IMG_4778.jpg)](https://postimg.org/image/e2afze1c3/)\n这家The White House Tavern号称是全美最老客栈，1673年成为对外营业的餐馆。给我的感受是充满了怀旧的气息，食物上中规中矩但也可能是我们体会不到旧时代的做法。  \n来自官网的历史: It’s hard to imagine life in 1673 when The White Horse Tavern opened.  The new world was an unruly collection of English colonies, and colonial Newport was particularly harsh with long frigid winters, no heat, electricity or other modern conveniences. Taverns played an important role in those early days, and The White Horse was a regular haunt for Colonists, British soldiers, Hessian mercenaries, pirates, sailors, founding fathers and all manner of early American folk. Take a look at this video to see why many consider us a “bucket list bar.”  \n餐厅装潢： \n![](https://s5.postimg.org/f74i4rnt3/IMG_4772.jpg)\nLogo: \n![FullSizeRender 2.jpg](https://s5.postimg.org/4a7rtqqfb/Full_Size_Render_2.jpg)\nFood: \n![FullSizeRender.jpg](https://s5.postimg.org/pv893lxs7/Full_Size_Render.jpg)","source":"_posts/Joshua之美东探索I-罗德岛.md","raw":"---\ntitle: Joshua之美东探索I-罗德岛\ncomments: true\ndate: 2017-05-29 11:45:19\nupdated: 2017-05-29 11:45:19\ncategories: Travel\ntags: RhodeIsland\n---\n> Time: 2017-05-22  \n> Location: Rhode Island  \n> Travel: Zipcar\n> \n> 19世纪富豪们的英伦贵族庄园\n\n# 缘由\n知道罗德岛的时候我似乎还没有来到美国, 自从在大学时代迷上了Downton Abbey后，便想参观各地的古堡豪宅。彼时的我以为罗德岛的豪宅坐落在一个个风景如画的海岛上，还惊异于美国竟有如此风景秀丽的地方，实际上这些豪宅确实在一个大岛上，而罗德岛也不是一个岛，是一个州，美国五十个州里面最小的州。\n<!--more-->  \n# 访问\n## 介绍\n罗得岛与普洛威顿斯庄园州（英语：State of Rhode Island and Providence Plantations）是美国最小的一个州，由于名称过长简称为罗得岛（Rhode Island），是美国州名最长的一州。因该岛形势类似希腊爱琴海口外的罗得岛，便被改名为罗得岛。此州属于美国东北部新英格兰的一部分。也是美国独立革命中的早期13州联盟之一。 周围人了解这个地方可能的原因是有布朗大学和罗德岛设计艺术学院坐落在此吧。\n## 豪宅\n> Before there were the Hamptons, before there was Malibu, there was Newport - acoastal summer playground of the hyper-rich, to which they could repair to consort among themselves and, not least, to show off.\n\n由于拥有美丽的海岸风光，夏季又清凉宜人，19世纪的黄金年代开始，大批富豪\n陆续在这里建造起他们的奢华度假别墅，其中以铁路大亨Vanderbilt最为出名。\n参观中的讲解似乎能让人回想到他们黄金时代的岁月，享受着贵族的生活。印象比较深刻的是小姐们的日常，从吃早饭开始，读书，午饭，园中散步，下午茶，晚宴，聚会，大大小小的活动都需要穿着不同的衣服，为了体现小姐们的姿态，所以她们每天的生活也是蛮忙碌的，换衣服占据的时间永远是大头。  \n我觉得当时他们骨子里都有一种向往英国贵族生活的追求，不仅从仪式上，装潢里还有待人接物的方式，尽量避免看出是暴发户的感觉。\n> 参观网址：http://www.newportmansions.org/  \n\n### The Brakers\n> Location: 44 Ochre Point Ave., Newport, RI 02840  \n\n模仿16世纪义大利西北部的海港Genoa和Turin 的皇宫Palazzos 造型所建造出来的文艺复兴风格建筑物，拥有70间房间，是大众所公认最富丽堂皇的Newport豪宅之一，每间房间都有衣帽间与独立卫浴，更有意大利整块运来的大理石砌为墙，及完整石块雕刻而成的浴缸，墙外的超大片平地更能直接独享专属海景。  \n入口： \n[![IMG_4783.jpg](https://s5.postimg.org/3ndghyix3/IMG_4783.jpg)](https://postimg.org/image/u8fzdilab/)  \n钢琴：\n[![IMG_4797.jpg](https://s5.postimg.org/wzz944jt3/IMG_4797.jpg)](https://postimg.org/image/yrs7z135v/)  \n浴室：  \n[![IMG_4810.jpg](https://s5.postimg.org/5qnvpmipz/IMG_4810.jpg)](https://postimg.org/image/5153d9i6b/)  \n观景： \n[![IMG_4855.jpg](https://s5.postimg.org/ymjvbm6h3/IMG_4855.jpg)](https://postimg.org/image/uq6jfmlhf/)\n### Marble House\n> Location: 596 Bellevue Avenue, Newport, RI 02840  \n\n与The Breakers同为Vanderbilt所有，不仅雕梁画栋，天花板也是布满油画及金箔，从名字上就可以看出这所房子以大理石为主要特色。  \n看房： \n[![IMG_4851.jpg](https://s5.postimg.org/ictp8pvt3/IMG_4851.jpg)](https://postimg.org/image/sa4q1s3er/)\n[![FullSizeRender 3.jpg](https://s5.postimg.org/q0l74rjuv/Full_Size_Render_3.jpg)](https://postimg.org/image/41eshk30j/)\n休息室：  \n[![FullSizeRender 2.jpg](https://s5.postimg.org/r45bgq4hz/Full_Size_Render_2.jpg)](https://postimg.org/image/54ywtinnn/)\n卧室：  \n[![FullSizeRender.jpg](https://s5.postimg.org/b9qf6ufrb/Full_Size_Render.jpg)](https://postimg.org/image/f63r2u0qr/)\n巨大的草坪与无敌的海景  \n[![FullSizeRender 5.jpg](https://s5.postimg.org/4kjvqtufb/Full_Size_Render_5.jpg)](https://postimg.org/image/soanf4cw3/)\n\n## 饮食 The White House Tavern\n> Location: 26 Marlborough St, Newport, RI 02840    \n\n[![IMG_4779.jpg](https://s5.postimg.org/ruouv0s3r/IMG_4779.jpg)](https://postimg.org/image/6l18k6bsz/)  \n[![IMG_4778.jpg](https://s5.postimg.org/avfwfrgw7/IMG_4778.jpg)](https://postimg.org/image/e2afze1c3/)\n这家The White House Tavern号称是全美最老客栈，1673年成为对外营业的餐馆。给我的感受是充满了怀旧的气息，食物上中规中矩但也可能是我们体会不到旧时代的做法。  \n来自官网的历史: It’s hard to imagine life in 1673 when The White Horse Tavern opened.  The new world was an unruly collection of English colonies, and colonial Newport was particularly harsh with long frigid winters, no heat, electricity or other modern conveniences. Taverns played an important role in those early days, and The White Horse was a regular haunt for Colonists, British soldiers, Hessian mercenaries, pirates, sailors, founding fathers and all manner of early American folk. Take a look at this video to see why many consider us a “bucket list bar.”  \n餐厅装潢： \n![](https://s5.postimg.org/f74i4rnt3/IMG_4772.jpg)\nLogo: \n![FullSizeRender 2.jpg](https://s5.postimg.org/4a7rtqqfb/Full_Size_Render_2.jpg)\nFood: \n![FullSizeRender.jpg](https://s5.postimg.org/pv893lxs7/Full_Size_Render.jpg)","slug":"Joshua之美东探索I-罗德岛","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdey000tm2cacjl4cujt","content":"<blockquote>\n<p>Time: 2017-05-22<br>Location: Rhode Island<br>Travel: Zipcar</p>\n<p>19世纪富豪们的英伦贵族庄园</p>\n</blockquote>\n<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>知道罗德岛的时候我似乎还没有来到美国, 自从在大学时代迷上了Downton Abbey后，便想参观各地的古堡豪宅。彼时的我以为罗德岛的豪宅坐落在一个个风景如画的海岛上，还惊异于美国竟有如此风景秀丽的地方，实际上这些豪宅确实在一个大岛上，而罗德岛也不是一个岛，是一个州，美国五十个州里面最小的州。<br><a id=\"more\"></a>  </p>\n<h1 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>罗得岛与普洛威顿斯庄园州（英语：State of Rhode Island and Providence Plantations）是美国最小的一个州，由于名称过长简称为罗得岛（Rhode Island），是美国州名最长的一州。因该岛形势类似希腊爱琴海口外的罗得岛，便被改名为罗得岛。此州属于美国东北部新英格兰的一部分。也是美国独立革命中的早期13州联盟之一。 周围人了解这个地方可能的原因是有布朗大学和罗德岛设计艺术学院坐落在此吧。</p>\n<h2 id=\"豪宅\"><a href=\"#豪宅\" class=\"headerlink\" title=\"豪宅\"></a>豪宅</h2><blockquote>\n<p>Before there were the Hamptons, before there was Malibu, there was Newport - acoastal summer playground of the hyper-rich, to which they could repair to consort among themselves and, not least, to show off.</p>\n</blockquote>\n<p>由于拥有美丽的海岸风光，夏季又清凉宜人，19世纪的黄金年代开始，大批富豪<br>陆续在这里建造起他们的奢华度假别墅，其中以铁路大亨Vanderbilt最为出名。<br>参观中的讲解似乎能让人回想到他们黄金时代的岁月，享受着贵族的生活。印象比较深刻的是小姐们的日常，从吃早饭开始，读书，午饭，园中散步，下午茶，晚宴，聚会，大大小小的活动都需要穿着不同的衣服，为了体现小姐们的姿态，所以她们每天的生活也是蛮忙碌的，换衣服占据的时间永远是大头。<br>我觉得当时他们骨子里都有一种向往英国贵族生活的追求，不仅从仪式上，装潢里还有待人接物的方式，尽量避免看出是暴发户的感觉。</p>\n<blockquote>\n<p>参观网址：<a href=\"http://www.newportmansions.org/\" target=\"_blank\" rel=\"noopener\">http://www.newportmansions.org/</a>  </p>\n</blockquote>\n<h3 id=\"The-Brakers\"><a href=\"#The-Brakers\" class=\"headerlink\" title=\"The Brakers\"></a>The Brakers</h3><blockquote>\n<p>Location: 44 Ochre Point Ave., Newport, RI 02840  </p>\n</blockquote>\n<p>模仿16世纪义大利西北部的海港Genoa和Turin 的皇宫Palazzos 造型所建造出来的文艺复兴风格建筑物，拥有70间房间，是大众所公认最富丽堂皇的Newport豪宅之一，每间房间都有衣帽间与独立卫浴，更有意大利整块运来的大理石砌为墙，及完整石块雕刻而成的浴缸，墙外的超大片平地更能直接独享专属海景。<br>入口：<br><a href=\"https://postimg.org/image/u8fzdilab/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3ndghyix3/IMG_4783.jpg\" alt=\"IMG_4783.jpg\"></a><br>钢琴：<br><a href=\"https://postimg.org/image/yrs7z135v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wzz944jt3/IMG_4797.jpg\" alt=\"IMG_4797.jpg\"></a><br>浴室：<br><a href=\"https://postimg.org/image/5153d9i6b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5qnvpmipz/IMG_4810.jpg\" alt=\"IMG_4810.jpg\"></a><br>观景：<br><a href=\"https://postimg.org/image/uq6jfmlhf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ymjvbm6h3/IMG_4855.jpg\" alt=\"IMG_4855.jpg\"></a></p>\n<h3 id=\"Marble-House\"><a href=\"#Marble-House\" class=\"headerlink\" title=\"Marble House\"></a>Marble House</h3><blockquote>\n<p>Location: 596 Bellevue Avenue, Newport, RI 02840  </p>\n</blockquote>\n<p>与The Breakers同为Vanderbilt所有，不仅雕梁画栋，天花板也是布满油画及金箔，从名字上就可以看出这所房子以大理石为主要特色。<br>看房：<br><a href=\"https://postimg.org/image/sa4q1s3er/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ictp8pvt3/IMG_4851.jpg\" alt=\"IMG_4851.jpg\"></a><br><a href=\"https://postimg.org/image/41eshk30j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/q0l74rjuv/Full_Size_Render_3.jpg\" alt=\"FullSizeRender 3.jpg\"></a><br>休息室：<br><a href=\"https://postimg.org/image/54ywtinnn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r45bgq4hz/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"></a><br>卧室：<br><a href=\"https://postimg.org/image/f63r2u0qr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/b9qf6ufrb/Full_Size_Render.jpg\" alt=\"FullSizeRender.jpg\"></a><br>巨大的草坪与无敌的海景<br><a href=\"https://postimg.org/image/soanf4cw3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4kjvqtufb/Full_Size_Render_5.jpg\" alt=\"FullSizeRender 5.jpg\"></a></p>\n<h2 id=\"饮食-The-White-House-Tavern\"><a href=\"#饮食-The-White-House-Tavern\" class=\"headerlink\" title=\"饮食 The White House Tavern\"></a>饮食 The White House Tavern</h2><blockquote>\n<p>Location: 26 Marlborough St, Newport, RI 02840    </p>\n</blockquote>\n<p><a href=\"https://postimg.org/image/6l18k6bsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ruouv0s3r/IMG_4779.jpg\" alt=\"IMG_4779.jpg\"></a><br><a href=\"https://postimg.org/image/e2afze1c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/avfwfrgw7/IMG_4778.jpg\" alt=\"IMG_4778.jpg\"></a><br>这家The White House Tavern号称是全美最老客栈，1673年成为对外营业的餐馆。给我的感受是充满了怀旧的气息，食物上中规中矩但也可能是我们体会不到旧时代的做法。<br>来自官网的历史: It’s hard to imagine life in 1673 when The White Horse Tavern opened.  The new world was an unruly collection of English colonies, and colonial Newport was particularly harsh with long frigid winters, no heat, electricity or other modern conveniences. Taverns played an important role in those early days, and The White Horse was a regular haunt for Colonists, British soldiers, Hessian mercenaries, pirates, sailors, founding fathers and all manner of early American folk. Take a look at this video to see why many consider us a “bucket list bar.”<br>餐厅装潢：<br><img src=\"https://s5.postimg.org/f74i4rnt3/IMG_4772.jpg\" alt=\"\"><br>Logo:<br><img src=\"https://s5.postimg.org/4a7rtqqfb/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"><br>Food:<br><img src=\"https://s5.postimg.org/pv893lxs7/Full_Size_Render.jpg\" alt=\"FullSizeRender.jpg\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Time: 2017-05-22<br>Location: Rhode Island<br>Travel: Zipcar</p>\n<p>19世纪富豪们的英伦贵族庄园</p>\n</blockquote>\n<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>知道罗德岛的时候我似乎还没有来到美国, 自从在大学时代迷上了Downton Abbey后，便想参观各地的古堡豪宅。彼时的我以为罗德岛的豪宅坐落在一个个风景如画的海岛上，还惊异于美国竟有如此风景秀丽的地方，实际上这些豪宅确实在一个大岛上，而罗德岛也不是一个岛，是一个州，美国五十个州里面最小的州。<br>","more":"</p>\n<h1 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>罗得岛与普洛威顿斯庄园州（英语：State of Rhode Island and Providence Plantations）是美国最小的一个州，由于名称过长简称为罗得岛（Rhode Island），是美国州名最长的一州。因该岛形势类似希腊爱琴海口外的罗得岛，便被改名为罗得岛。此州属于美国东北部新英格兰的一部分。也是美国独立革命中的早期13州联盟之一。 周围人了解这个地方可能的原因是有布朗大学和罗德岛设计艺术学院坐落在此吧。</p>\n<h2 id=\"豪宅\"><a href=\"#豪宅\" class=\"headerlink\" title=\"豪宅\"></a>豪宅</h2><blockquote>\n<p>Before there were the Hamptons, before there was Malibu, there was Newport - acoastal summer playground of the hyper-rich, to which they could repair to consort among themselves and, not least, to show off.</p>\n</blockquote>\n<p>由于拥有美丽的海岸风光，夏季又清凉宜人，19世纪的黄金年代开始，大批富豪<br>陆续在这里建造起他们的奢华度假别墅，其中以铁路大亨Vanderbilt最为出名。<br>参观中的讲解似乎能让人回想到他们黄金时代的岁月，享受着贵族的生活。印象比较深刻的是小姐们的日常，从吃早饭开始，读书，午饭，园中散步，下午茶，晚宴，聚会，大大小小的活动都需要穿着不同的衣服，为了体现小姐们的姿态，所以她们每天的生活也是蛮忙碌的，换衣服占据的时间永远是大头。<br>我觉得当时他们骨子里都有一种向往英国贵族生活的追求，不仅从仪式上，装潢里还有待人接物的方式，尽量避免看出是暴发户的感觉。</p>\n<blockquote>\n<p>参观网址：<a href=\"http://www.newportmansions.org/\" target=\"_blank\" rel=\"noopener\">http://www.newportmansions.org/</a>  </p>\n</blockquote>\n<h3 id=\"The-Brakers\"><a href=\"#The-Brakers\" class=\"headerlink\" title=\"The Brakers\"></a>The Brakers</h3><blockquote>\n<p>Location: 44 Ochre Point Ave., Newport, RI 02840  </p>\n</blockquote>\n<p>模仿16世纪义大利西北部的海港Genoa和Turin 的皇宫Palazzos 造型所建造出来的文艺复兴风格建筑物，拥有70间房间，是大众所公认最富丽堂皇的Newport豪宅之一，每间房间都有衣帽间与独立卫浴，更有意大利整块运来的大理石砌为墙，及完整石块雕刻而成的浴缸，墙外的超大片平地更能直接独享专属海景。<br>入口：<br><a href=\"https://postimg.org/image/u8fzdilab/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3ndghyix3/IMG_4783.jpg\" alt=\"IMG_4783.jpg\"></a><br>钢琴：<br><a href=\"https://postimg.org/image/yrs7z135v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wzz944jt3/IMG_4797.jpg\" alt=\"IMG_4797.jpg\"></a><br>浴室：<br><a href=\"https://postimg.org/image/5153d9i6b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5qnvpmipz/IMG_4810.jpg\" alt=\"IMG_4810.jpg\"></a><br>观景：<br><a href=\"https://postimg.org/image/uq6jfmlhf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ymjvbm6h3/IMG_4855.jpg\" alt=\"IMG_4855.jpg\"></a></p>\n<h3 id=\"Marble-House\"><a href=\"#Marble-House\" class=\"headerlink\" title=\"Marble House\"></a>Marble House</h3><blockquote>\n<p>Location: 596 Bellevue Avenue, Newport, RI 02840  </p>\n</blockquote>\n<p>与The Breakers同为Vanderbilt所有，不仅雕梁画栋，天花板也是布满油画及金箔，从名字上就可以看出这所房子以大理石为主要特色。<br>看房：<br><a href=\"https://postimg.org/image/sa4q1s3er/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ictp8pvt3/IMG_4851.jpg\" alt=\"IMG_4851.jpg\"></a><br><a href=\"https://postimg.org/image/41eshk30j/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/q0l74rjuv/Full_Size_Render_3.jpg\" alt=\"FullSizeRender 3.jpg\"></a><br>休息室：<br><a href=\"https://postimg.org/image/54ywtinnn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/r45bgq4hz/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"></a><br>卧室：<br><a href=\"https://postimg.org/image/f63r2u0qr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/b9qf6ufrb/Full_Size_Render.jpg\" alt=\"FullSizeRender.jpg\"></a><br>巨大的草坪与无敌的海景<br><a href=\"https://postimg.org/image/soanf4cw3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4kjvqtufb/Full_Size_Render_5.jpg\" alt=\"FullSizeRender 5.jpg\"></a></p>\n<h2 id=\"饮食-The-White-House-Tavern\"><a href=\"#饮食-The-White-House-Tavern\" class=\"headerlink\" title=\"饮食 The White House Tavern\"></a>饮食 The White House Tavern</h2><blockquote>\n<p>Location: 26 Marlborough St, Newport, RI 02840    </p>\n</blockquote>\n<p><a href=\"https://postimg.org/image/6l18k6bsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ruouv0s3r/IMG_4779.jpg\" alt=\"IMG_4779.jpg\"></a><br><a href=\"https://postimg.org/image/e2afze1c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/avfwfrgw7/IMG_4778.jpg\" alt=\"IMG_4778.jpg\"></a><br>这家The White House Tavern号称是全美最老客栈，1673年成为对外营业的餐馆。给我的感受是充满了怀旧的气息，食物上中规中矩但也可能是我们体会不到旧时代的做法。<br>来自官网的历史: It’s hard to imagine life in 1673 when The White Horse Tavern opened.  The new world was an unruly collection of English colonies, and colonial Newport was particularly harsh with long frigid winters, no heat, electricity or other modern conveniences. Taverns played an important role in those early days, and The White Horse was a regular haunt for Colonists, British soldiers, Hessian mercenaries, pirates, sailors, founding fathers and all manner of early American folk. Take a look at this video to see why many consider us a “bucket list bar.”<br>餐厅装潢：<br><img src=\"https://s5.postimg.org/f74i4rnt3/IMG_4772.jpg\" alt=\"\"><br>Logo:<br><img src=\"https://s5.postimg.org/4a7rtqqfb/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"><br>Food:<br><img src=\"https://s5.postimg.org/pv893lxs7/Full_Size_Render.jpg\" alt=\"FullSizeRender.jpg\"></p>"},{"title":"Joshua美东探索IV--Haskell Free Library","comments":1,"date":"2017-06-02T22:09:11.000Z","updated":"2017-06-02T22:09:11.000Z","_content":"> Time: 2017-05-24\n> Travel: Rental Car\n\n# 横穿边境的图书馆\n知道这里还是从全球最美边境这种网文图集中了解的，正好此行时间充裕，特意从缅因州绕道来到这里。网罗穷游马蜂窝网站却无游记锦囊，特此写篇游记来怀念这一行的趣事。\n> Meet the only library in the world that operates in two countries at once.  \n\n<!--more-->\n# 生活\n> For nearly 200 years Derby Line, Vermont, and Stanstead, Quebec, essentially functioned as one town. Citizens drank the same water, worked in the same tool factory, played the same sports (primarily curling), fought in the same world wars, and were born in the same hospital in nearby Newport, Vermont. They also shared the same cultural center, the Haskell Free Library and Opera House, an ornate Victorian edifice built deliberately on top of the international border in 1901 by the Canadian wife of a wealthy American merchant.  \n\n似乎我们印象中的边境一定是戒备森严，而这里却是另外一番景象，象征性的用花盆作为边界。这里的人们认为Derby Line Vermont US和Stanstead Quebec Canada就是一座城镇--we are here and we are not special. 曾经9-11之前，穿梭边境并不需要报备因为从小就生活在这里，上午去美国这边看球，下午回加拿大这边和下午茶，作为一个整体平安无事生活了快一个世纪。但9-11改变了许多，如果当地居民再这样来回穿梭的话就会有illegal cross border的罪名，罚款甚至监狱；而从正常通道走的话，海关总会问你从哪里来这种非常ridiculous的问题。  \n而且由于边境划分的缘故，有几所房屋恰好横跨边境线，这在9-11之后就更加变成了一个问题，原本能走车的小路加装上了铁门并有高清摄像头，就再也不能前院开门烧烤后院开门啤酒的生活了。途经这里的我也有一番故事。  \n一篇比较好讲述这里生活的文章：  \n[The Only Wall Between These Border Towns Is a Row of Potted Plants](http://abcnews.go.com/Travel/wall-border-towns-row-potted-plants/story?id=37196875)\n# Haskell Free Library\n驱车从NewPort,VT不到10分钟便能看见路牌上写着Derby Line 1 Canada 1的路牌，这表明我们距离边境就很近了。当然了，这时候就需要紧跟路牌的标示走了，要是跟着GPS走的话很可能就会带你进入到边境检查站，我们这回没有办理加拿大签证，为了不必要的麻烦还是老老实实的去Haskell Free Library吧。\n[![16_caswell_and_main.jpg](https://s5.postimg.org/v2drkvqyv/16_caswell_and_main.jpg)](https://postimg.org/image/b7rpyrbr7/)\n[![IMG_5075.jpg](https://s5.postimg.org/ojy8tt1zb/IMG_5075.jpg)](https://postimg.org/image/lpv3gczsz/)  \n[![IMG_3018.jpg](https://s5.postimg.org/jm6w3gvuv/IMG_3018.jpg)](https://postimg.org/image/iwo3r3vb7/)\n美国一侧\n[![IMG_5029.jpg](https://s5.postimg.org/59dwoissn/IMG_5029.jpg)](https://postimg.org/image/6bo372blv/)\n加拿大一侧\n[![IMG_5030.jpg](https://s5.postimg.org/3t6j0qybr/IMG_5030.jpg)](https://postimg.org/image/rwxap1gsj/)\n有花坛作为边界之前的图片\n[![image.jpg](https://s5.postimg.org/fi6ducguf/image.jpg)](https://postimg.org/image/j1sbk5jk3/)\n[![13_church_street_monument.jpg](https://s5.postimg.org/55k389nbb/13_church_street_monument.jpg)](https://postimg.org/image/5v2vkmnur/)\n现在\n[![IMG_2969.jpg](https://s5.postimg.org/qf2nlzxaf/IMG_2969.jpg)](https://postimg.org/image/ppjv9mwqr/)\n[![IMG_2983.jpg](https://s5.postimg.org/9v4yzr807/IMG_2983.jpg)](https://postimg.org/image/xm4chv877/)\n事先在官网上查好它的停车场是位于美国一侧，所以把车停好之后就推开图书馆的大门--位于美国一侧（似乎加拿大一侧并没有门）。一进门便看见大大的游客登记册，翻到最前页时间能回到2001年，那也正是9-11事件的时候。  \n这所图书馆是Haskell家族于1901所建立，是为了能在边界处的两个小镇提供一个学习和文化交流中心。之后没过几年，美加边境管理日趋严格-禁止在边界处新建建筑或者种植树木，根据祖父条例-之前的事情既往不咎，从而也确立 了这一独特的横跨边境的图书馆。\n[![IMG_2919.jpg](https://s5.postimg.org/dvc4bzyh3/IMG_2919.jpg)](https://postimg.org/image/ttku24soz/)\n[![IMG_5027.jpg](https://s5.postimg.org/l3wxsrpzb/IMG_5027.jpg)](https://postimg.org/image/wg9jajyo3/)  \n一进门随意参观一下便能发现独特的国界标志--一条黑线，跨过去几乎所有的藏书在加拿大一侧，而儿童中心却在美国一侧，甚至借还柜台也横跨两国。\n[![IMG_5069.jpg](https://s5.postimg.org/4mjlcqlaf/IMG_5069.jpg)](https://postimg.org/image/u5bxpr4ub/)\n[![IMG_5070.jpg](https://s5.postimg.org/br1elrsjr/IMG_5070.jpg)](https://postimg.org/image/wnxmqfqkj/)\n和馆员聊了聊她表示来这里参观的游客还是蛮多的，然后小镇上的居民借还图书也很方便--因为加拿大一侧并没有门所以两国边境特许加拿大居民从指定路径（就是花坛一侧）进入图书馆，离开的时候也要从这条路径离开，并不许进入其他地方或者游荡--不然以非法穿越国境罪论处。不过可惜的是二层的剧院不让参观（构造为舞台是在加拿大一侧，而观众席大部分在美国一侧）\n[![IMG_5063.jpg](https://s5.postimg.org/tid1087yf/IMG_5063.jpg)](https://postimg.org/image/xrhr2eb7n/)\n\n\n# 边境趣事\n## 铁门前的摆拍\n由于历史原因，有几所跨边境的房屋也有几条跨边境的小路，不过自从9-11之后这些小路变装上了铁门，不过我看地图上这些小路离图书馆并不远所以决定探索一番。  \n第一所房子位于Pelow Hill，前门属于美国，后院属于加拿大，门前有一条斑驳的国界线，依稀写着USA／Canada。\n[![IMG_5050.jpg](https://s5.postimg.org/cupns3lmv/IMG_5050.jpg)](https://postimg.org/image/mf9aezayr/)\n[![IMG_5056.jpg](https://s5.postimg.org/tddekx93b/IMG_5056.jpg)](https://postimg.org/image/c03462ds3/)\n[![IMG_5077.jpg](https://s5.postimg.org/niy04okzr/IMG_5077.jpg)](https://postimg.org/image/5swbjn7er/)\n[![IMG_5051.jpg](https://s5.postimg.org/5srq5wi13/IMG_5051.jpg)](https://postimg.org/image/rry4t3yv7/)\n[![IMG_5058.jpg](https://s5.postimg.org/h00ke0jev/IMG_5058.jpg)](https://postimg.org/image/rzlrpm9tv/)\n之前清晰时候的图片\n[![08_line_rue_lee.jpg](https://s5.postimg.org/txjpfi4hz/08_line_rue_lee.jpg)](https://postimg.org/image/txjpfi4hv/)\n## 边防警察的盘查\n就当我们准备继续前往下一条小路的时候，一辆边防警车停在了我们身后，下来两个和蔼的景观，询问我们是做什么，于是我们说是参观Haskell Library 和周边的景色，他说因为你们在非入境边境处有逗留，有摄像头记录所以必须查看你们的身份证明，我说我们的证件都在图书馆的停车场里，于是我们便坐上了警车，带着我们到停车场。  \n[![IMG_3052.jpg](https://s5.postimg.org/blslezex3/IMG_3052.jpg)](https://postimg.org/image/q4zqge81v/)\n[![IMG_3048.jpg](https://s5.postimg.org/vrw3dvakn/IMG_3048.jpg)](https://postimg.org/image/hlgcimzpf/)\n[![IMG_3054.jpg](https://s5.postimg.org/drmw9hidj/IMG_3054.jpg)](https://postimg.org/image/pgqvxg9c3/)\n[![IMG_3056.jpg](https://s5.postimg.org/ga8la643r/IMG_3056.jpg)](https://postimg.org/image/ndggps9j7/)\n由于我只带了加州驾照，非真实ID（据说是什么加强版驾照），为了确认我的F1身份花费了不少时间，所以后来我又给他我的SSN号码（唯一性），中途还出现警察去图书馆门口蹭网的有趣的一幕。\n[![IMG_3063.jpg](https://s5.postimg.org/wmn8dn7t3/IMG_3063.jpg)](https://postimg.org/image/ui2vck66b/)\n[![IMG_3069.jpg](https://s5.postimg.org/5rd6yqqtj/IMG_3069.jpg)](https://postimg.org/image/s3azs4pxf/)\n最后万事大吉～合了影便驱车回波士顿了","source":"_posts/Joshua美东探索IV-Haskell-Free-Library.md","raw":"---\ntitle: Joshua美东探索IV--Haskell Free Library\ncomments: true\ndate: 2017-06-02 15:09:11\nupdated: 2017-06-02 15:09:11\ncategories: Travel\ntags: [border, library, Vermont]\n---\n> Time: 2017-05-24\n> Travel: Rental Car\n\n# 横穿边境的图书馆\n知道这里还是从全球最美边境这种网文图集中了解的，正好此行时间充裕，特意从缅因州绕道来到这里。网罗穷游马蜂窝网站却无游记锦囊，特此写篇游记来怀念这一行的趣事。\n> Meet the only library in the world that operates in two countries at once.  \n\n<!--more-->\n# 生活\n> For nearly 200 years Derby Line, Vermont, and Stanstead, Quebec, essentially functioned as one town. Citizens drank the same water, worked in the same tool factory, played the same sports (primarily curling), fought in the same world wars, and were born in the same hospital in nearby Newport, Vermont. They also shared the same cultural center, the Haskell Free Library and Opera House, an ornate Victorian edifice built deliberately on top of the international border in 1901 by the Canadian wife of a wealthy American merchant.  \n\n似乎我们印象中的边境一定是戒备森严，而这里却是另外一番景象，象征性的用花盆作为边界。这里的人们认为Derby Line Vermont US和Stanstead Quebec Canada就是一座城镇--we are here and we are not special. 曾经9-11之前，穿梭边境并不需要报备因为从小就生活在这里，上午去美国这边看球，下午回加拿大这边和下午茶，作为一个整体平安无事生活了快一个世纪。但9-11改变了许多，如果当地居民再这样来回穿梭的话就会有illegal cross border的罪名，罚款甚至监狱；而从正常通道走的话，海关总会问你从哪里来这种非常ridiculous的问题。  \n而且由于边境划分的缘故，有几所房屋恰好横跨边境线，这在9-11之后就更加变成了一个问题，原本能走车的小路加装上了铁门并有高清摄像头，就再也不能前院开门烧烤后院开门啤酒的生活了。途经这里的我也有一番故事。  \n一篇比较好讲述这里生活的文章：  \n[The Only Wall Between These Border Towns Is a Row of Potted Plants](http://abcnews.go.com/Travel/wall-border-towns-row-potted-plants/story?id=37196875)\n# Haskell Free Library\n驱车从NewPort,VT不到10分钟便能看见路牌上写着Derby Line 1 Canada 1的路牌，这表明我们距离边境就很近了。当然了，这时候就需要紧跟路牌的标示走了，要是跟着GPS走的话很可能就会带你进入到边境检查站，我们这回没有办理加拿大签证，为了不必要的麻烦还是老老实实的去Haskell Free Library吧。\n[![16_caswell_and_main.jpg](https://s5.postimg.org/v2drkvqyv/16_caswell_and_main.jpg)](https://postimg.org/image/b7rpyrbr7/)\n[![IMG_5075.jpg](https://s5.postimg.org/ojy8tt1zb/IMG_5075.jpg)](https://postimg.org/image/lpv3gczsz/)  \n[![IMG_3018.jpg](https://s5.postimg.org/jm6w3gvuv/IMG_3018.jpg)](https://postimg.org/image/iwo3r3vb7/)\n美国一侧\n[![IMG_5029.jpg](https://s5.postimg.org/59dwoissn/IMG_5029.jpg)](https://postimg.org/image/6bo372blv/)\n加拿大一侧\n[![IMG_5030.jpg](https://s5.postimg.org/3t6j0qybr/IMG_5030.jpg)](https://postimg.org/image/rwxap1gsj/)\n有花坛作为边界之前的图片\n[![image.jpg](https://s5.postimg.org/fi6ducguf/image.jpg)](https://postimg.org/image/j1sbk5jk3/)\n[![13_church_street_monument.jpg](https://s5.postimg.org/55k389nbb/13_church_street_monument.jpg)](https://postimg.org/image/5v2vkmnur/)\n现在\n[![IMG_2969.jpg](https://s5.postimg.org/qf2nlzxaf/IMG_2969.jpg)](https://postimg.org/image/ppjv9mwqr/)\n[![IMG_2983.jpg](https://s5.postimg.org/9v4yzr807/IMG_2983.jpg)](https://postimg.org/image/xm4chv877/)\n事先在官网上查好它的停车场是位于美国一侧，所以把车停好之后就推开图书馆的大门--位于美国一侧（似乎加拿大一侧并没有门）。一进门便看见大大的游客登记册，翻到最前页时间能回到2001年，那也正是9-11事件的时候。  \n这所图书馆是Haskell家族于1901所建立，是为了能在边界处的两个小镇提供一个学习和文化交流中心。之后没过几年，美加边境管理日趋严格-禁止在边界处新建建筑或者种植树木，根据祖父条例-之前的事情既往不咎，从而也确立 了这一独特的横跨边境的图书馆。\n[![IMG_2919.jpg](https://s5.postimg.org/dvc4bzyh3/IMG_2919.jpg)](https://postimg.org/image/ttku24soz/)\n[![IMG_5027.jpg](https://s5.postimg.org/l3wxsrpzb/IMG_5027.jpg)](https://postimg.org/image/wg9jajyo3/)  \n一进门随意参观一下便能发现独特的国界标志--一条黑线，跨过去几乎所有的藏书在加拿大一侧，而儿童中心却在美国一侧，甚至借还柜台也横跨两国。\n[![IMG_5069.jpg](https://s5.postimg.org/4mjlcqlaf/IMG_5069.jpg)](https://postimg.org/image/u5bxpr4ub/)\n[![IMG_5070.jpg](https://s5.postimg.org/br1elrsjr/IMG_5070.jpg)](https://postimg.org/image/wnxmqfqkj/)\n和馆员聊了聊她表示来这里参观的游客还是蛮多的，然后小镇上的居民借还图书也很方便--因为加拿大一侧并没有门所以两国边境特许加拿大居民从指定路径（就是花坛一侧）进入图书馆，离开的时候也要从这条路径离开，并不许进入其他地方或者游荡--不然以非法穿越国境罪论处。不过可惜的是二层的剧院不让参观（构造为舞台是在加拿大一侧，而观众席大部分在美国一侧）\n[![IMG_5063.jpg](https://s5.postimg.org/tid1087yf/IMG_5063.jpg)](https://postimg.org/image/xrhr2eb7n/)\n\n\n# 边境趣事\n## 铁门前的摆拍\n由于历史原因，有几所跨边境的房屋也有几条跨边境的小路，不过自从9-11之后这些小路变装上了铁门，不过我看地图上这些小路离图书馆并不远所以决定探索一番。  \n第一所房子位于Pelow Hill，前门属于美国，后院属于加拿大，门前有一条斑驳的国界线，依稀写着USA／Canada。\n[![IMG_5050.jpg](https://s5.postimg.org/cupns3lmv/IMG_5050.jpg)](https://postimg.org/image/mf9aezayr/)\n[![IMG_5056.jpg](https://s5.postimg.org/tddekx93b/IMG_5056.jpg)](https://postimg.org/image/c03462ds3/)\n[![IMG_5077.jpg](https://s5.postimg.org/niy04okzr/IMG_5077.jpg)](https://postimg.org/image/5swbjn7er/)\n[![IMG_5051.jpg](https://s5.postimg.org/5srq5wi13/IMG_5051.jpg)](https://postimg.org/image/rry4t3yv7/)\n[![IMG_5058.jpg](https://s5.postimg.org/h00ke0jev/IMG_5058.jpg)](https://postimg.org/image/rzlrpm9tv/)\n之前清晰时候的图片\n[![08_line_rue_lee.jpg](https://s5.postimg.org/txjpfi4hz/08_line_rue_lee.jpg)](https://postimg.org/image/txjpfi4hv/)\n## 边防警察的盘查\n就当我们准备继续前往下一条小路的时候，一辆边防警车停在了我们身后，下来两个和蔼的景观，询问我们是做什么，于是我们说是参观Haskell Library 和周边的景色，他说因为你们在非入境边境处有逗留，有摄像头记录所以必须查看你们的身份证明，我说我们的证件都在图书馆的停车场里，于是我们便坐上了警车，带着我们到停车场。  \n[![IMG_3052.jpg](https://s5.postimg.org/blslezex3/IMG_3052.jpg)](https://postimg.org/image/q4zqge81v/)\n[![IMG_3048.jpg](https://s5.postimg.org/vrw3dvakn/IMG_3048.jpg)](https://postimg.org/image/hlgcimzpf/)\n[![IMG_3054.jpg](https://s5.postimg.org/drmw9hidj/IMG_3054.jpg)](https://postimg.org/image/pgqvxg9c3/)\n[![IMG_3056.jpg](https://s5.postimg.org/ga8la643r/IMG_3056.jpg)](https://postimg.org/image/ndggps9j7/)\n由于我只带了加州驾照，非真实ID（据说是什么加强版驾照），为了确认我的F1身份花费了不少时间，所以后来我又给他我的SSN号码（唯一性），中途还出现警察去图书馆门口蹭网的有趣的一幕。\n[![IMG_3063.jpg](https://s5.postimg.org/wmn8dn7t3/IMG_3063.jpg)](https://postimg.org/image/ui2vck66b/)\n[![IMG_3069.jpg](https://s5.postimg.org/5rd6yqqtj/IMG_3069.jpg)](https://postimg.org/image/s3azs4pxf/)\n最后万事大吉～合了影便驱车回波士顿了","slug":"Joshua美东探索IV-Haskell-Free-Library","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdez000vm2cayzn9vuyg","content":"<blockquote>\n<p>Time: 2017-05-24<br>Travel: Rental Car</p>\n</blockquote>\n<h1 id=\"横穿边境的图书馆\"><a href=\"#横穿边境的图书馆\" class=\"headerlink\" title=\"横穿边境的图书馆\"></a>横穿边境的图书馆</h1><p>知道这里还是从全球最美边境这种网文图集中了解的，正好此行时间充裕，特意从缅因州绕道来到这里。网罗穷游马蜂窝网站却无游记锦囊，特此写篇游记来怀念这一行的趣事。</p>\n<blockquote>\n<p>Meet the only library in the world that operates in two countries at once.  </p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><blockquote>\n<p>For nearly 200 years Derby Line, Vermont, and Stanstead, Quebec, essentially functioned as one town. Citizens drank the same water, worked in the same tool factory, played the same sports (primarily curling), fought in the same world wars, and were born in the same hospital in nearby Newport, Vermont. They also shared the same cultural center, the Haskell Free Library and Opera House, an ornate Victorian edifice built deliberately on top of the international border in 1901 by the Canadian wife of a wealthy American merchant.  </p>\n</blockquote>\n<p>似乎我们印象中的边境一定是戒备森严，而这里却是另外一番景象，象征性的用花盆作为边界。这里的人们认为Derby Line Vermont US和Stanstead Quebec Canada就是一座城镇–we are here and we are not special. 曾经9-11之前，穿梭边境并不需要报备因为从小就生活在这里，上午去美国这边看球，下午回加拿大这边和下午茶，作为一个整体平安无事生活了快一个世纪。但9-11改变了许多，如果当地居民再这样来回穿梭的话就会有illegal cross border的罪名，罚款甚至监狱；而从正常通道走的话，海关总会问你从哪里来这种非常ridiculous的问题。<br>而且由于边境划分的缘故，有几所房屋恰好横跨边境线，这在9-11之后就更加变成了一个问题，原本能走车的小路加装上了铁门并有高清摄像头，就再也不能前院开门烧烤后院开门啤酒的生活了。途经这里的我也有一番故事。<br>一篇比较好讲述这里生活的文章：<br><a href=\"http://abcnews.go.com/Travel/wall-border-towns-row-potted-plants/story?id=37196875\" target=\"_blank\" rel=\"noopener\">The Only Wall Between These Border Towns Is a Row of Potted Plants</a></p>\n<h1 id=\"Haskell-Free-Library\"><a href=\"#Haskell-Free-Library\" class=\"headerlink\" title=\"Haskell Free Library\"></a>Haskell Free Library</h1><p>驱车从NewPort,VT不到10分钟便能看见路牌上写着Derby Line 1 Canada 1的路牌，这表明我们距离边境就很近了。当然了，这时候就需要紧跟路牌的标示走了，要是跟着GPS走的话很可能就会带你进入到边境检查站，我们这回没有办理加拿大签证，为了不必要的麻烦还是老老实实的去Haskell Free Library吧。<br><a href=\"https://postimg.org/image/b7rpyrbr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/v2drkvqyv/16_caswell_and_main.jpg\" alt=\"16_caswell_and_main.jpg\"></a><br><a href=\"https://postimg.org/image/lpv3gczsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ojy8tt1zb/IMG_5075.jpg\" alt=\"IMG_5075.jpg\"></a><br><a href=\"https://postimg.org/image/iwo3r3vb7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jm6w3gvuv/IMG_3018.jpg\" alt=\"IMG_3018.jpg\"></a><br>美国一侧<br><a href=\"https://postimg.org/image/6bo372blv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/59dwoissn/IMG_5029.jpg\" alt=\"IMG_5029.jpg\"></a><br>加拿大一侧<br><a href=\"https://postimg.org/image/rwxap1gsj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3t6j0qybr/IMG_5030.jpg\" alt=\"IMG_5030.jpg\"></a><br>有花坛作为边界之前的图片<br><a href=\"https://postimg.org/image/j1sbk5jk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/fi6ducguf/image.jpg\" alt=\"image.jpg\"></a><br><a href=\"https://postimg.org/image/5v2vkmnur/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/55k389nbb/13_church_street_monument.jpg\" alt=\"13_church_street_monument.jpg\"></a><br>现在<br><a href=\"https://postimg.org/image/ppjv9mwqr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/qf2nlzxaf/IMG_2969.jpg\" alt=\"IMG_2969.jpg\"></a><br><a href=\"https://postimg.org/image/xm4chv877/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9v4yzr807/IMG_2983.jpg\" alt=\"IMG_2983.jpg\"></a><br>事先在官网上查好它的停车场是位于美国一侧，所以把车停好之后就推开图书馆的大门–位于美国一侧（似乎加拿大一侧并没有门）。一进门便看见大大的游客登记册，翻到最前页时间能回到2001年，那也正是9-11事件的时候。<br>这所图书馆是Haskell家族于1901所建立，是为了能在边界处的两个小镇提供一个学习和文化交流中心。之后没过几年，美加边境管理日趋严格-禁止在边界处新建建筑或者种植树木，根据祖父条例-之前的事情既往不咎，从而也确立 了这一独特的横跨边境的图书馆。<br><a href=\"https://postimg.org/image/ttku24soz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/dvc4bzyh3/IMG_2919.jpg\" alt=\"IMG_2919.jpg\"></a><br><a href=\"https://postimg.org/image/wg9jajyo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/l3wxsrpzb/IMG_5027.jpg\" alt=\"IMG_5027.jpg\"></a><br>一进门随意参观一下便能发现独特的国界标志–一条黑线，跨过去几乎所有的藏书在加拿大一侧，而儿童中心却在美国一侧，甚至借还柜台也横跨两国。<br><a href=\"https://postimg.org/image/u5bxpr4ub/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4mjlcqlaf/IMG_5069.jpg\" alt=\"IMG_5069.jpg\"></a><br><a href=\"https://postimg.org/image/wnxmqfqkj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/br1elrsjr/IMG_5070.jpg\" alt=\"IMG_5070.jpg\"></a><br>和馆员聊了聊她表示来这里参观的游客还是蛮多的，然后小镇上的居民借还图书也很方便–因为加拿大一侧并没有门所以两国边境特许加拿大居民从指定路径（就是花坛一侧）进入图书馆，离开的时候也要从这条路径离开，并不许进入其他地方或者游荡–不然以非法穿越国境罪论处。不过可惜的是二层的剧院不让参观（构造为舞台是在加拿大一侧，而观众席大部分在美国一侧）<br><a href=\"https://postimg.org/image/xrhr2eb7n/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/tid1087yf/IMG_5063.jpg\" alt=\"IMG_5063.jpg\"></a></p>\n<h1 id=\"边境趣事\"><a href=\"#边境趣事\" class=\"headerlink\" title=\"边境趣事\"></a>边境趣事</h1><h2 id=\"铁门前的摆拍\"><a href=\"#铁门前的摆拍\" class=\"headerlink\" title=\"铁门前的摆拍\"></a>铁门前的摆拍</h2><p>由于历史原因，有几所跨边境的房屋也有几条跨边境的小路，不过自从9-11之后这些小路变装上了铁门，不过我看地图上这些小路离图书馆并不远所以决定探索一番。<br>第一所房子位于Pelow Hill，前门属于美国，后院属于加拿大，门前有一条斑驳的国界线，依稀写着USA／Canada。<br><a href=\"https://postimg.org/image/mf9aezayr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/cupns3lmv/IMG_5050.jpg\" alt=\"IMG_5050.jpg\"></a><br><a href=\"https://postimg.org/image/c03462ds3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/tddekx93b/IMG_5056.jpg\" alt=\"IMG_5056.jpg\"></a><br><a href=\"https://postimg.org/image/5swbjn7er/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/niy04okzr/IMG_5077.jpg\" alt=\"IMG_5077.jpg\"></a><br><a href=\"https://postimg.org/image/rry4t3yv7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5srq5wi13/IMG_5051.jpg\" alt=\"IMG_5051.jpg\"></a><br><a href=\"https://postimg.org/image/rzlrpm9tv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/h00ke0jev/IMG_5058.jpg\" alt=\"IMG_5058.jpg\"></a><br>之前清晰时候的图片<br><a href=\"https://postimg.org/image/txjpfi4hv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/txjpfi4hz/08_line_rue_lee.jpg\" alt=\"08_line_rue_lee.jpg\"></a></p>\n<h2 id=\"边防警察的盘查\"><a href=\"#边防警察的盘查\" class=\"headerlink\" title=\"边防警察的盘查\"></a>边防警察的盘查</h2><p>就当我们准备继续前往下一条小路的时候，一辆边防警车停在了我们身后，下来两个和蔼的景观，询问我们是做什么，于是我们说是参观Haskell Library 和周边的景色，他说因为你们在非入境边境处有逗留，有摄像头记录所以必须查看你们的身份证明，我说我们的证件都在图书馆的停车场里，于是我们便坐上了警车，带着我们到停车场。<br><a href=\"https://postimg.org/image/q4zqge81v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/blslezex3/IMG_3052.jpg\" alt=\"IMG_3052.jpg\"></a><br><a href=\"https://postimg.org/image/hlgcimzpf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/vrw3dvakn/IMG_3048.jpg\" alt=\"IMG_3048.jpg\"></a><br><a href=\"https://postimg.org/image/pgqvxg9c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/drmw9hidj/IMG_3054.jpg\" alt=\"IMG_3054.jpg\"></a><br><a href=\"https://postimg.org/image/ndggps9j7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ga8la643r/IMG_3056.jpg\" alt=\"IMG_3056.jpg\"></a><br>由于我只带了加州驾照，非真实ID（据说是什么加强版驾照），为了确认我的F1身份花费了不少时间，所以后来我又给他我的SSN号码（唯一性），中途还出现警察去图书馆门口蹭网的有趣的一幕。<br><a href=\"https://postimg.org/image/ui2vck66b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wmn8dn7t3/IMG_3063.jpg\" alt=\"IMG_3063.jpg\"></a><br><a href=\"https://postimg.org/image/s3azs4pxf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5rd6yqqtj/IMG_3069.jpg\" alt=\"IMG_3069.jpg\"></a><br>最后万事大吉～合了影便驱车回波士顿了</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Time: 2017-05-24<br>Travel: Rental Car</p>\n</blockquote>\n<h1 id=\"横穿边境的图书馆\"><a href=\"#横穿边境的图书馆\" class=\"headerlink\" title=\"横穿边境的图书馆\"></a>横穿边境的图书馆</h1><p>知道这里还是从全球最美边境这种网文图集中了解的，正好此行时间充裕，特意从缅因州绕道来到这里。网罗穷游马蜂窝网站却无游记锦囊，特此写篇游记来怀念这一行的趣事。</p>\n<blockquote>\n<p>Meet the only library in the world that operates in two countries at once.  </p>\n</blockquote>","more":"<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><blockquote>\n<p>For nearly 200 years Derby Line, Vermont, and Stanstead, Quebec, essentially functioned as one town. Citizens drank the same water, worked in the same tool factory, played the same sports (primarily curling), fought in the same world wars, and were born in the same hospital in nearby Newport, Vermont. They also shared the same cultural center, the Haskell Free Library and Opera House, an ornate Victorian edifice built deliberately on top of the international border in 1901 by the Canadian wife of a wealthy American merchant.  </p>\n</blockquote>\n<p>似乎我们印象中的边境一定是戒备森严，而这里却是另外一番景象，象征性的用花盆作为边界。这里的人们认为Derby Line Vermont US和Stanstead Quebec Canada就是一座城镇–we are here and we are not special. 曾经9-11之前，穿梭边境并不需要报备因为从小就生活在这里，上午去美国这边看球，下午回加拿大这边和下午茶，作为一个整体平安无事生活了快一个世纪。但9-11改变了许多，如果当地居民再这样来回穿梭的话就会有illegal cross border的罪名，罚款甚至监狱；而从正常通道走的话，海关总会问你从哪里来这种非常ridiculous的问题。<br>而且由于边境划分的缘故，有几所房屋恰好横跨边境线，这在9-11之后就更加变成了一个问题，原本能走车的小路加装上了铁门并有高清摄像头，就再也不能前院开门烧烤后院开门啤酒的生活了。途经这里的我也有一番故事。<br>一篇比较好讲述这里生活的文章：<br><a href=\"http://abcnews.go.com/Travel/wall-border-towns-row-potted-plants/story?id=37196875\" target=\"_blank\" rel=\"noopener\">The Only Wall Between These Border Towns Is a Row of Potted Plants</a></p>\n<h1 id=\"Haskell-Free-Library\"><a href=\"#Haskell-Free-Library\" class=\"headerlink\" title=\"Haskell Free Library\"></a>Haskell Free Library</h1><p>驱车从NewPort,VT不到10分钟便能看见路牌上写着Derby Line 1 Canada 1的路牌，这表明我们距离边境就很近了。当然了，这时候就需要紧跟路牌的标示走了，要是跟着GPS走的话很可能就会带你进入到边境检查站，我们这回没有办理加拿大签证，为了不必要的麻烦还是老老实实的去Haskell Free Library吧。<br><a href=\"https://postimg.org/image/b7rpyrbr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/v2drkvqyv/16_caswell_and_main.jpg\" alt=\"16_caswell_and_main.jpg\"></a><br><a href=\"https://postimg.org/image/lpv3gczsz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ojy8tt1zb/IMG_5075.jpg\" alt=\"IMG_5075.jpg\"></a><br><a href=\"https://postimg.org/image/iwo3r3vb7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jm6w3gvuv/IMG_3018.jpg\" alt=\"IMG_3018.jpg\"></a><br>美国一侧<br><a href=\"https://postimg.org/image/6bo372blv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/59dwoissn/IMG_5029.jpg\" alt=\"IMG_5029.jpg\"></a><br>加拿大一侧<br><a href=\"https://postimg.org/image/rwxap1gsj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3t6j0qybr/IMG_5030.jpg\" alt=\"IMG_5030.jpg\"></a><br>有花坛作为边界之前的图片<br><a href=\"https://postimg.org/image/j1sbk5jk3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/fi6ducguf/image.jpg\" alt=\"image.jpg\"></a><br><a href=\"https://postimg.org/image/5v2vkmnur/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/55k389nbb/13_church_street_monument.jpg\" alt=\"13_church_street_monument.jpg\"></a><br>现在<br><a href=\"https://postimg.org/image/ppjv9mwqr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/qf2nlzxaf/IMG_2969.jpg\" alt=\"IMG_2969.jpg\"></a><br><a href=\"https://postimg.org/image/xm4chv877/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9v4yzr807/IMG_2983.jpg\" alt=\"IMG_2983.jpg\"></a><br>事先在官网上查好它的停车场是位于美国一侧，所以把车停好之后就推开图书馆的大门–位于美国一侧（似乎加拿大一侧并没有门）。一进门便看见大大的游客登记册，翻到最前页时间能回到2001年，那也正是9-11事件的时候。<br>这所图书馆是Haskell家族于1901所建立，是为了能在边界处的两个小镇提供一个学习和文化交流中心。之后没过几年，美加边境管理日趋严格-禁止在边界处新建建筑或者种植树木，根据祖父条例-之前的事情既往不咎，从而也确立 了这一独特的横跨边境的图书馆。<br><a href=\"https://postimg.org/image/ttku24soz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/dvc4bzyh3/IMG_2919.jpg\" alt=\"IMG_2919.jpg\"></a><br><a href=\"https://postimg.org/image/wg9jajyo3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/l3wxsrpzb/IMG_5027.jpg\" alt=\"IMG_5027.jpg\"></a><br>一进门随意参观一下便能发现独特的国界标志–一条黑线，跨过去几乎所有的藏书在加拿大一侧，而儿童中心却在美国一侧，甚至借还柜台也横跨两国。<br><a href=\"https://postimg.org/image/u5bxpr4ub/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/4mjlcqlaf/IMG_5069.jpg\" alt=\"IMG_5069.jpg\"></a><br><a href=\"https://postimg.org/image/wnxmqfqkj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/br1elrsjr/IMG_5070.jpg\" alt=\"IMG_5070.jpg\"></a><br>和馆员聊了聊她表示来这里参观的游客还是蛮多的，然后小镇上的居民借还图书也很方便–因为加拿大一侧并没有门所以两国边境特许加拿大居民从指定路径（就是花坛一侧）进入图书馆，离开的时候也要从这条路径离开，并不许进入其他地方或者游荡–不然以非法穿越国境罪论处。不过可惜的是二层的剧院不让参观（构造为舞台是在加拿大一侧，而观众席大部分在美国一侧）<br><a href=\"https://postimg.org/image/xrhr2eb7n/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/tid1087yf/IMG_5063.jpg\" alt=\"IMG_5063.jpg\"></a></p>\n<h1 id=\"边境趣事\"><a href=\"#边境趣事\" class=\"headerlink\" title=\"边境趣事\"></a>边境趣事</h1><h2 id=\"铁门前的摆拍\"><a href=\"#铁门前的摆拍\" class=\"headerlink\" title=\"铁门前的摆拍\"></a>铁门前的摆拍</h2><p>由于历史原因，有几所跨边境的房屋也有几条跨边境的小路，不过自从9-11之后这些小路变装上了铁门，不过我看地图上这些小路离图书馆并不远所以决定探索一番。<br>第一所房子位于Pelow Hill，前门属于美国，后院属于加拿大，门前有一条斑驳的国界线，依稀写着USA／Canada。<br><a href=\"https://postimg.org/image/mf9aezayr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/cupns3lmv/IMG_5050.jpg\" alt=\"IMG_5050.jpg\"></a><br><a href=\"https://postimg.org/image/c03462ds3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/tddekx93b/IMG_5056.jpg\" alt=\"IMG_5056.jpg\"></a><br><a href=\"https://postimg.org/image/5swbjn7er/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/niy04okzr/IMG_5077.jpg\" alt=\"IMG_5077.jpg\"></a><br><a href=\"https://postimg.org/image/rry4t3yv7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5srq5wi13/IMG_5051.jpg\" alt=\"IMG_5051.jpg\"></a><br><a href=\"https://postimg.org/image/rzlrpm9tv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/h00ke0jev/IMG_5058.jpg\" alt=\"IMG_5058.jpg\"></a><br>之前清晰时候的图片<br><a href=\"https://postimg.org/image/txjpfi4hv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/txjpfi4hz/08_line_rue_lee.jpg\" alt=\"08_line_rue_lee.jpg\"></a></p>\n<h2 id=\"边防警察的盘查\"><a href=\"#边防警察的盘查\" class=\"headerlink\" title=\"边防警察的盘查\"></a>边防警察的盘查</h2><p>就当我们准备继续前往下一条小路的时候，一辆边防警车停在了我们身后，下来两个和蔼的景观，询问我们是做什么，于是我们说是参观Haskell Library 和周边的景色，他说因为你们在非入境边境处有逗留，有摄像头记录所以必须查看你们的身份证明，我说我们的证件都在图书馆的停车场里，于是我们便坐上了警车，带着我们到停车场。<br><a href=\"https://postimg.org/image/q4zqge81v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/blslezex3/IMG_3052.jpg\" alt=\"IMG_3052.jpg\"></a><br><a href=\"https://postimg.org/image/hlgcimzpf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/vrw3dvakn/IMG_3048.jpg\" alt=\"IMG_3048.jpg\"></a><br><a href=\"https://postimg.org/image/pgqvxg9c3/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/drmw9hidj/IMG_3054.jpg\" alt=\"IMG_3054.jpg\"></a><br><a href=\"https://postimg.org/image/ndggps9j7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ga8la643r/IMG_3056.jpg\" alt=\"IMG_3056.jpg\"></a><br>由于我只带了加州驾照，非真实ID（据说是什么加强版驾照），为了确认我的F1身份花费了不少时间，所以后来我又给他我的SSN号码（唯一性），中途还出现警察去图书馆门口蹭网的有趣的一幕。<br><a href=\"https://postimg.org/image/ui2vck66b/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wmn8dn7t3/IMG_3063.jpg\" alt=\"IMG_3063.jpg\"></a><br><a href=\"https://postimg.org/image/s3azs4pxf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5rd6yqqtj/IMG_3069.jpg\" alt=\"IMG_3069.jpg\"></a><br>最后万事大吉～合了影便驱车回波士顿了</p>"},{"title":"Jobs and Algorithms Summary","comments":1,"date":"2017-12-15T21:18:19.000Z","updated":"2017-12-16T01:18:19.000Z","_content":"\n# 缘由\n在整个找工作的期间，每天刷一亩三分地和Leetcode，而且刷题的过程中，有一些比较有价值的网站值得参考，其中的解法分析重点需要掌握。\n\n# 找工作\n1. [Leetcode](https://leetcode.com/)\n2. [1point3acre.com](http://www.1point3acres.com/bbs/)\n3. [Linkedin (encourage to purchase premium member)](https://www.linkedin.com/)\n4. [Indeed](https://www.indeed.com/)\n5. [AngelList](https://angel.co/)\n6. [Glassdoor](https://www.glassdoor.com/index.htm)\n7. [LingOffer (Refer)](https://lingoffer.com/resource)\n8. [Hackerrank](https://www.hackerrank.com/)\n9. [某一次Bittiger分享的公司和HR邮箱PPT](https://bittigerfiles.s3.amazonaws.com/Company%20Slides%20for%20Career%20Meetup.pdf?nsukey=ITLZW1c%2BEgWMA0N%2BJBaXv%2FTqZfXkpCvREiPlHgVeBcN7soSoXYRWytE327M0R6ViNZGxVxz4LfMcE2hmJ6AvzeEtV9DgVfjU7qsgBq04n9qO0o032Ohq0bV%2BdG91IBWmq2w2vNgSuFQOtYWka9zmt5vN5L4WSfgI8EjHhSQQfLBBiv0KDTDXhWsX40T1gx3a)\n\n# 算法\n## Python 党\n1. [kamyu104 带有时间复杂度的总结](https://github.com/kamyu104/LeetCode)\n2. [细语呢喃 (思路清晰)](https://www.hrwhisper.me/)\n\n## Java 党\n1. [一个按类总结的博客](https://www.zybuluo.com/Yano/note/253217)\n2. [Ethan Li 的技术专栏 思路清晰](https://segmentfault.com/a/1190000003922961)\n3. [一个适合刷基础数据结构的博客](https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72897)\n4. [分类总结2（值得看）](https://liut2.gitbooks.io/crazystuff/content/trie.html)\n\n# 知识\n## Software Engineer\n1. [Python小技巧大全](https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html)\n2. [小土刀总结](http://wdxtub.com/2016/01/22/programmer-startline-1/)\n3. [CMU-15619 Cloud Computing](http://www.cs.cmu.edu/~msakr/15619-s16/index.html)\n4. [Java API 小总结](http://wiki.jikexueyuan.com/project/java/object-classes.html)\n5. [菜鸟教程！](http://www.runoob.com/)\n6. [廖雪峰教程](https://www.liaoxuefeng.com/)\n7. [数盟](http://dataunion.org/tag/python)\n8. [结构之法 算法之道](http://blog.csdn.net/v_july_v?viewmode=contents)\n9. [教你如何迅速秒杀掉：99%的海量数据处理面试题](http://blog.csdn.net/v_july_v/article/details/7382693)\n10. [基础知识包括系统设计--面试题](https://hellohell.gitbooks.io/java-/content/url_shorten_design.html)\n\n## Data Science\n1. [fullstackml](https://fullstackml.com/)\n2. [Apache Pig Intro] (http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm)\n3. [Cassandra Tutorial](http://www.tutorialspoint.com/cassandra/index.htm)\n4. [qwiklabs](https://qwiklabs.com/)\n5. [dive-into-machine-learning](https://github.com/hangtwenty/dive-into-machine-learning)\n\n# 系统设计\n1. [不太全的总结](http://systemdesigns.blogspot.com/?view=classic)\n2. [设计模式](http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html)\n\n\n\n# Project\n1. [利用 Python 练习数据挖掘](http://python.jobbole.com/83563/)\n2. [The Open Source Data Science Masters](http://datasciencemasters.org/)\n3. [Bittiger项目](https://slack-files.com/T0GUEMKEZ-F0J4G9QTT-274d3bc97e)\n4. [voting-app](http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/)\n5. [Interactive Data Visualization for the Web](http://chimera.labs.oreilly.com/books/1230000000345/index.html)\n\n# 杂\n1. [北美（湾区）CS工作进阶攻略－求职篇](http://www.1point3acres.com/bbs/thread-104824-1-1.html)\n2. [一个台湾人写的小总结](https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73)\n3. [复杂度表](http://bigocheatsheet.com/)\n4. [USC学长的Blog](http://yansu.org/)\n5. [面试总结](https://zhuanlan.zhihu.com/p/30218471)","source":"_posts/Leetcode-Solution-Reference-Website.md","raw":"---\ntitle: Jobs and Algorithms Summary\ncomments: true\ndate: 2017-12-15 13:18:19\nupdated: 2017-12-15 17:18:19\ncategories: Leetcode\ntags: Website\n---\n\n# 缘由\n在整个找工作的期间，每天刷一亩三分地和Leetcode，而且刷题的过程中，有一些比较有价值的网站值得参考，其中的解法分析重点需要掌握。\n\n# 找工作\n1. [Leetcode](https://leetcode.com/)\n2. [1point3acre.com](http://www.1point3acres.com/bbs/)\n3. [Linkedin (encourage to purchase premium member)](https://www.linkedin.com/)\n4. [Indeed](https://www.indeed.com/)\n5. [AngelList](https://angel.co/)\n6. [Glassdoor](https://www.glassdoor.com/index.htm)\n7. [LingOffer (Refer)](https://lingoffer.com/resource)\n8. [Hackerrank](https://www.hackerrank.com/)\n9. [某一次Bittiger分享的公司和HR邮箱PPT](https://bittigerfiles.s3.amazonaws.com/Company%20Slides%20for%20Career%20Meetup.pdf?nsukey=ITLZW1c%2BEgWMA0N%2BJBaXv%2FTqZfXkpCvREiPlHgVeBcN7soSoXYRWytE327M0R6ViNZGxVxz4LfMcE2hmJ6AvzeEtV9DgVfjU7qsgBq04n9qO0o032Ohq0bV%2BdG91IBWmq2w2vNgSuFQOtYWka9zmt5vN5L4WSfgI8EjHhSQQfLBBiv0KDTDXhWsX40T1gx3a)\n\n# 算法\n## Python 党\n1. [kamyu104 带有时间复杂度的总结](https://github.com/kamyu104/LeetCode)\n2. [细语呢喃 (思路清晰)](https://www.hrwhisper.me/)\n\n## Java 党\n1. [一个按类总结的博客](https://www.zybuluo.com/Yano/note/253217)\n2. [Ethan Li 的技术专栏 思路清晰](https://segmentfault.com/a/1190000003922961)\n3. [一个适合刷基础数据结构的博客](https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72897)\n4. [分类总结2（值得看）](https://liut2.gitbooks.io/crazystuff/content/trie.html)\n\n# 知识\n## Software Engineer\n1. [Python小技巧大全](https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html)\n2. [小土刀总结](http://wdxtub.com/2016/01/22/programmer-startline-1/)\n3. [CMU-15619 Cloud Computing](http://www.cs.cmu.edu/~msakr/15619-s16/index.html)\n4. [Java API 小总结](http://wiki.jikexueyuan.com/project/java/object-classes.html)\n5. [菜鸟教程！](http://www.runoob.com/)\n6. [廖雪峰教程](https://www.liaoxuefeng.com/)\n7. [数盟](http://dataunion.org/tag/python)\n8. [结构之法 算法之道](http://blog.csdn.net/v_july_v?viewmode=contents)\n9. [教你如何迅速秒杀掉：99%的海量数据处理面试题](http://blog.csdn.net/v_july_v/article/details/7382693)\n10. [基础知识包括系统设计--面试题](https://hellohell.gitbooks.io/java-/content/url_shorten_design.html)\n\n## Data Science\n1. [fullstackml](https://fullstackml.com/)\n2. [Apache Pig Intro] (http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm)\n3. [Cassandra Tutorial](http://www.tutorialspoint.com/cassandra/index.htm)\n4. [qwiklabs](https://qwiklabs.com/)\n5. [dive-into-machine-learning](https://github.com/hangtwenty/dive-into-machine-learning)\n\n# 系统设计\n1. [不太全的总结](http://systemdesigns.blogspot.com/?view=classic)\n2. [设计模式](http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html)\n\n\n\n# Project\n1. [利用 Python 练习数据挖掘](http://python.jobbole.com/83563/)\n2. [The Open Source Data Science Masters](http://datasciencemasters.org/)\n3. [Bittiger项目](https://slack-files.com/T0GUEMKEZ-F0J4G9QTT-274d3bc97e)\n4. [voting-app](http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/)\n5. [Interactive Data Visualization for the Web](http://chimera.labs.oreilly.com/books/1230000000345/index.html)\n\n# 杂\n1. [北美（湾区）CS工作进阶攻略－求职篇](http://www.1point3acres.com/bbs/thread-104824-1-1.html)\n2. [一个台湾人写的小总结](https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73)\n3. [复杂度表](http://bigocheatsheet.com/)\n4. [USC学长的Blog](http://yansu.org/)\n5. [面试总结](https://zhuanlan.zhihu.com/p/30218471)","slug":"Leetcode-Solution-Reference-Website","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf10010m2ca7b0b7nwp","content":"<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>在整个找工作的期间，每天刷一亩三分地和Leetcode，而且刷题的过程中，有一些比较有价值的网站值得参考，其中的解法分析重点需要掌握。</p>\n<h1 id=\"找工作\"><a href=\"#找工作\" class=\"headerlink\" title=\"找工作\"></a>找工作</h1><ol>\n<li><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">Leetcode</a></li>\n<li><a href=\"http://www.1point3acres.com/bbs/\" target=\"_blank\" rel=\"noopener\">1point3acre.com</a></li>\n<li><a href=\"https://www.linkedin.com/\" target=\"_blank\" rel=\"noopener\">Linkedin (encourage to purchase premium member)</a></li>\n<li><a href=\"https://www.indeed.com/\" target=\"_blank\" rel=\"noopener\">Indeed</a></li>\n<li><a href=\"https://angel.co/\" target=\"_blank\" rel=\"noopener\">AngelList</a></li>\n<li><a href=\"https://www.glassdoor.com/index.htm\" target=\"_blank\" rel=\"noopener\">Glassdoor</a></li>\n<li><a href=\"https://lingoffer.com/resource\" target=\"_blank\" rel=\"noopener\">LingOffer (Refer)</a></li>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a></li>\n<li><a href=\"https://bittigerfiles.s3.amazonaws.com/Company%20Slides%20for%20Career%20Meetup.pdf?nsukey=ITLZW1c%2BEgWMA0N%2BJBaXv%2FTqZfXkpCvREiPlHgVeBcN7soSoXYRWytE327M0R6ViNZGxVxz4LfMcE2hmJ6AvzeEtV9DgVfjU7qsgBq04n9qO0o032Ohq0bV%2BdG91IBWmq2w2vNgSuFQOtYWka9zmt5vN5L4WSfgI8EjHhSQQfLBBiv0KDTDXhWsX40T1gx3a\" target=\"_blank\" rel=\"noopener\">某一次Bittiger分享的公司和HR邮箱PPT</a></li>\n</ol>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"Python-党\"><a href=\"#Python-党\" class=\"headerlink\" title=\"Python 党\"></a>Python 党</h2><ol>\n<li><a href=\"https://github.com/kamyu104/LeetCode\" target=\"_blank\" rel=\"noopener\">kamyu104 带有时间复杂度的总结</a></li>\n<li><a href=\"https://www.hrwhisper.me/\" target=\"_blank\" rel=\"noopener\">细语呢喃 (思路清晰)</a></li>\n</ol>\n<h2 id=\"Java-党\"><a href=\"#Java-党\" class=\"headerlink\" title=\"Java 党\"></a>Java 党</h2><ol>\n<li><a href=\"https://www.zybuluo.com/Yano/note/253217\" target=\"_blank\" rel=\"noopener\">一个按类总结的博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003922961\" target=\"_blank\" rel=\"noopener\">Ethan Li 的技术专栏 思路清晰</a></li>\n<li><a href=\"https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72897\" target=\"_blank\" rel=\"noopener\">一个适合刷基础数据结构的博客</a></li>\n<li><a href=\"https://liut2.gitbooks.io/crazystuff/content/trie.html\" target=\"_blank\" rel=\"noopener\">分类总结2（值得看）</a></li>\n</ol>\n<h1 id=\"知识\"><a href=\"#知识\" class=\"headerlink\" title=\"知识\"></a>知识</h1><h2 id=\"Software-Engineer\"><a href=\"#Software-Engineer\" class=\"headerlink\" title=\"Software Engineer\"></a>Software Engineer</h2><ol>\n<li><a href=\"https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html\" target=\"_blank\" rel=\"noopener\">Python小技巧大全</a></li>\n<li><a href=\"http://wdxtub.com/2016/01/22/programmer-startline-1/\" target=\"_blank\" rel=\"noopener\">小土刀总结</a></li>\n<li><a href=\"http://www.cs.cmu.edu/~msakr/15619-s16/index.html\" target=\"_blank\" rel=\"noopener\">CMU-15619 Cloud Computing</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/java/object-classes.html\" target=\"_blank\" rel=\"noopener\">Java API 小总结</a></li>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程！</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">廖雪峰教程</a></li>\n<li><a href=\"http://dataunion.org/tag/python\" target=\"_blank\" rel=\"noopener\">数盟</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v?viewmode=contents\" target=\"_blank\" rel=\"noopener\">结构之法 算法之道</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v/article/details/7382693\" target=\"_blank\" rel=\"noopener\">教你如何迅速秒杀掉：99%的海量数据处理面试题</a></li>\n<li><a href=\"https://hellohell.gitbooks.io/java-/content/url_shorten_design.html\" target=\"_blank\" rel=\"noopener\">基础知识包括系统设计–面试题</a></li>\n</ol>\n<h2 id=\"Data-Science\"><a href=\"#Data-Science\" class=\"headerlink\" title=\"Data Science\"></a>Data Science</h2><ol>\n<li><a href=\"https://fullstackml.com/\" target=\"_blank\" rel=\"noopener\">fullstackml</a></li>\n<li>[Apache Pig Intro] (<a href=\"http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm</a>)</li>\n<li><a href=\"http://www.tutorialspoint.com/cassandra/index.htm\" target=\"_blank\" rel=\"noopener\">Cassandra Tutorial</a></li>\n<li><a href=\"https://qwiklabs.com/\" target=\"_blank\" rel=\"noopener\">qwiklabs</a></li>\n<li><a href=\"https://github.com/hangtwenty/dive-into-machine-learning\" target=\"_blank\" rel=\"noopener\">dive-into-machine-learning</a></li>\n</ol>\n<h1 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h1><ol>\n<li><a href=\"http://systemdesigns.blogspot.com/?view=classic\" target=\"_blank\" rel=\"noopener\">不太全的总结</a></li>\n<li><a href=\"http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n</ol>\n<h1 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h1><ol>\n<li><a href=\"http://python.jobbole.com/83563/\" target=\"_blank\" rel=\"noopener\">利用 Python 练习数据挖掘</a></li>\n<li><a href=\"http://datasciencemasters.org/\" target=\"_blank\" rel=\"noopener\">The Open Source Data Science Masters</a></li>\n<li><a href=\"https://slack-files.com/T0GUEMKEZ-F0J4G9QTT-274d3bc97e\" target=\"_blank\" rel=\"noopener\">Bittiger项目</a></li>\n<li><a href=\"http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/\" target=\"_blank\" rel=\"noopener\">voting-app</a></li>\n<li><a href=\"http://chimera.labs.oreilly.com/books/1230000000345/index.html\" target=\"_blank\" rel=\"noopener\">Interactive Data Visualization for the Web</a></li>\n</ol>\n<h1 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h1><ol>\n<li><a href=\"http://www.1point3acres.com/bbs/thread-104824-1-1.html\" target=\"_blank\" rel=\"noopener\">北美（湾区）CS工作进阶攻略－求职篇</a></li>\n<li><a href=\"https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73\" target=\"_blank\" rel=\"noopener\">一个台湾人写的小总结</a></li>\n<li><a href=\"http://bigocheatsheet.com/\" target=\"_blank\" rel=\"noopener\">复杂度表</a></li>\n<li><a href=\"http://yansu.org/\" target=\"_blank\" rel=\"noopener\">USC学长的Blog</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30218471\" target=\"_blank\" rel=\"noopener\">面试总结</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h1><p>在整个找工作的期间，每天刷一亩三分地和Leetcode，而且刷题的过程中，有一些比较有价值的网站值得参考，其中的解法分析重点需要掌握。</p>\n<h1 id=\"找工作\"><a href=\"#找工作\" class=\"headerlink\" title=\"找工作\"></a>找工作</h1><ol>\n<li><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">Leetcode</a></li>\n<li><a href=\"http://www.1point3acres.com/bbs/\" target=\"_blank\" rel=\"noopener\">1point3acre.com</a></li>\n<li><a href=\"https://www.linkedin.com/\" target=\"_blank\" rel=\"noopener\">Linkedin (encourage to purchase premium member)</a></li>\n<li><a href=\"https://www.indeed.com/\" target=\"_blank\" rel=\"noopener\">Indeed</a></li>\n<li><a href=\"https://angel.co/\" target=\"_blank\" rel=\"noopener\">AngelList</a></li>\n<li><a href=\"https://www.glassdoor.com/index.htm\" target=\"_blank\" rel=\"noopener\">Glassdoor</a></li>\n<li><a href=\"https://lingoffer.com/resource\" target=\"_blank\" rel=\"noopener\">LingOffer (Refer)</a></li>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a></li>\n<li><a href=\"https://bittigerfiles.s3.amazonaws.com/Company%20Slides%20for%20Career%20Meetup.pdf?nsukey=ITLZW1c%2BEgWMA0N%2BJBaXv%2FTqZfXkpCvREiPlHgVeBcN7soSoXYRWytE327M0R6ViNZGxVxz4LfMcE2hmJ6AvzeEtV9DgVfjU7qsgBq04n9qO0o032Ohq0bV%2BdG91IBWmq2w2vNgSuFQOtYWka9zmt5vN5L4WSfgI8EjHhSQQfLBBiv0KDTDXhWsX40T1gx3a\" target=\"_blank\" rel=\"noopener\">某一次Bittiger分享的公司和HR邮箱PPT</a></li>\n</ol>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"Python-党\"><a href=\"#Python-党\" class=\"headerlink\" title=\"Python 党\"></a>Python 党</h2><ol>\n<li><a href=\"https://github.com/kamyu104/LeetCode\" target=\"_blank\" rel=\"noopener\">kamyu104 带有时间复杂度的总结</a></li>\n<li><a href=\"https://www.hrwhisper.me/\" target=\"_blank\" rel=\"noopener\">细语呢喃 (思路清晰)</a></li>\n</ol>\n<h2 id=\"Java-党\"><a href=\"#Java-党\" class=\"headerlink\" title=\"Java 党\"></a>Java 党</h2><ol>\n<li><a href=\"https://www.zybuluo.com/Yano/note/253217\" target=\"_blank\" rel=\"noopener\">一个按类总结的博客</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003922961\" target=\"_blank\" rel=\"noopener\">Ethan Li 的技术专栏 思路清晰</a></li>\n<li><a href=\"https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72897\" target=\"_blank\" rel=\"noopener\">一个适合刷基础数据结构的博客</a></li>\n<li><a href=\"https://liut2.gitbooks.io/crazystuff/content/trie.html\" target=\"_blank\" rel=\"noopener\">分类总结2（值得看）</a></li>\n</ol>\n<h1 id=\"知识\"><a href=\"#知识\" class=\"headerlink\" title=\"知识\"></a>知识</h1><h2 id=\"Software-Engineer\"><a href=\"#Software-Engineer\" class=\"headerlink\" title=\"Software Engineer\"></a>Software Engineer</h2><ol>\n<li><a href=\"https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html\" target=\"_blank\" rel=\"noopener\">Python小技巧大全</a></li>\n<li><a href=\"http://wdxtub.com/2016/01/22/programmer-startline-1/\" target=\"_blank\" rel=\"noopener\">小土刀总结</a></li>\n<li><a href=\"http://www.cs.cmu.edu/~msakr/15619-s16/index.html\" target=\"_blank\" rel=\"noopener\">CMU-15619 Cloud Computing</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/java/object-classes.html\" target=\"_blank\" rel=\"noopener\">Java API 小总结</a></li>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程！</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">廖雪峰教程</a></li>\n<li><a href=\"http://dataunion.org/tag/python\" target=\"_blank\" rel=\"noopener\">数盟</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v?viewmode=contents\" target=\"_blank\" rel=\"noopener\">结构之法 算法之道</a></li>\n<li><a href=\"http://blog.csdn.net/v_july_v/article/details/7382693\" target=\"_blank\" rel=\"noopener\">教你如何迅速秒杀掉：99%的海量数据处理面试题</a></li>\n<li><a href=\"https://hellohell.gitbooks.io/java-/content/url_shorten_design.html\" target=\"_blank\" rel=\"noopener\">基础知识包括系统设计–面试题</a></li>\n</ol>\n<h2 id=\"Data-Science\"><a href=\"#Data-Science\" class=\"headerlink\" title=\"Data Science\"></a>Data Science</h2><ol>\n<li><a href=\"https://fullstackml.com/\" target=\"_blank\" rel=\"noopener\">fullstackml</a></li>\n<li>[Apache Pig Intro] (<a href=\"http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm\" target=\"_blank\" rel=\"noopener\">http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm</a>)</li>\n<li><a href=\"http://www.tutorialspoint.com/cassandra/index.htm\" target=\"_blank\" rel=\"noopener\">Cassandra Tutorial</a></li>\n<li><a href=\"https://qwiklabs.com/\" target=\"_blank\" rel=\"noopener\">qwiklabs</a></li>\n<li><a href=\"https://github.com/hangtwenty/dive-into-machine-learning\" target=\"_blank\" rel=\"noopener\">dive-into-machine-learning</a></li>\n</ol>\n<h1 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h1><ol>\n<li><a href=\"http://systemdesigns.blogspot.com/?view=classic\" target=\"_blank\" rel=\"noopener\">不太全的总结</a></li>\n<li><a href=\"http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n</ol>\n<h1 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h1><ol>\n<li><a href=\"http://python.jobbole.com/83563/\" target=\"_blank\" rel=\"noopener\">利用 Python 练习数据挖掘</a></li>\n<li><a href=\"http://datasciencemasters.org/\" target=\"_blank\" rel=\"noopener\">The Open Source Data Science Masters</a></li>\n<li><a href=\"https://slack-files.com/T0GUEMKEZ-F0J4G9QTT-274d3bc97e\" target=\"_blank\" rel=\"noopener\">Bittiger项目</a></li>\n<li><a href=\"http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/\" target=\"_blank\" rel=\"noopener\">voting-app</a></li>\n<li><a href=\"http://chimera.labs.oreilly.com/books/1230000000345/index.html\" target=\"_blank\" rel=\"noopener\">Interactive Data Visualization for the Web</a></li>\n</ol>\n<h1 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h1><ol>\n<li><a href=\"http://www.1point3acres.com/bbs/thread-104824-1-1.html\" target=\"_blank\" rel=\"noopener\">北美（湾区）CS工作进阶攻略－求职篇</a></li>\n<li><a href=\"https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73\" target=\"_blank\" rel=\"noopener\">一个台湾人写的小总结</a></li>\n<li><a href=\"http://bigocheatsheet.com/\" target=\"_blank\" rel=\"noopener\">复杂度表</a></li>\n<li><a href=\"http://yansu.org/\" target=\"_blank\" rel=\"noopener\">USC学长的Blog</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/30218471\" target=\"_blank\" rel=\"noopener\">面试总结</a></li>\n</ol>\n"},{"title":"LinkedList系列","comments":1,"date":"2017-07-11T06:46:55.000Z","updated":"2017-07-17T16:46:55.000Z","_content":"# LinkedList系列总结\n24/27  \n[x] Easy  \n[x] Medium  \n[x] Hard  \n这种题，多画图，一步步来，确定哪个node指向哪个node就会好一点,之后把图放上来，会更容易复习！\n## 基础\n### dummyNode\n适用于头节点需要进行操作，增删改，亦或者保存头节点，不被后续操作改变\n\n```python\ndummy = ListNode(0)\ndummy.next = head\ncurr = head\n```\n\n### reverseList\nIterative版本，简要来说就是记录下一节点，当前节点指向上一节点，同步移动上一节点和当前节点。最后的curr为空，prev为头也就是最初链表的最后一个元素\n\n```python\nprev = None\ncurr = head\nwhile curr:\n    nextNode = curr.next\n    curr.next = prev\n    prev = curr\n    curr = nextNode\nreturn prev\n```\n\nRecursive版本的，一直到底，然后倒叙指针\n\n```python\nsecond = head.next\nhead.next = None\nrest = self.reverseList(second)\nsecond.next = head\nreturn rest\n```\n\n变种1 92. Reverse Linked List II  \n除了移动节点之外，关键是链接头和尾\n\n```python\npre.next.next = curr //pre.next 为最初的头，.next则链接后来的尾和最初的尾 1-2-3-4-5，1-4-3-2-5，2-5\npre.next = newHead // 1-4\n```\n<!--more-->\n### 快慢指针\n用于检测环和找中点,见于  \n 141. Linked List Cycle  \n 142. Linked List Cycle II   \n ·234. Palindrome Linked List\n\n```python\nfast, slow = head, head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n```\n\n## Medium版本\n·369. Plus One Linked List    \n·445. Add Two Numbers II  \n本质上用stack保存节点信息，然后不断在前方添加节点\n\n```python\nnode.val = add_value % 10\ncarry = ListNode(add_value / 10)\ncarry.next = node\nnode = carry\nadd_value /= 10\n```\n\nMerge，Move系列  \n·21. Merge Two Sorted Lists  \n·328. Odd Even Linked List  \n·86. Partition List  \n\n```python\ncurr = dummy\nwhile l1 and l2:\n    if l1.val < l2.val:\n        curr.next = l1\n        l1 = l1.next\n    else:\n        curr.next = l2\n        l2 = l2.next\n    curr = curr.next\n```\n保证两个list都存在，然后剩余的append在后面；然后移动节点的过程中要数好步伐`while even and even.next:`  \n·160. Intersection of Two Linked Lists  \n·19. Remove Nth Node From End of List\n\n`61. Rotate List  \ntrick的地方是找到最后一个node，并且链接第一个，使用常用模版，不过稍加改动，因为要找到最后一个node而不是长度，所以要提前终止循环 \n \n```python\nlength = 1\nwhile curr.next:\n    curr = curr.next\n    length += 1\ncurr.next = head\nmove = length-1-k%length\n```\n\n综合   \n`143. Reorder List  \n结合 以上多种方法，快慢指针找中点，反转，merge\n\n```python\nmid = self.findMiddle(head)\ntail = self.reverse(mid.next)\nmid.next = None\n\nself.merge(head, tail)\n```\n\n`23. Merge k Sorted Lists  \n一种方法是利用merge two list然后不断divide and conquer，另外一种比较简洁的是利用PriorityQueue，然后不断put和poll()进而每一个node都是所有优先队列中最小的一个\n\n```python\nq = PriorityQueue()\nfor node in lists:\n    if node: ## empty\n        q.put((node.val, node))\nwhile q.qsize():\n    curr.next = q.get()[1]\n    curr = curr.next\n    if curr.next:\n        q.put((curr.next.val, curr.next))\n```\n\n`82. Remove Duplicates from Sorted List II  \n因为要移除所有重复的node，所以势必要prev保存上一节点，然后如果中间因为重复节点而curr！= prev.next，要把prev节点的next放到curr的next节点，因为curr为重复节点的最后一个\n\n```python\nwhile curr:\n\twhile curr.next and curr.val == curr.next.val: ## [1]\n\t\tcurr = curr.next\n\t\tif prev.next != curr:\n\t\t\tprev.next = curr.next\n\t\t\tcurr = prev.next\n\t\telse:\n\t\t\tprev = prev.next\n\t\t\tcurr = curr.next\n```\n\n`109. Convert Sorted List to Binary Search Tree \n用helperfunction帮助，每一步找出子链表的中点，然后分别递归left和right节点。\n\n```python\nwhile fast!= tail and fast.next != tail:\n    fast = fast.next.next\n    slow = slow.next\nroot = TreeNode(slow.val)\nroot.left = self.helper(head, slow)\nroot.right = self.helper(slow.next, tail)\n```\n\n·148. Sort List  \n分治法，然后分别对子链表merge\n\n```python\nprev,fast, slow =  None, head, head\nwhile fast and fast.next:\n    prev = slow\n    slow = slow.next\n    fast = fast.next.next\n    \nprev.next = None ## cut the middle\n    \nl1 = self.sortList(head)\nl2 = self.sortList(slow)\n    \nreturn self.merge(l1, l2)\n```\n\n·24. Swap Nodes in Pairs\n这道题勤画图，一步步来就好，iterative的方法比较烦，不过是`Reverse Nodes in k-Group`的简化版，那道题是LinkedList集大成者\n\n```python\nwhile curr.next and curr.next.next:\n    first = curr.next   # 1\n    second = curr.next.next #2\n    \n    first.next = second.next # 1-3\n    curr.next = second  #-2\n    curr.next.next = first  #2-1\n    curr = curr.next.next # 1\n```\n    \n    \n`25. Reverse Nodes in k-Group\n这道题是一道典型的综合题，适合复习备考多刷。它的子function是reverseList的改良，因为需要保存头节点和尾节点，所以需要设置lastNode和nextNode，然后与之相对应的就是lastNode不断和后面的节点进行调换。可以看看对比\n\n```python\n/*\n * 0->1->2->3->4->5->6\n * |           |   \n * pre        next\n *\n * after calling pre = reverse(pre, next)\n * \n * 0->3->2->1->4->5->6\n *          |  |\n *          pre next \n */\n \ndef reverseNode(self, pre, nextNode):\n    lastNode = pre.next\n    curr = lastNode.next\n    \n    while curr != nextNode:\n        lastNode.next = curr.next\n        curr.next = pre.next\n        pre.next = curr\n        curr = lastNode.next\n    return lastNode\n    \ndef reverseList(self, head):\n\tif not head or not head.next:\n\t    return head\n\tprev = None\n\tcurr = head\n\twhile curr:\n\t    nextNode = curr.next\n\t    curr.next = prev\n\t    prev = curr\n\t    curr = nextNode\n\treturn prev\n```\n","source":"_posts/LinkedList系列.md","raw":"---\ntitle: LinkedList系列\ncomments: true\ndate: 2017-07-10 23:46:55\nupdated: 2017-07-17 09:46:55\ncategories: Leetcode\ntags: [LinkedList, TwoPointer]\n---\n# LinkedList系列总结\n24/27  \n[x] Easy  \n[x] Medium  \n[x] Hard  \n这种题，多画图，一步步来，确定哪个node指向哪个node就会好一点,之后把图放上来，会更容易复习！\n## 基础\n### dummyNode\n适用于头节点需要进行操作，增删改，亦或者保存头节点，不被后续操作改变\n\n```python\ndummy = ListNode(0)\ndummy.next = head\ncurr = head\n```\n\n### reverseList\nIterative版本，简要来说就是记录下一节点，当前节点指向上一节点，同步移动上一节点和当前节点。最后的curr为空，prev为头也就是最初链表的最后一个元素\n\n```python\nprev = None\ncurr = head\nwhile curr:\n    nextNode = curr.next\n    curr.next = prev\n    prev = curr\n    curr = nextNode\nreturn prev\n```\n\nRecursive版本的，一直到底，然后倒叙指针\n\n```python\nsecond = head.next\nhead.next = None\nrest = self.reverseList(second)\nsecond.next = head\nreturn rest\n```\n\n变种1 92. Reverse Linked List II  \n除了移动节点之外，关键是链接头和尾\n\n```python\npre.next.next = curr //pre.next 为最初的头，.next则链接后来的尾和最初的尾 1-2-3-4-5，1-4-3-2-5，2-5\npre.next = newHead // 1-4\n```\n<!--more-->\n### 快慢指针\n用于检测环和找中点,见于  \n 141. Linked List Cycle  \n 142. Linked List Cycle II   \n ·234. Palindrome Linked List\n\n```python\nfast, slow = head, head\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n```\n\n## Medium版本\n·369. Plus One Linked List    \n·445. Add Two Numbers II  \n本质上用stack保存节点信息，然后不断在前方添加节点\n\n```python\nnode.val = add_value % 10\ncarry = ListNode(add_value / 10)\ncarry.next = node\nnode = carry\nadd_value /= 10\n```\n\nMerge，Move系列  \n·21. Merge Two Sorted Lists  \n·328. Odd Even Linked List  \n·86. Partition List  \n\n```python\ncurr = dummy\nwhile l1 and l2:\n    if l1.val < l2.val:\n        curr.next = l1\n        l1 = l1.next\n    else:\n        curr.next = l2\n        l2 = l2.next\n    curr = curr.next\n```\n保证两个list都存在，然后剩余的append在后面；然后移动节点的过程中要数好步伐`while even and even.next:`  \n·160. Intersection of Two Linked Lists  \n·19. Remove Nth Node From End of List\n\n`61. Rotate List  \ntrick的地方是找到最后一个node，并且链接第一个，使用常用模版，不过稍加改动，因为要找到最后一个node而不是长度，所以要提前终止循环 \n \n```python\nlength = 1\nwhile curr.next:\n    curr = curr.next\n    length += 1\ncurr.next = head\nmove = length-1-k%length\n```\n\n综合   \n`143. Reorder List  \n结合 以上多种方法，快慢指针找中点，反转，merge\n\n```python\nmid = self.findMiddle(head)\ntail = self.reverse(mid.next)\nmid.next = None\n\nself.merge(head, tail)\n```\n\n`23. Merge k Sorted Lists  \n一种方法是利用merge two list然后不断divide and conquer，另外一种比较简洁的是利用PriorityQueue，然后不断put和poll()进而每一个node都是所有优先队列中最小的一个\n\n```python\nq = PriorityQueue()\nfor node in lists:\n    if node: ## empty\n        q.put((node.val, node))\nwhile q.qsize():\n    curr.next = q.get()[1]\n    curr = curr.next\n    if curr.next:\n        q.put((curr.next.val, curr.next))\n```\n\n`82. Remove Duplicates from Sorted List II  \n因为要移除所有重复的node，所以势必要prev保存上一节点，然后如果中间因为重复节点而curr！= prev.next，要把prev节点的next放到curr的next节点，因为curr为重复节点的最后一个\n\n```python\nwhile curr:\n\twhile curr.next and curr.val == curr.next.val: ## [1]\n\t\tcurr = curr.next\n\t\tif prev.next != curr:\n\t\t\tprev.next = curr.next\n\t\t\tcurr = prev.next\n\t\telse:\n\t\t\tprev = prev.next\n\t\t\tcurr = curr.next\n```\n\n`109. Convert Sorted List to Binary Search Tree \n用helperfunction帮助，每一步找出子链表的中点，然后分别递归left和right节点。\n\n```python\nwhile fast!= tail and fast.next != tail:\n    fast = fast.next.next\n    slow = slow.next\nroot = TreeNode(slow.val)\nroot.left = self.helper(head, slow)\nroot.right = self.helper(slow.next, tail)\n```\n\n·148. Sort List  \n分治法，然后分别对子链表merge\n\n```python\nprev,fast, slow =  None, head, head\nwhile fast and fast.next:\n    prev = slow\n    slow = slow.next\n    fast = fast.next.next\n    \nprev.next = None ## cut the middle\n    \nl1 = self.sortList(head)\nl2 = self.sortList(slow)\n    \nreturn self.merge(l1, l2)\n```\n\n·24. Swap Nodes in Pairs\n这道题勤画图，一步步来就好，iterative的方法比较烦，不过是`Reverse Nodes in k-Group`的简化版，那道题是LinkedList集大成者\n\n```python\nwhile curr.next and curr.next.next:\n    first = curr.next   # 1\n    second = curr.next.next #2\n    \n    first.next = second.next # 1-3\n    curr.next = second  #-2\n    curr.next.next = first  #2-1\n    curr = curr.next.next # 1\n```\n    \n    \n`25. Reverse Nodes in k-Group\n这道题是一道典型的综合题，适合复习备考多刷。它的子function是reverseList的改良，因为需要保存头节点和尾节点，所以需要设置lastNode和nextNode，然后与之相对应的就是lastNode不断和后面的节点进行调换。可以看看对比\n\n```python\n/*\n * 0->1->2->3->4->5->6\n * |           |   \n * pre        next\n *\n * after calling pre = reverse(pre, next)\n * \n * 0->3->2->1->4->5->6\n *          |  |\n *          pre next \n */\n \ndef reverseNode(self, pre, nextNode):\n    lastNode = pre.next\n    curr = lastNode.next\n    \n    while curr != nextNode:\n        lastNode.next = curr.next\n        curr.next = pre.next\n        pre.next = curr\n        curr = lastNode.next\n    return lastNode\n    \ndef reverseList(self, head):\n\tif not head or not head.next:\n\t    return head\n\tprev = None\n\tcurr = head\n\twhile curr:\n\t    nextNode = curr.next\n\t    curr.next = prev\n\t    prev = curr\n\t    curr = nextNode\n\treturn prev\n```\n","slug":"LinkedList系列","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf20011m2ca1goyjtrr","content":"<h1 id=\"LinkedList系列总结\"><a href=\"#LinkedList系列总结\" class=\"headerlink\" title=\"LinkedList系列总结\"></a>LinkedList系列总结</h1><p>24/27<br>[x] Easy<br>[x] Medium<br>[x] Hard<br>这种题，多画图，一步步来，确定哪个node指向哪个node就会好一点,之后把图放上来，会更容易复习！</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"dummyNode\"><a href=\"#dummyNode\" class=\"headerlink\" title=\"dummyNode\"></a>dummyNode</h3><p>适用于头节点需要进行操作，增删改，亦或者保存头节点，不被后续操作改变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">dummy.next = head</span><br><span class=\"line\">curr = head</span><br></pre></td></tr></table></figure>\n<h3 id=\"reverseList\"><a href=\"#reverseList\" class=\"headerlink\" title=\"reverseList\"></a>reverseList</h3><p>Iterative版本，简要来说就是记录下一节点，当前节点指向上一节点，同步移动上一节点和当前节点。最后的curr为空，prev为头也就是最初链表的最后一个元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prev = <span class=\"keyword\">None</span></span><br><span class=\"line\">curr = head</span><br><span class=\"line\"><span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">    nextNode = curr.next</span><br><span class=\"line\">    curr.next = prev</span><br><span class=\"line\">    prev = curr</span><br><span class=\"line\">    curr = nextNode</span><br><span class=\"line\"><span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>\n<p>Recursive版本的，一直到底，然后倒叙指针</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">second = head.next</span><br><span class=\"line\">head.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">rest = self.reverseList(second)</span><br><span class=\"line\">second.next = head</span><br><span class=\"line\"><span class=\"keyword\">return</span> rest</span><br></pre></td></tr></table></figure>\n<p>变种1 92. Reverse Linked List II<br>除了移动节点之外，关键是链接头和尾</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pre.next.next = curr //pre.next 为最初的头，.next则链接后来的尾和最初的尾 <span class=\"number\">1</span><span class=\"number\">-2</span><span class=\"number\">-3</span><span class=\"number\">-4</span><span class=\"number\">-5</span>，<span class=\"number\">1</span><span class=\"number\">-4</span><span class=\"number\">-3</span><span class=\"number\">-2</span><span class=\"number\">-5</span>，<span class=\"number\">2</span><span class=\"number\">-5</span></span><br><span class=\"line\">pre.next = newHead // <span class=\"number\">1</span><span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><p>用于检测环和找中点,见于  </p>\n<ol>\n<li>Linked List Cycle  </li>\n<li>Linked List Cycle II<br>·234. Palindrome Linked List</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast, slow = head, head</span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium版本\"><a href=\"#Medium版本\" class=\"headerlink\" title=\"Medium版本\"></a>Medium版本</h2><p>·369. Plus One Linked List<br>·445. Add Two Numbers II<br>本质上用stack保存节点信息，然后不断在前方添加节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.val = add_value % <span class=\"number\">10</span></span><br><span class=\"line\">carry = ListNode(add_value / <span class=\"number\">10</span>)</span><br><span class=\"line\">carry.next = node</span><br><span class=\"line\">node = carry</span><br><span class=\"line\">add_value /= <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>Merge，Move系列<br>·21. Merge Two Sorted Lists<br>·328. Odd Even Linked List<br>·86. Partition List  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curr = dummy</span><br><span class=\"line\"><span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l1.val &lt; l2.val:</span><br><span class=\"line\">        curr.next = l1</span><br><span class=\"line\">        l1 = l1.next</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        curr.next = l2</span><br><span class=\"line\">        l2 = l2.next</span><br><span class=\"line\">    curr = curr.next</span><br></pre></td></tr></table></figure>\n<p>保证两个list都存在，然后剩余的append在后面；然后移动节点的过程中要数好步伐<code>while even and even.next:</code><br>·160. Intersection of Two Linked Lists<br>·19. Remove Nth Node From End of List</p>\n<p>`61. Rotate List<br>trick的地方是找到最后一个node，并且链接第一个，使用常用模版，不过稍加改动，因为要找到最后一个node而不是长度，所以要提前终止循环 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> curr.next:</span><br><span class=\"line\">    curr = curr.next</span><br><span class=\"line\">    length += <span class=\"number\">1</span></span><br><span class=\"line\">curr.next = head</span><br><span class=\"line\">move = length<span class=\"number\">-1</span>-k%length</span><br></pre></td></tr></table></figure>\n<p>综合<br>`143. Reorder List<br>结合 以上多种方法，快慢指针找中点，反转，merge</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mid = self.findMiddle(head)</span><br><span class=\"line\">tail = self.reverse(mid.next)</span><br><span class=\"line\">mid.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">self.merge(head, tail)</span><br></pre></td></tr></table></figure>\n<p>`23. Merge k Sorted Lists<br>一种方法是利用merge two list然后不断divide and conquer，另外一种比较简洁的是利用PriorityQueue，然后不断put和poll()进而每一个node都是所有优先队列中最小的一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = PriorityQueue()</span><br><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> lists:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> node: <span class=\"comment\">## empty</span></span><br><span class=\"line\">        q.put((node.val, node))</span><br><span class=\"line\"><span class=\"keyword\">while</span> q.qsize():</span><br><span class=\"line\">    curr.next = q.get()[<span class=\"number\">1</span>]</span><br><span class=\"line\">    curr = curr.next</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.next:</span><br><span class=\"line\">        q.put((curr.next.val, curr.next))</span><br></pre></td></tr></table></figure>\n<p>`82. Remove Duplicates from Sorted List II<br>因为要移除所有重复的node，所以势必要prev保存上一节点，然后如果中间因为重复节点而curr！= prev.next，要把prev节点的next放到curr的next节点，因为curr为重复节点的最后一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curr.next <span class=\"keyword\">and</span> curr.val == curr.next.val: <span class=\"comment\">## [1]</span></span><br><span class=\"line\">\t\tcurr = curr.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> prev.next != curr:</span><br><span class=\"line\">\t\t\tprev.next = curr.next</span><br><span class=\"line\">\t\t\tcurr = prev.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tprev = prev.next</span><br><span class=\"line\">\t\t\tcurr = curr.next</span><br></pre></td></tr></table></figure>\n<p>`109. Convert Sorted List to Binary Search Tree<br>用helperfunction帮助，每一步找出子链表的中点，然后分别递归left和right节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> fast!= tail <span class=\"keyword\">and</span> fast.next != tail:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\">root = TreeNode(slow.val)</span><br><span class=\"line\">root.left = self.helper(head, slow)</span><br><span class=\"line\">root.right = self.helper(slow.next, tail)</span><br></pre></td></tr></table></figure>\n<p>·148. Sort List<br>分治法，然后分别对子链表merge</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prev,fast, slow =  <span class=\"keyword\">None</span>, head, head</span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    prev = slow</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    </span><br><span class=\"line\">prev.next = <span class=\"keyword\">None</span> <span class=\"comment\">## cut the middle</span></span><br><span class=\"line\">    </span><br><span class=\"line\">l1 = self.sortList(head)</span><br><span class=\"line\">l2 = self.sortList(slow)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">return</span> self.merge(l1, l2)</span><br></pre></td></tr></table></figure>\n<p>·24. Swap Nodes in Pairs<br>这道题勤画图，一步步来就好，iterative的方法比较烦，不过是<code>Reverse Nodes in k-Group</code>的简化版，那道题是LinkedList集大成者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> curr.next <span class=\"keyword\">and</span> curr.next.next:</span><br><span class=\"line\">    first = curr.next   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    second = curr.next.next <span class=\"comment\">#2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    first.next = second.next <span class=\"comment\"># 1-3</span></span><br><span class=\"line\">    curr.next = second  <span class=\"comment\">#-2</span></span><br><span class=\"line\">    curr.next.next = first  <span class=\"comment\">#2-1</span></span><br><span class=\"line\">    curr = curr.next.next <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n<p>`25. Reverse Nodes in k-Group<br>这道题是一道典型的综合题，适合复习备考多刷。它的子function是reverseList的改良，因为需要保存头节点和尾节点，所以需要设置lastNode和nextNode，然后与之相对应的就是lastNode不断和后面的节点进行调换。可以看看对比</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</span><br><span class=\"line\"> * |           |   </span><br><span class=\"line\"> * pre        next</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * after calling pre = reverse(pre, next)</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 0-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;6</span><br><span class=\"line\"> *          |  |</span><br><span class=\"line\"> *          pre next </span><br><span class=\"line\"> */</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseNode</span><span class=\"params\">(self, pre, nextNode)</span>:</span></span><br><span class=\"line\">    lastNode = pre.next</span><br><span class=\"line\">    curr = lastNode.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> curr != nextNode:</span><br><span class=\"line\">        lastNode.next = curr.next</span><br><span class=\"line\">        curr.next = pre.next</span><br><span class=\"line\">        pre.next = curr</span><br><span class=\"line\">        curr = lastNode.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lastNode</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseList</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> head.next:</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">\tprev = <span class=\"keyword\">None</span></span><br><span class=\"line\">\tcurr = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">\t    nextNode = curr.next</span><br><span class=\"line\">\t    curr.next = prev</span><br><span class=\"line\">\t    prev = curr</span><br><span class=\"line\">\t    curr = nextNode</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"LinkedList系列总结\"><a href=\"#LinkedList系列总结\" class=\"headerlink\" title=\"LinkedList系列总结\"></a>LinkedList系列总结</h1><p>24/27<br>[x] Easy<br>[x] Medium<br>[x] Hard<br>这种题，多画图，一步步来，确定哪个node指向哪个node就会好一点,之后把图放上来，会更容易复习！</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"dummyNode\"><a href=\"#dummyNode\" class=\"headerlink\" title=\"dummyNode\"></a>dummyNode</h3><p>适用于头节点需要进行操作，增删改，亦或者保存头节点，不被后续操作改变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dummy = ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">dummy.next = head</span><br><span class=\"line\">curr = head</span><br></pre></td></tr></table></figure>\n<h3 id=\"reverseList\"><a href=\"#reverseList\" class=\"headerlink\" title=\"reverseList\"></a>reverseList</h3><p>Iterative版本，简要来说就是记录下一节点，当前节点指向上一节点，同步移动上一节点和当前节点。最后的curr为空，prev为头也就是最初链表的最后一个元素</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prev = <span class=\"keyword\">None</span></span><br><span class=\"line\">curr = head</span><br><span class=\"line\"><span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">    nextNode = curr.next</span><br><span class=\"line\">    curr.next = prev</span><br><span class=\"line\">    prev = curr</span><br><span class=\"line\">    curr = nextNode</span><br><span class=\"line\"><span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>\n<p>Recursive版本的，一直到底，然后倒叙指针</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">second = head.next</span><br><span class=\"line\">head.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">rest = self.reverseList(second)</span><br><span class=\"line\">second.next = head</span><br><span class=\"line\"><span class=\"keyword\">return</span> rest</span><br></pre></td></tr></table></figure>\n<p>变种1 92. Reverse Linked List II<br>除了移动节点之外，关键是链接头和尾</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pre.next.next = curr //pre.next 为最初的头，.next则链接后来的尾和最初的尾 <span class=\"number\">1</span><span class=\"number\">-2</span><span class=\"number\">-3</span><span class=\"number\">-4</span><span class=\"number\">-5</span>，<span class=\"number\">1</span><span class=\"number\">-4</span><span class=\"number\">-3</span><span class=\"number\">-2</span><span class=\"number\">-5</span>，<span class=\"number\">2</span><span class=\"number\">-5</span></span><br><span class=\"line\">pre.next = newHead // <span class=\"number\">1</span><span class=\"number\">-4</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><p>用于检测环和找中点,见于  </p>\n<ol>\n<li>Linked List Cycle  </li>\n<li>Linked List Cycle II<br>·234. Palindrome Linked List</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast, slow = head, head</span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br></pre></td></tr></table></figure>\n<h2 id=\"Medium版本\"><a href=\"#Medium版本\" class=\"headerlink\" title=\"Medium版本\"></a>Medium版本</h2><p>·369. Plus One Linked List<br>·445. Add Two Numbers II<br>本质上用stack保存节点信息，然后不断在前方添加节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.val = add_value % <span class=\"number\">10</span></span><br><span class=\"line\">carry = ListNode(add_value / <span class=\"number\">10</span>)</span><br><span class=\"line\">carry.next = node</span><br><span class=\"line\">node = carry</span><br><span class=\"line\">add_value /= <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>Merge，Move系列<br>·21. Merge Two Sorted Lists<br>·328. Odd Even Linked List<br>·86. Partition List  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curr = dummy</span><br><span class=\"line\"><span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l1.val &lt; l2.val:</span><br><span class=\"line\">        curr.next = l1</span><br><span class=\"line\">        l1 = l1.next</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        curr.next = l2</span><br><span class=\"line\">        l2 = l2.next</span><br><span class=\"line\">    curr = curr.next</span><br></pre></td></tr></table></figure>\n<p>保证两个list都存在，然后剩余的append在后面；然后移动节点的过程中要数好步伐<code>while even and even.next:</code><br>·160. Intersection of Two Linked Lists<br>·19. Remove Nth Node From End of List</p>\n<p>`61. Rotate List<br>trick的地方是找到最后一个node，并且链接第一个，使用常用模版，不过稍加改动，因为要找到最后一个node而不是长度，所以要提前终止循环 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> curr.next:</span><br><span class=\"line\">    curr = curr.next</span><br><span class=\"line\">    length += <span class=\"number\">1</span></span><br><span class=\"line\">curr.next = head</span><br><span class=\"line\">move = length<span class=\"number\">-1</span>-k%length</span><br></pre></td></tr></table></figure>\n<p>综合<br>`143. Reorder List<br>结合 以上多种方法，快慢指针找中点，反转，merge</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mid = self.findMiddle(head)</span><br><span class=\"line\">tail = self.reverse(mid.next)</span><br><span class=\"line\">mid.next = <span class=\"keyword\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">self.merge(head, tail)</span><br></pre></td></tr></table></figure>\n<p>`23. Merge k Sorted Lists<br>一种方法是利用merge two list然后不断divide and conquer，另外一种比较简洁的是利用PriorityQueue，然后不断put和poll()进而每一个node都是所有优先队列中最小的一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = PriorityQueue()</span><br><span class=\"line\"><span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> lists:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> node: <span class=\"comment\">## empty</span></span><br><span class=\"line\">        q.put((node.val, node))</span><br><span class=\"line\"><span class=\"keyword\">while</span> q.qsize():</span><br><span class=\"line\">    curr.next = q.get()[<span class=\"number\">1</span>]</span><br><span class=\"line\">    curr = curr.next</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.next:</span><br><span class=\"line\">        q.put((curr.next.val, curr.next))</span><br></pre></td></tr></table></figure>\n<p>`82. Remove Duplicates from Sorted List II<br>因为要移除所有重复的node，所以势必要prev保存上一节点，然后如果中间因为重复节点而curr！= prev.next，要把prev节点的next放到curr的next节点，因为curr为重复节点的最后一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curr.next <span class=\"keyword\">and</span> curr.val == curr.next.val: <span class=\"comment\">## [1]</span></span><br><span class=\"line\">\t\tcurr = curr.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> prev.next != curr:</span><br><span class=\"line\">\t\t\tprev.next = curr.next</span><br><span class=\"line\">\t\t\tcurr = prev.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tprev = prev.next</span><br><span class=\"line\">\t\t\tcurr = curr.next</span><br></pre></td></tr></table></figure>\n<p>`109. Convert Sorted List to Binary Search Tree<br>用helperfunction帮助，每一步找出子链表的中点，然后分别递归left和right节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> fast!= tail <span class=\"keyword\">and</span> fast.next != tail:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\">root = TreeNode(slow.val)</span><br><span class=\"line\">root.left = self.helper(head, slow)</span><br><span class=\"line\">root.right = self.helper(slow.next, tail)</span><br></pre></td></tr></table></figure>\n<p>·148. Sort List<br>分治法，然后分别对子链表merge</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prev,fast, slow =  <span class=\"keyword\">None</span>, head, head</span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    prev = slow</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    </span><br><span class=\"line\">prev.next = <span class=\"keyword\">None</span> <span class=\"comment\">## cut the middle</span></span><br><span class=\"line\">    </span><br><span class=\"line\">l1 = self.sortList(head)</span><br><span class=\"line\">l2 = self.sortList(slow)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">return</span> self.merge(l1, l2)</span><br></pre></td></tr></table></figure>\n<p>·24. Swap Nodes in Pairs<br>这道题勤画图，一步步来就好，iterative的方法比较烦，不过是<code>Reverse Nodes in k-Group</code>的简化版，那道题是LinkedList集大成者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> curr.next <span class=\"keyword\">and</span> curr.next.next:</span><br><span class=\"line\">    first = curr.next   <span class=\"comment\"># 1</span></span><br><span class=\"line\">    second = curr.next.next <span class=\"comment\">#2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    first.next = second.next <span class=\"comment\"># 1-3</span></span><br><span class=\"line\">    curr.next = second  <span class=\"comment\">#-2</span></span><br><span class=\"line\">    curr.next.next = first  <span class=\"comment\">#2-1</span></span><br><span class=\"line\">    curr = curr.next.next <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n<p>`25. Reverse Nodes in k-Group<br>这道题是一道典型的综合题，适合复习备考多刷。它的子function是reverseList的改良，因为需要保存头节点和尾节点，所以需要设置lastNode和nextNode，然后与之相对应的就是lastNode不断和后面的节点进行调换。可以看看对比</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</span><br><span class=\"line\"> * |           |   </span><br><span class=\"line\"> * pre        next</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * after calling pre = reverse(pre, next)</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * 0-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;6</span><br><span class=\"line\"> *          |  |</span><br><span class=\"line\"> *          pre next </span><br><span class=\"line\"> */</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseNode</span><span class=\"params\">(self, pre, nextNode)</span>:</span></span><br><span class=\"line\">    lastNode = pre.next</span><br><span class=\"line\">    curr = lastNode.next</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> curr != nextNode:</span><br><span class=\"line\">        lastNode.next = curr.next</span><br><span class=\"line\">        curr.next = pre.next</span><br><span class=\"line\">        pre.next = curr</span><br><span class=\"line\">        curr = lastNode.next</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lastNode</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseList</span><span class=\"params\">(self, head)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> head.next:</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">\tprev = <span class=\"keyword\">None</span></span><br><span class=\"line\">\tcurr = head</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">\t    nextNode = curr.next</span><br><span class=\"line\">\t    curr.next = prev</span><br><span class=\"line\">\t    prev = curr</span><br><span class=\"line\">\t    curr = nextNode</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>"},{"title":"Longest Substring系列","comments":1,"date":"2017-07-07T22:40:57.000Z","updated":"2018-04-23T22:40:57.000Z","_content":"## 先从最基础的开始\n### 3. Longest Substring Without Repeating Characters  \n这道题就是使用一个dict来维护字符出现的位置，一旦发现新字符出现在字典里并且start的位置<= 记录位置（就是连续同样字符保留最后一个） start更新为上个出现该字符的index+1，类似滑动窗口，一旦发现重复元素就去把上一次的元素位置+1\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        res = 0\n        start = 0\n        for i in range(len(s)):\n            if s[i] in dic and start <= dic[s[i]]:\n                start = dic[s[i]] + 1\n            else:\n                res = max(res, i - start + 1)\n            dic[s[i]] = i\n        return res\n        \n```\n\n### 159. Longest Substring with At Most Two Distinct Characters.  \n### 340. Longest Substring with At Most K Distinct Characters.  \n类似的思路，用字典来保存出现次数，用字典的长度维护K值\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        char_dict = {}\n        start = 0\n        res = 0\n        \n        for i in range(len(s)):\n            if s[i] not in char_dict:\n                char_dict[s[i]] = 1\n            else:\n                char_dict[s[i]] += 1\n\n            while len(char_dict)>2:\n                temp = s[start]\n                if char_dict[temp] > 1:\n                    char_dict[temp] -= 1\n                else:\n                    del(char_dict[temp])\n                start += 1\n            res = max(res, i -start + 1)\n        return res\n```\n<!--more-->\n## 另外的形式\n### 395. Longest Substring with At Least K Repeating Characters  \nAt least就表明至少有那么多，用字典就不太好使了，因为要不断考虑到之前的情况，倒不如退而求其次，divide and conquer 找到最不可能的字符，然后知道里面的字符至少出现过k次\n\n```python\nif len(s) < k:\n    return 0\nc = min(set(s), key=s.count) ## 按照count排序\nif s.count(c) >= k:\n    return len(s) ## 都满足\nreturn max(self.longestSubstring(t, k) for t in s.split(c))\n```\n\n### 424. Longest Repeating Character Replacement\n比较类似 340那道题，同样用字典记录字符出现次数，然后用子序列中出现频率最大的次数加上能被修改的次数K 和窗口长度相比（也就是说窗口中都能统一）\n\n```python\nchar_dict[value] += 1\nres = max(res, char_dict[value])\nif res + k <= index - start :\n    char_dict[s[start]] -= 1\n    start += 1\n```","source":"_posts/Longest-Substring系列.md","raw":"---\ntitle: Longest Substring系列\ncomments: true\ndate: 2017-07-07 15:40:57\nupdated: 2018-04-23 15:40:57\ncategories: Leetcode\t\ntags: [String, SlidingWindow]\n---\n## 先从最基础的开始\n### 3. Longest Substring Without Repeating Characters  \n这道题就是使用一个dict来维护字符出现的位置，一旦发现新字符出现在字典里并且start的位置<= 记录位置（就是连续同样字符保留最后一个） start更新为上个出现该字符的index+1，类似滑动窗口，一旦发现重复元素就去把上一次的元素位置+1\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        res = 0\n        start = 0\n        for i in range(len(s)):\n            if s[i] in dic and start <= dic[s[i]]:\n                start = dic[s[i]] + 1\n            else:\n                res = max(res, i - start + 1)\n            dic[s[i]] = i\n        return res\n        \n```\n\n### 159. Longest Substring with At Most Two Distinct Characters.  \n### 340. Longest Substring with At Most K Distinct Characters.  \n类似的思路，用字典来保存出现次数，用字典的长度维护K值\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstringTwoDistinct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        char_dict = {}\n        start = 0\n        res = 0\n        \n        for i in range(len(s)):\n            if s[i] not in char_dict:\n                char_dict[s[i]] = 1\n            else:\n                char_dict[s[i]] += 1\n\n            while len(char_dict)>2:\n                temp = s[start]\n                if char_dict[temp] > 1:\n                    char_dict[temp] -= 1\n                else:\n                    del(char_dict[temp])\n                start += 1\n            res = max(res, i -start + 1)\n        return res\n```\n<!--more-->\n## 另外的形式\n### 395. Longest Substring with At Least K Repeating Characters  \nAt least就表明至少有那么多，用字典就不太好使了，因为要不断考虑到之前的情况，倒不如退而求其次，divide and conquer 找到最不可能的字符，然后知道里面的字符至少出现过k次\n\n```python\nif len(s) < k:\n    return 0\nc = min(set(s), key=s.count) ## 按照count排序\nif s.count(c) >= k:\n    return len(s) ## 都满足\nreturn max(self.longestSubstring(t, k) for t in s.split(c))\n```\n\n### 424. Longest Repeating Character Replacement\n比较类似 340那道题，同样用字典记录字符出现次数，然后用子序列中出现频率最大的次数加上能被修改的次数K 和窗口长度相比（也就是说窗口中都能统一）\n\n```python\nchar_dict[value] += 1\nres = max(res, char_dict[value])\nif res + k <= index - start :\n    char_dict[s[start]] -= 1\n    start += 1\n```","slug":"Longest-Substring系列","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf30014m2ca0agn8eec","content":"<h2 id=\"先从最基础的开始\"><a href=\"#先从最基础的开始\" class=\"headerlink\" title=\"先从最基础的开始\"></a>先从最基础的开始</h2><h3 id=\"3-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. Longest Substring Without Repeating Characters\"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是使用一个dict来维护字符出现的位置，一旦发现新字符出现在字典里并且start的位置&lt;= 记录位置（就是连续同样字符保留最后一个） start更新为上个出现该字符的index+1，类似滑动窗口，一旦发现重复元素就去把上一次的元素位置+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dic = &#123;&#125;</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        start = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> dic <span class=\"keyword\">and</span> start &lt;= dic[s[i]]:</span><br><span class=\"line\">                start = dic[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res = max(res, i - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">            dic[s[i]] = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"159-Longest-Substring-with-At-Most-Two-Distinct-Characters\"><a href=\"#159-Longest-Substring-with-At-Most-Two-Distinct-Characters\" class=\"headerlink\" title=\"159. Longest Substring with At Most Two Distinct Characters.\"></a>159. Longest Substring with At Most Two Distinct Characters.</h3><h3 id=\"340-Longest-Substring-with-At-Most-K-Distinct-Characters\"><a href=\"#340-Longest-Substring-with-At-Most-K-Distinct-Characters\" class=\"headerlink\" title=\"340. Longest Substring with At Most K Distinct Characters.\"></a>340. Longest Substring with At Most K Distinct Characters.</h3><p>类似的思路，用字典来保存出现次数，用字典的长度维护K值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstringTwoDistinct</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        char_dict = &#123;&#125;</span><br><span class=\"line\">        start = <span class=\"number\">0</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> char_dict:</span><br><span class=\"line\">                char_dict[s[i]] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                char_dict[s[i]] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> len(char_dict)&gt;<span class=\"number\">2</span>:</span><br><span class=\"line\">                temp = s[start]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> char_dict[temp] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                    char_dict[temp] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(char_dict[temp])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            res = max(res, i -start + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"另外的形式\"><a href=\"#另外的形式\" class=\"headerlink\" title=\"另外的形式\"></a>另外的形式</h2><h3 id=\"395-Longest-Substring-with-At-Least-K-Repeating-Characters\"><a href=\"#395-Longest-Substring-with-At-Least-K-Repeating-Characters\" class=\"headerlink\" title=\"395. Longest Substring with At Least K Repeating Characters\"></a>395. Longest Substring with At Least K Repeating Characters</h3><p>At least就表明至少有那么多，用字典就不太好使了，因为要不断考虑到之前的情况，倒不如退而求其次，divide and conquer 找到最不可能的字符，然后知道里面的字符至少出现过k次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> len(s) &lt; k:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">c = min(set(s), key=s.count) <span class=\"comment\">## 按照count排序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> s.count(c) &gt;= k:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(s) <span class=\"comment\">## 都满足</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> max(self.longestSubstring(t, k) <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> s.split(c))</span><br></pre></td></tr></table></figure>\n<h3 id=\"424-Longest-Repeating-Character-Replacement\"><a href=\"#424-Longest-Repeating-Character-Replacement\" class=\"headerlink\" title=\"424. Longest Repeating Character Replacement\"></a>424. Longest Repeating Character Replacement</h3><p>比较类似 340那道题，同样用字典记录字符出现次数，然后用子序列中出现频率最大的次数加上能被修改的次数K 和窗口长度相比（也就是说窗口中都能统一）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char_dict[value] += <span class=\"number\">1</span></span><br><span class=\"line\">res = max(res, char_dict[value])</span><br><span class=\"line\"><span class=\"keyword\">if</span> res + k &lt;= index - start :</span><br><span class=\"line\">    char_dict[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">    start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"先从最基础的开始\"><a href=\"#先从最基础的开始\" class=\"headerlink\" title=\"先从最基础的开始\"></a>先从最基础的开始</h2><h3 id=\"3-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. Longest Substring Without Repeating Characters\"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是使用一个dict来维护字符出现的位置，一旦发现新字符出现在字典里并且start的位置&lt;= 记录位置（就是连续同样字符保留最后一个） start更新为上个出现该字符的index+1，类似滑动窗口，一旦发现重复元素就去把上一次的元素位置+1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dic = &#123;&#125;</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        start = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> dic <span class=\"keyword\">and</span> start &lt;= dic[s[i]]:</span><br><span class=\"line\">                start = dic[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res = max(res, i - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">            dic[s[i]] = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"159-Longest-Substring-with-At-Most-Two-Distinct-Characters\"><a href=\"#159-Longest-Substring-with-At-Most-Two-Distinct-Characters\" class=\"headerlink\" title=\"159. Longest Substring with At Most Two Distinct Characters.\"></a>159. Longest Substring with At Most Two Distinct Characters.</h3><h3 id=\"340-Longest-Substring-with-At-Most-K-Distinct-Characters\"><a href=\"#340-Longest-Substring-with-At-Most-K-Distinct-Characters\" class=\"headerlink\" title=\"340. Longest Substring with At Most K Distinct Characters.\"></a>340. Longest Substring with At Most K Distinct Characters.</h3><p>类似的思路，用字典来保存出现次数，用字典的长度维护K值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstringTwoDistinct</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        char_dict = &#123;&#125;</span><br><span class=\"line\">        start = <span class=\"number\">0</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> char_dict:</span><br><span class=\"line\">                char_dict[s[i]] = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                char_dict[s[i]] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> len(char_dict)&gt;<span class=\"number\">2</span>:</span><br><span class=\"line\">                temp = s[start]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> char_dict[temp] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                    char_dict[temp] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(char_dict[temp])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            res = max(res, i -start + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"另外的形式\"><a href=\"#另外的形式\" class=\"headerlink\" title=\"另外的形式\"></a>另外的形式</h2><h3 id=\"395-Longest-Substring-with-At-Least-K-Repeating-Characters\"><a href=\"#395-Longest-Substring-with-At-Least-K-Repeating-Characters\" class=\"headerlink\" title=\"395. Longest Substring with At Least K Repeating Characters\"></a>395. Longest Substring with At Least K Repeating Characters</h3><p>At least就表明至少有那么多，用字典就不太好使了，因为要不断考虑到之前的情况，倒不如退而求其次，divide and conquer 找到最不可能的字符，然后知道里面的字符至少出现过k次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> len(s) &lt; k:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">c = min(set(s), key=s.count) <span class=\"comment\">## 按照count排序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> s.count(c) &gt;= k:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(s) <span class=\"comment\">## 都满足</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> max(self.longestSubstring(t, k) <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> s.split(c))</span><br></pre></td></tr></table></figure>\n<h3 id=\"424-Longest-Repeating-Character-Replacement\"><a href=\"#424-Longest-Repeating-Character-Replacement\" class=\"headerlink\" title=\"424. Longest Repeating Character Replacement\"></a>424. Longest Repeating Character Replacement</h3><p>比较类似 340那道题，同样用字典记录字符出现次数，然后用子序列中出现频率最大的次数加上能被修改的次数K 和窗口长度相比（也就是说窗口中都能统一）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char_dict[value] += <span class=\"number\">1</span></span><br><span class=\"line\">res = max(res, char_dict[value])</span><br><span class=\"line\"><span class=\"keyword\">if</span> res + k &lt;= index - start :</span><br><span class=\"line\">    char_dict[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">    start += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>"},{"title":"NewsLetter Make a product","comments":1,"date":"2017-04-21T04:32:54.000Z","updated":"2017-04-21T04:32:55.000Z","_content":"# Lesson 1: Find a problem, not a Solution\nThe first step to building something is determining what you are going to build.  But this isn’t as simple as many may think. The idea you choose to pursue will account for a large part of the success or failure of your product.\n\n \nRight this second, I want everyone to kill any idea they came into this program with.  Why?  Because starting with an idea is a huge red flag and despite what many people say - having an idea is not the first step.\n\n \nThe first thing that everyone must complete is to think of a problem.  By starting with a problem and not a potential solution, you will be much less likely to build something that doesn’t really serve a purpose or that may solve a problem but that problem may be so minuscule that you have trouble getting people to convert.\n\n \nThinking of an idea comes later: when you know a problem that you are going to solve and when you know the reasons why that problem is a problem in the first place.\n\n\n\nYour assignment for the next four days is simple, I want you to make a list of problems that you are passionate about solving.  Use a Google Sheet with two columns, in the first list all of the problems you can think of that you are passionate about solving.  In the second column rate each problem on a scale of 1(not that passionate) to 10 (the purpose of my life is to solve this problem).\n\n\nThat’s all for now.  Feel free to share your list of problems with me, I would love to see what people are coming up with.\n<!--More-->\n# Lesson 2: Email and talk to everyone that will listen\nNow that you have a list of problems, the next step is discovering why those are problems in the first place.\n\n## Step 1.  \nChoose three problems you should focus on \nthese should be chosen by combining two factors - the first is your passion for the problem, the second is the feasibility of creating a solution for the problem.  If you don’t think you can solve any of your problems, you can always bring them down in scope.  \n\nFor example, perhaps one of your problems was climate change.  While you are all amazingly talented students, launching a solution meant to solve a world crisis in your free time over the summer isn’t really feasible.  However, it is easy to lower the scope of that issue.  Maybe there isn’t enough education about climate change amongst the youth in your neighborhood, or maybe your county has the lowest levels of recycling in your state.  \n\nThere are always ways of breaking large problems into smaller, more solvable ones.  If you’re having problems doing this, just reply to this email and I’ll help you out.\n\n## Step 2\nOnce you have decided on 3 problems to focus on, begin to email, call, and talk to as many people as you can that are stakeholders for each problem.  Just keep in mind that depending on what it is, a problem may have multiple different types of stakeholders.  It is important to talk to all of them to get an idea of the problem from the various angles.\n \nYou can send them an email similar to this one that I used...\n\nHi [name],\n\nI’m  a student at the University of Virginia hoping to spend 15 minutes on the phone with other students across the country who are experiencing a disappointment with the education they are receiving. I’m just doing some research and have nothing to sell. Would you be available for a quick call tomorrow at 3pm?\n\n\nWhen you are communicating with these stakeholders, have about 5-8 questions prepared that are all focused on validating these three things:\n1. Do they actually experience the problem (why is it a problem for them now)\n\n2. How painful is the problem to them (is it an essential problem or is it just a “it would be nice to have fixed problem”?)\n\n3. How do they solve the problem now (What’s wrong with the current solution?)\n\nHere are the 7 questions that I had prepared\n \nWhile you are talking/emailing with stakeholders be sure to record everything they say. Take good notes while you are on the phone and immediately after you hang up - rewrite your notes into an Evernote document, or an organized Google Sheet.  This process of rewriting what you just learned will help reinforce the information and make it clearer to you moving forward.\n\nGo through this process with at least 6 people for each of your three problems.  That means actually talking to 18 people.  Which means you will likely have to email around 50, as typically only a third of the people you email will be willing to fit you into their schedule. That’s a lot of emails but you know how to hustle so get to it.\n\nHere are a few pointers to help you get there.\n\n1.  Use LinkedIn’s search feature to find people that you may want to talk to.\n2.  Use Anymailfinder to find the email of almost anyone just based off their name and the company they work for.\n\n3. Send a follow-up email every 2-3 business days if they do not respond.  You’ll be surprised how effective a quick follow-up can be.\nHere's an example of a follow-up email I used.\n \nHi [name],\n\nJust wanted to jump to the top of your inbox again.  As I mentioned, I’m researching [problem] and would love it if I could jump on a quick 15-minute call with you.\n\nLet me know what times work the best for you.\n\n\nAs always, I’m interested in what you guys are learning and what problems you are experiencing. Reply directly to this email and tell me what’s up, I’d love to help wherever I can.\n# Lesson 3: 📂 Organize 📂\nTake everything you learned and just digest it.  Read over all of your notes, do some outside research online, read some articles and really try to get a good understanding of each of the problems that you have been pursuing.  It is now time to pick one.\n\n \nHere are some factors that you should consider when narrowing down your problems from three to one.\n\n \n1. How much information did you gather from stakeholders (the more the better)\n\n2. How painful is the problem? (the more painful, the more willing people will be to trying your solution)\n\n3. What other solutions already exist?  Do those solutions have their own problems?\n\n4. What do you know the most about?  It is near impossible to build something successful without being an expert in that field.  Make sure you aren’t getting in over your head here.\n\n \nTake these four things into consideration while making your decision and narrow it down to one.  Remember, you should not be spending any time thinking about a solution to build yet!\n\n \nThink of what we are doing now as building a foundation.  You must have a strong, structured foundation that is based on true principles before you can actually start building a structure.\n\n \nAfter you have one problem, your final task for this week is to talk to at least five more people.  Ask these people much deeper questions that try to get at why the problem is a problem.  Often times you will discover smaller underlying problems that are extremely important to keep in mind moving forward.  For example, if your problem is that high school students don’t know how to navigate the college admissions process, why is this a problem?  Do students not like going to their school guidance counselors for help?  Why?  Are there not enough resources available? Why is that?  Are students just lazy and don’t care enough to do research on their own? Why?\n\n# Lesson 4: Nail Down What You Learned\nBy now you have done a lot of research and interviews, and while you certainly aren’t done with that (no one is ever done), you are closer to thinking about a potential solution.\n\nTake everything you have learned and try to fit it into a problem statement using a structure like one below.  Start by making a post-it note for all of the different stakeholders involved in your problem.  Then fill out the rest of the columns for each of the stakeholders.\nThis exercise will help you truly understand everything you have learned in a simplified form and help you begin to brainstorm.\n \nTake a picture of your problem statements and send them to me.  I would love to see what you guys came up with.\n# Lesson 5: Create an MLP\nOkay so you have your problem, you have a great understanding of why it is a problem, and now it is time to start building something.  But this isn’t the time to start building something polished.  For the next 4 days, you should focus on completing an MLP.  MLP stands for Minimum Lovable Product, it is the simplest possible thing that solves the root problem that your potential users are facing.  The MLP does not have to resemble your final product at all, but it should try to solve the problem in a way similar to what you imagine your final project doing.  It also does not have to have any of the cool features that could improve usability.  The only thing that it has to do is begin to solve the problem.  In the end, it is not the MLP that is very important, it is the feedback that you will collect.\n\nHere are a few examples:\n-If you want to make unemployed people more aware of available jobs, instead of creating an online job board right off the bat, make a very good, well-organized Google Sheet that you can share with people that acts as a huge database of available jobs.\n\n \n-If you want to run a month-long soccer boot camp, try running a one day camp with local neighborhood kids for free.\n\n \n-If you want to start a magazine that increases awareness of the amazing things women in tech are building, set up a MailChimp account, write a few email articles and send them to a list of everyone you know.\n\nNo matter what you think you are going to build, there is always an ultra-simple way to do it that can be thrown together in a day or two.\n\nSo make sure that in four days you have an MLP that is ready to be sent out to people.\n# Lesson 6: Getting Feedback\nSo you have your MLP ready to go.  It is now time to send it to users and get your first rounds of feedback.  Start with the people that you have already talked to over the phone.  Send them a follow up email thanking them for their time and give them a brief summary of what you have learned from talking to them and the many other people in similar positions.  At the end of the email tell them that you took what you learned and tried to make a simple solution that you could build in a day.  Ask them to test it out.  Many people argue that you should try to get as many users as possible at this point. However, I strongly disagree.  Get at least 10 testers and you will be able to see trends in what they say about your MLP.  By having 100, 500, or even 1,000 you won’t see many deviations from the early trends of the first 10 or so.\n\nThere are two advantages of having a small (but just large enough) pool of early testers.  First, it saves a ton of valuable time that you could be putting towards building your project.  Secondly, if your MLP really sucks (which I’m sure none of yours do) then you have only disappointed 10 potential users which is very easy to forget and recover from.\n\nAfter you have given your testers enough time to test your MLP, try to jump on another quick call with them.  And again, have a series of questions ready to go.  These questions should all be focused on their usage of the product.  You should try to find out these points from all of your testers:\n \n1. Did this solution solve the problem for you?  Completely or only partially?\n\n2. How often did you use it?\n\n3. What was lacking with it? What problems still exist for you?\n\n \nDon’t forget to take great notes during these calls and then rewrite them into an organized document immediately after the call.\n \nRight now you are trying to figure out if you’re on the right path or if a different approach may work to solve the problem in a better way.  Negative feedback is valuable here! Do not ignore, and certainly don’t be discouraged by it.  Bad feedback only means you found a way not to solve a problem and will save you very valuable time down the road.\n \nAt this point, you should start keeping a list that contains the name and email of everyone that you have talked to at this point. It is important to keep this list up-to-date, ideally, the people you are talking to now will turn into the first users of your project once it is completed.\n\nI can not stress enough how important the people you are talking to now are.  Always be very gracious of their time, and always be sure to follow up with them, relay any new information you have learned, or give them updates as to where you are in the launching process.  People love stories and involving people in your launching story will make them much more likely to become early adopters.\n# Lesson 7: Put Your Head Down and Build\nSo you have some feedback about your MLP and you’ve spent some time digesting everything you learned by talking to your first round of testers.  I will repeat two important points again.\n \n1. Your MLP does not have to resemble your final project, it only has to try to tackle the problem in a similar fashion.\n \n2. You want to learn about underlying problems and behaviors by testing your MLP and start to think about how you will address these before you start building your beta product.  For example, maybe you want to connect people with similar interests.  You may learn that the first message is the hardest part and that in most cases testers didn’t message their connections because they didn’t know what to say at first.  You may take this information and hypothesize that by providing prompts for the first message, people will talk to more of their connections.\n\n \nYour next step is to start building your beta product.  How should your beta product differ from your MLP?  The beta is like a rough draft, it should closely resemble in form and structure what you are trying to make.  So if you are making an app, your beta should be an app.  If you are publishing a magazine, the beta should be some form of publication.  If you are launching a food delivery company, deliver some actual food.\n \nOne very important thing that I want to point out here.  Choose something that you can build. This means that if you are not a developer DO NOT say that you’re going to build an app.  If you don’t have much design experience, don’t say that you want to launch a series of videos teaching design.  This isn’t to say that you can’t learn new things but to launch by the end of the summer, stick to what you know.\n\n\nYour beta does not have to be polished.  It does not have to have every core feature that you think would be useful.  The purpose of the beta is just to get something in testers’ hands that is similar to what you plan to build and ask them about it.  You may learn that a feature you built wasn’t very useful, or the testers may give you awesome ideas that could add a lot of value.  But let’s not worry about that yet.\n \nBuilding a beta product is a lot of work but you guys are all smart and you know how to hustle.  The work you put in here will help you out later.  The beta product, with a few small changes, will become the final product.  \n\n\nI will say that the best way to start building is to create a product backlog, essentially a to-do list of all the things that need to be completed in order to get your beta completed.  Trello is hands-down the best platform to use for creating a backlog and then keeping it updated.  It’s also free.\n \nBuilding a beta product may seem like a huge task but just break it down into little pieces.  Then eventually all of those pieces will add up to something really cool.  If you ever feel overwhelmed, just ask yourself: What can I do today?  This question often helps people break big tasks into smaller ones.\n\n \nDepending on your project, this will take longer for some people but just put your head down and build.  I have scheduled about 2.5 weeks just to building the beta so make sure you plan accordingly.\n\n# Lesson 8: Tools To Help You Out\nThe only thing I have for today is a few tools that I would like to share with you all.  These tools have helped me in the past when I have been building different beta products so I hope they can do the same for you.\n\n1. Unsplash - Free (do whatever you want) high-resolution photos.  This is extremely helpful for those of you building tech or printed products and need good looking images.\n\n2. Forest - A fun productivity app that encourages you to focus for 30-minute time intervals.  If you don’t, a virtual tree in your forest dies.\n\n3. SlimFAQ - Build a FAQ page quickly and easily for your website or application.\n\n4. Invoicely - free, unlimited online invoices   \n\n5. NewsletterStash - Hand curated directory of the best email newsletters.  This is a great resource if your project includes a mailing list.  It has great examples that you can study and you can mimic what the professionals are doing.\n\n6. Startup Stash - A list of more than 400 resources for you to use while building your startup\n\n7. Arka - The easiest way to order custom packaging.  Does your project involve delivery of any kind?  You’ll want to visit this site.\n\n8. Logo Maker - Create professional logos in minutes, on your phone.\n\n9. Splash - Splash empowers you to create memorable event experiences through beautiful design, powerful planning tools & meaningful media integration.  This tool is perfect if you are planning to build a class, a summer camp, a concert, or anything along those lines.  It creates a beautiful customizable website that allows you to collect payments.\n\n10. Squarespace - Another great website builder option.  This is the best if you are interested in creating an e-commerce store or a blog.\n# Lesson 9: Fixes To Common Problems While Building\nToday’s email is pretty light just because I know you all are working hard.\n\n \nIf you haven’t done so, email me, I’d love to hear about what you are building but more importantly what problems you are having.  If I can’t help you myself, I’ll connect you with someone who can.\n\n# Lesson 10: Start Thinking About Your Launch\nIt is important to keep your launch in the back of your mind while you are building.\n \nAt this point, I want you all to start taking steps so that your launch will be easy when it comes around.  So what should you be doing?\n\nCreate social media accounts.  Facebook, Instagram, Twitter, Pinterest, wherever you think your audience spends time.\n\nGet on Medium and write a quick post about what you are trying to build and why.  Remember, people don’t buy products, they buy the story behind them.\n\nIf you haven’t done so yet, set up a simple landing page.  There are countless tools out there for you to use even if you have never written a single line of code.  Squarespace, Splash, AppLandr, OntraPages, and Strinkingly are all tools you can use to get up and running online with no experience.  Each have their strengths and weaknesses, do your research and see what fits your needs the best.\n\nFinally, set yourself up with a Mailchimp account.  Set up a list within Mailchimp and start collecting email addresses of people who are interested in what you are building.\n \nNow that you have a landing page you can put language on it, something similar to: “Beta version coming soon.  Sign up to be a tester.”\n\nYou can then include a form that once filled out will add an interested person’s email address straight to your list in Mailchimp.  How to do this differs a little bit depending on the platform you are using for the landing page.  But there are millions of tutorials online that will show you what to do.  Just Google it.\n# Lesson 11: Build to Optimize Growth\nYou should be close to completing your beta product.  But before you are done, it is important to start thinking about how your project will grow and attract more people.  It is much easier to build those functions in now than to wait until everything is completed.\n\n \nThink about features or different products/services that you can reserve for people that share a blog post, like your Facebook page, get 5 friends to sign-up to your newsletter, or something along those lines.  You need ways to get your product out there and offering people incentives to help you out is the best way.\n\n \nThere are a number of ways that you can do this.\n\n \nViral Sign Ups is a good option but that’s just one of many.\n\n \nYou can also do something much less official.  Make a few images for Facebook that contain copy such as “Share this post for a chance to win a t-shirt”.  There are a million different things you can do.  Keep your audience in mind and if you think of something good be sure to share it on Slack.  I’m sure everyone would love to hear what others are coming up with.\n\nJust remember that if something worked for one person it doesn’t mean that it will work for everyone.\n\nDo some brainstorming here and continue to build your beta.  You should be finishing the last few things.  Plan to launch in a week!\n# Lesson 12: Build Your Channels\nIt’s almost here.  After the next email, you should plan to launch your beta product but before doing so, it is important that you start to grow your social following so that you have some sort of stage and audience to announce the release of your beta product to.\n \nThis is the time to invite all of your friends and family to like your Facebook page.  Ask anyone you know if they would be interested in being added to the mailing list.  Post on your personal Facebook, Twitter, and Instagram accounts about the upcoming launch.\n\nHand out a few stickers if you have them.  Make flyers.  Make posters.  Hang posters on stop signs, bathroom walls, ceilings, windows.  Don’t ask for permission, just go out and do things.\n\nSmall side note: I’ve found that hanging flyers right above urinals in the Men’s restroom is the absolute best place to hang flyers.\n \nOn Twitter, find an influencer that has a bunch of followers that would probably be interested in what you are building.  Start following their followers.  (Make sure you’ve tweeted a few times before doing this and make sure any important links are in your bio).  Unfollow ones that don’t follow back in 2-3 days.  Look around for twitter tools, there are many that will help you do this.  Some more effective than others.\n\n\nOnce you start to see your audience growing don’t be afraid to tell them that you’re about to launch a beta version.  Have them signup if they would be interested in testing it.  For this test, unlike the MLP testing, the more testers the better (within reason, just make sure you can handle the volume of testers that join).\n \nContinue to build up hype through your channels and try to get as many followers and subscribers as possible.\n\n \nIt’s almost time to launch.  In the next email I’ll leave you all a few tips on having a successful launch.\n\n# Lesson 13: The Beta Launch\nThe time has come.  You have worked very hard to get your beta product working and you are finally ready to have people test it out.  But let’s go over a few things before you go off and start onboarding people.\n\n\nFirst, let’s go over the purpose of the beta test.  The main reason you are launching is to test out your project, see if there are any bugs, problems, weak points, or things that could be improved.  You should try to get as much feedback from the beta users as possible.  If you’re making an app or something electronic that allows you to track usage - do it! This will give you a ton of valuable insights.  If you’re working on something that isn’t online, there are still ways to track valuable analytics that can be very helpful.  Surveys and phone calls will be your friends.\n \nWho you choose to be your beta testers is also something worth mentioning.  You should get beta testers that you know will give you honest feedback and also people who have a great need for your product.  This way you can be sure that they will spend a substantial amount of time with your product.  \n\n \nYour parents probably aren’t the best people to choose for this.  But if you’ve been following my tips, at this point you should have a mailing list of at least 100 people that you have met and talked to along your process of building.  Pull from this list for your testers! You can either individually reach out to a hand-selected group of people or send a newsletter to everyone.  Updating them of your progress and including a form (Google Form or Typeform) for those that would be interested in participating in a beta test.\n\n \nThe length of your beta test will depend on how often people are interacting with your project but aim for around a week.\n\nBefore you get everyone using your product, make sure that you run a pre-use survey!  This is extremely important and will help you immensely later down the road.  In this survey you want to figure out some sort of baseline before people started using your product.\n\nFor example, if you’re teaching a bootcamp teaching HTML/CSS to non-developers you could ask the following questions:\n\n1. On a scale of 1-10, how would you rate your current understanding of HTML/CSS?\n2. How many times a week do you currently write HTML/CSS code?\n\n3. How many times a week do you plan on writing HTML/CSS code after this bootcamp?\n\n4. How many hours do you plan on practicing outside of the bootcamp over the next week?\n\n \nTry to make these answers as quantitative as possible.  This will allow you to easily see the effects of your product after we run a post-test survey.\n\n \nThat’s all for now.  Good luck with getting your beta testers up and running.  And remember, be very respectful of their time and always be very gracious.  There’s a good chance that if you treat them well, beta testers will turn into your first customers once you release your finished product.\n\n# Lesson 14: The Followup\nHow is your beta test going?  Not seeing the results you were expecting?  People not using your product as much as you would like?  That’s FINE!  There is no such thing as a failed beta test.  It’s a learning experience.  If you’re frustrated with the results then just realize that you found a way to solve a problem that for whatever reason doesn’t work.  By running the beta test you just saved a whole bunch of time before wasting it on trying to perfect a product that doesn’t work.  You can take the feedback you gathered and see why your solution did not work.  Then you can make a few changes and try again.\n\n \nIf your test is going better than expected, great.  Listen to the users and discuss what could be improved, what added features may increase the value proposition.  You don’t have to listen to every single one of these but they may give you some good ideas that you hadn’t even thought of.\n\n \nAfter the week of testing, you should run a post-use survey.  In this survey you should have some of the same questions that you can compare before and after scores.  In the last example, we used a HTML/CSS bootcamp.  A post-test question should be: After the bootcamp, on a scale of 1-10, how would you rate your understanding of HTML/CSS.  You should also include some questions about continuing usage.  Ask them if they would ever be willing to pay for your product.  How much?  If not, what changes would need to be made in order for them to be willing to pay?  Make sure they realize that answering these questions in no way obligates them to paying anything.\n\n \nQuick side note here: you may want to think about offering beta users a discount for when your product becomes paid - it could encourage them to continue using while also paying a little bit.  It doesn’t have to be a huge discount.  20% for the first 3 months - it goes a long way and makes the beta testers feel valued.\n\n \nIf you see that people generally had positive feedback but they are not willing to pay, don’t worry about it.  You can start to explore different methods of revenue.  Maybe it is through sponsorship?  Displaying ads?  Other stakeholders?  If there are people that enjoy what you have built then there is always a way to make it work, it just might not be that obvious.\n\n \nFinish up your beta testing and send that follow-up email, make sure people fill out that post-use survey.  Keep track of everyone that has or hasn’t filled it out and continue to bug people (respectfully) until they complete it.  The information you gain from this is way too important to just let people off the hook.\n\n# Lesson 15: Build Your Channels, Again\nCongratulations!  You’re done with your beta test.  You gained a ton of extremely valuable insights and you have a few ideas about some small changes you can make to your product that would improve it.  Go ahead and spend some time improving it.  Any spare time you have for the next few days should be focused on continuing to build your channels so that getting the word out of your first public launch is easy.\n \nContinue to post on your social media platforms and keep growing your following.  There are millions of free resources all over the internet that will give you advice on this (some are much better than others).\n\n\nChange the language on any social accounts and your landing page to express that you are launching soon.  Encourage people to sign up to a mailing list so that they receive first access to your product as soon as it launches.\n \nSend another email to everyone on your current mailing list and send out a link to a survey.  Offer everyone a sticker that gives you the name and email of 3-5 friends that would be interested in your product.  Don’t forget to ask for the mailing address in the survey so you can mail the sticker.  This is a great, cheap, and effective guerrilla marketing tactic that has worked well for me in the past.  Take some time and write a quick thank you card for each of the stickers you send.  It doesn’t have to be much - a sentence or two will do.  This will help you to really stand out.\n \nIf you want to be even more adventurous, try holding a sweepstakes or a contest. Vyper.io lets you do this very easily.\n \nIf your product is something online that people all over the world would benefit from, think about submitting it to a few of the sites found on Promotehour.  These sites are all awesome ways to show off what you are building to early-adopting type people who may be interested in joining.\n\nIf your product is more local, such as a summer day camp for neighborhood kids, try getting into the local paper.  Email a local reporter, they’ll likely ignore your first email, but keep following up with them.  Presistentance counts here.\n# Lesson 16: Write About Your Journey\nYou have just one assignment for the next 4 days.  Write about the journey.  As I have said before, people love stories and it is important to tell yours.  Talk about the problem you sought out to solve, why it was important to you, the failures you encountered, and what you have accomplished so far.  If you have a blog as part of your project, post it there and make sure that as soon as someone subscribes to your mailing list, they receive an automated email from you directing them to read the article about your start.  If you don’t have a blog already set up, Medium is a great alternative.  On Medium, you can write a post about anything and allow the world to see it.  If you decide to go this route, make sure that you provide the link to your Medium account in as many places as possible (just like Facebook, Twitter, and Instagram accounts).  Medium is great, but without a following your story will not have much of an impact.\n\n \nAfter completing this, send it out to your current subscribers, share it from all of your personal social accounts, make as many people aware of your story as possible! This would also be a great time to announce when you are launching your product. Give a date that you know you can hit and give very clear instructions so that everyone knows exactly what they need to do in order to get access once it launches.\n\n \nNot confident about your writing abilities? I’d love to help out.  Also, feel free to share your story with me once it is completed. I’d be happy to share it from BOLD social accounts.\n\n\nOnce you have finished writing and sharing your story continue making changes to your beta product that improve it.  In four days, I will be giving you some last tips about launching your product.  You’re almost there.\n# Lesson 17: The Launch\nYour launch date is approaching and hopefully you have something to show everyone that you’re proud of.  I just want to leave you all with a few pieces of advice to make sure you have a great launch now that you spent so much time working on your product.\n\n \nRemember Promotehour, it is an extremely valuable resource and getting exposure from just one of those sources could really make a huge difference.\n\n\nThere are also some other things you could do.  Research some bloggers or publications that your target readers often read.  Offer to guest write for them as long as you can put a blurb about your launch in the article you write.  This is a great way to leverage communities that others have already built.\n \nI also encourage everyone to offer some kind of incentive for sharing your product with their friends.  There is still nothing like the word of mouth. \n\n \nThink about Uber and how they give $10 of credit to you and a friend when your friend uses your promo code when signing up.  What you do doesn’t have to be so complex to execute, but think of ways you can mimic that in a low-tech way.\n\n \nIf you are using Wordpress at all there are a number of plugins that allow you to lock certain parts of your website or certain pieces of content until a user shares a post to Facebook, Tweets something, or subscribes to your newsletter.  I’ve had great success with Social Locker but do your research and find out which plugin matches your needs the best.\n\n \nIf you haven’t already, purchase stickers.  Get them from StickerMule and give them out to people.  Put them in different locations and give them to friends.  I have found that giving stickers to students is extremely effective.  They will often put the sticker on their laptop and a sticker on a laptop in a college town can be incredibly valuable.\n\n# Lesson 18: Reflection\nSo you did it!  Over the course of ten weeks you identified a problem, researched why that problem existed, made a few (maybe wrong) assumptions about what would solve those problems, held a few interviews, asked a lot of questions, built a MLP, built a beta product, looked at a ton of survey response data, launched an actual product, and most importantly of all, you learned a lot.\n\n \nWhen I was creating the Launch In A Summer program, my goal was never to help students launch successful products.  Rather, I wanted to teach students how to tackle a problem in an entrepreneurial way.  Sure, I absolutely love hearing about all of your successful products, but what I would love even more is to hear that you take the processes you learned this summer and apply them elsewhere.  I truly believe that no matter the situation, be it at a startup, at a large corporate company, or even in class, the processes you learned can be applied anywhere and can result in some pretty amazing solutions.\n\n\nIf you have not yet done so, subscribe to the BOLD newsletter here to stay in touch.\n\nIf you are interested in having your resume sent to awesome hiring tech companies, submit it here, send me an email and let me know if you do.  For participating in this program I will grant everyone automatic acceptance.\n","source":"_posts/NewsLetter-Make-a-product.md","raw":"---\ntitle: NewsLetter Make a product\ncomments: true\ndate: 2017-04-20 21:32:54\nupdated: 2017-04-20 21:32:55\ncategories: Thinking\ntags: [Newsletter, Product]\n---\n# Lesson 1: Find a problem, not a Solution\nThe first step to building something is determining what you are going to build.  But this isn’t as simple as many may think. The idea you choose to pursue will account for a large part of the success or failure of your product.\n\n \nRight this second, I want everyone to kill any idea they came into this program with.  Why?  Because starting with an idea is a huge red flag and despite what many people say - having an idea is not the first step.\n\n \nThe first thing that everyone must complete is to think of a problem.  By starting with a problem and not a potential solution, you will be much less likely to build something that doesn’t really serve a purpose or that may solve a problem but that problem may be so minuscule that you have trouble getting people to convert.\n\n \nThinking of an idea comes later: when you know a problem that you are going to solve and when you know the reasons why that problem is a problem in the first place.\n\n\n\nYour assignment for the next four days is simple, I want you to make a list of problems that you are passionate about solving.  Use a Google Sheet with two columns, in the first list all of the problems you can think of that you are passionate about solving.  In the second column rate each problem on a scale of 1(not that passionate) to 10 (the purpose of my life is to solve this problem).\n\n\nThat’s all for now.  Feel free to share your list of problems with me, I would love to see what people are coming up with.\n<!--More-->\n# Lesson 2: Email and talk to everyone that will listen\nNow that you have a list of problems, the next step is discovering why those are problems in the first place.\n\n## Step 1.  \nChoose three problems you should focus on \nthese should be chosen by combining two factors - the first is your passion for the problem, the second is the feasibility of creating a solution for the problem.  If you don’t think you can solve any of your problems, you can always bring them down in scope.  \n\nFor example, perhaps one of your problems was climate change.  While you are all amazingly talented students, launching a solution meant to solve a world crisis in your free time over the summer isn’t really feasible.  However, it is easy to lower the scope of that issue.  Maybe there isn’t enough education about climate change amongst the youth in your neighborhood, or maybe your county has the lowest levels of recycling in your state.  \n\nThere are always ways of breaking large problems into smaller, more solvable ones.  If you’re having problems doing this, just reply to this email and I’ll help you out.\n\n## Step 2\nOnce you have decided on 3 problems to focus on, begin to email, call, and talk to as many people as you can that are stakeholders for each problem.  Just keep in mind that depending on what it is, a problem may have multiple different types of stakeholders.  It is important to talk to all of them to get an idea of the problem from the various angles.\n \nYou can send them an email similar to this one that I used...\n\nHi [name],\n\nI’m  a student at the University of Virginia hoping to spend 15 minutes on the phone with other students across the country who are experiencing a disappointment with the education they are receiving. I’m just doing some research and have nothing to sell. Would you be available for a quick call tomorrow at 3pm?\n\n\nWhen you are communicating with these stakeholders, have about 5-8 questions prepared that are all focused on validating these three things:\n1. Do they actually experience the problem (why is it a problem for them now)\n\n2. How painful is the problem to them (is it an essential problem or is it just a “it would be nice to have fixed problem”?)\n\n3. How do they solve the problem now (What’s wrong with the current solution?)\n\nHere are the 7 questions that I had prepared\n \nWhile you are talking/emailing with stakeholders be sure to record everything they say. Take good notes while you are on the phone and immediately after you hang up - rewrite your notes into an Evernote document, or an organized Google Sheet.  This process of rewriting what you just learned will help reinforce the information and make it clearer to you moving forward.\n\nGo through this process with at least 6 people for each of your three problems.  That means actually talking to 18 people.  Which means you will likely have to email around 50, as typically only a third of the people you email will be willing to fit you into their schedule. That’s a lot of emails but you know how to hustle so get to it.\n\nHere are a few pointers to help you get there.\n\n1.  Use LinkedIn’s search feature to find people that you may want to talk to.\n2.  Use Anymailfinder to find the email of almost anyone just based off their name and the company they work for.\n\n3. Send a follow-up email every 2-3 business days if they do not respond.  You’ll be surprised how effective a quick follow-up can be.\nHere's an example of a follow-up email I used.\n \nHi [name],\n\nJust wanted to jump to the top of your inbox again.  As I mentioned, I’m researching [problem] and would love it if I could jump on a quick 15-minute call with you.\n\nLet me know what times work the best for you.\n\n\nAs always, I’m interested in what you guys are learning and what problems you are experiencing. Reply directly to this email and tell me what’s up, I’d love to help wherever I can.\n# Lesson 3: 📂 Organize 📂\nTake everything you learned and just digest it.  Read over all of your notes, do some outside research online, read some articles and really try to get a good understanding of each of the problems that you have been pursuing.  It is now time to pick one.\n\n \nHere are some factors that you should consider when narrowing down your problems from three to one.\n\n \n1. How much information did you gather from stakeholders (the more the better)\n\n2. How painful is the problem? (the more painful, the more willing people will be to trying your solution)\n\n3. What other solutions already exist?  Do those solutions have their own problems?\n\n4. What do you know the most about?  It is near impossible to build something successful without being an expert in that field.  Make sure you aren’t getting in over your head here.\n\n \nTake these four things into consideration while making your decision and narrow it down to one.  Remember, you should not be spending any time thinking about a solution to build yet!\n\n \nThink of what we are doing now as building a foundation.  You must have a strong, structured foundation that is based on true principles before you can actually start building a structure.\n\n \nAfter you have one problem, your final task for this week is to talk to at least five more people.  Ask these people much deeper questions that try to get at why the problem is a problem.  Often times you will discover smaller underlying problems that are extremely important to keep in mind moving forward.  For example, if your problem is that high school students don’t know how to navigate the college admissions process, why is this a problem?  Do students not like going to their school guidance counselors for help?  Why?  Are there not enough resources available? Why is that?  Are students just lazy and don’t care enough to do research on their own? Why?\n\n# Lesson 4: Nail Down What You Learned\nBy now you have done a lot of research and interviews, and while you certainly aren’t done with that (no one is ever done), you are closer to thinking about a potential solution.\n\nTake everything you have learned and try to fit it into a problem statement using a structure like one below.  Start by making a post-it note for all of the different stakeholders involved in your problem.  Then fill out the rest of the columns for each of the stakeholders.\nThis exercise will help you truly understand everything you have learned in a simplified form and help you begin to brainstorm.\n \nTake a picture of your problem statements and send them to me.  I would love to see what you guys came up with.\n# Lesson 5: Create an MLP\nOkay so you have your problem, you have a great understanding of why it is a problem, and now it is time to start building something.  But this isn’t the time to start building something polished.  For the next 4 days, you should focus on completing an MLP.  MLP stands for Minimum Lovable Product, it is the simplest possible thing that solves the root problem that your potential users are facing.  The MLP does not have to resemble your final product at all, but it should try to solve the problem in a way similar to what you imagine your final project doing.  It also does not have to have any of the cool features that could improve usability.  The only thing that it has to do is begin to solve the problem.  In the end, it is not the MLP that is very important, it is the feedback that you will collect.\n\nHere are a few examples:\n-If you want to make unemployed people more aware of available jobs, instead of creating an online job board right off the bat, make a very good, well-organized Google Sheet that you can share with people that acts as a huge database of available jobs.\n\n \n-If you want to run a month-long soccer boot camp, try running a one day camp with local neighborhood kids for free.\n\n \n-If you want to start a magazine that increases awareness of the amazing things women in tech are building, set up a MailChimp account, write a few email articles and send them to a list of everyone you know.\n\nNo matter what you think you are going to build, there is always an ultra-simple way to do it that can be thrown together in a day or two.\n\nSo make sure that in four days you have an MLP that is ready to be sent out to people.\n# Lesson 6: Getting Feedback\nSo you have your MLP ready to go.  It is now time to send it to users and get your first rounds of feedback.  Start with the people that you have already talked to over the phone.  Send them a follow up email thanking them for their time and give them a brief summary of what you have learned from talking to them and the many other people in similar positions.  At the end of the email tell them that you took what you learned and tried to make a simple solution that you could build in a day.  Ask them to test it out.  Many people argue that you should try to get as many users as possible at this point. However, I strongly disagree.  Get at least 10 testers and you will be able to see trends in what they say about your MLP.  By having 100, 500, or even 1,000 you won’t see many deviations from the early trends of the first 10 or so.\n\nThere are two advantages of having a small (but just large enough) pool of early testers.  First, it saves a ton of valuable time that you could be putting towards building your project.  Secondly, if your MLP really sucks (which I’m sure none of yours do) then you have only disappointed 10 potential users which is very easy to forget and recover from.\n\nAfter you have given your testers enough time to test your MLP, try to jump on another quick call with them.  And again, have a series of questions ready to go.  These questions should all be focused on their usage of the product.  You should try to find out these points from all of your testers:\n \n1. Did this solution solve the problem for you?  Completely or only partially?\n\n2. How often did you use it?\n\n3. What was lacking with it? What problems still exist for you?\n\n \nDon’t forget to take great notes during these calls and then rewrite them into an organized document immediately after the call.\n \nRight now you are trying to figure out if you’re on the right path or if a different approach may work to solve the problem in a better way.  Negative feedback is valuable here! Do not ignore, and certainly don’t be discouraged by it.  Bad feedback only means you found a way not to solve a problem and will save you very valuable time down the road.\n \nAt this point, you should start keeping a list that contains the name and email of everyone that you have talked to at this point. It is important to keep this list up-to-date, ideally, the people you are talking to now will turn into the first users of your project once it is completed.\n\nI can not stress enough how important the people you are talking to now are.  Always be very gracious of their time, and always be sure to follow up with them, relay any new information you have learned, or give them updates as to where you are in the launching process.  People love stories and involving people in your launching story will make them much more likely to become early adopters.\n# Lesson 7: Put Your Head Down and Build\nSo you have some feedback about your MLP and you’ve spent some time digesting everything you learned by talking to your first round of testers.  I will repeat two important points again.\n \n1. Your MLP does not have to resemble your final project, it only has to try to tackle the problem in a similar fashion.\n \n2. You want to learn about underlying problems and behaviors by testing your MLP and start to think about how you will address these before you start building your beta product.  For example, maybe you want to connect people with similar interests.  You may learn that the first message is the hardest part and that in most cases testers didn’t message their connections because they didn’t know what to say at first.  You may take this information and hypothesize that by providing prompts for the first message, people will talk to more of their connections.\n\n \nYour next step is to start building your beta product.  How should your beta product differ from your MLP?  The beta is like a rough draft, it should closely resemble in form and structure what you are trying to make.  So if you are making an app, your beta should be an app.  If you are publishing a magazine, the beta should be some form of publication.  If you are launching a food delivery company, deliver some actual food.\n \nOne very important thing that I want to point out here.  Choose something that you can build. This means that if you are not a developer DO NOT say that you’re going to build an app.  If you don’t have much design experience, don’t say that you want to launch a series of videos teaching design.  This isn’t to say that you can’t learn new things but to launch by the end of the summer, stick to what you know.\n\n\nYour beta does not have to be polished.  It does not have to have every core feature that you think would be useful.  The purpose of the beta is just to get something in testers’ hands that is similar to what you plan to build and ask them about it.  You may learn that a feature you built wasn’t very useful, or the testers may give you awesome ideas that could add a lot of value.  But let’s not worry about that yet.\n \nBuilding a beta product is a lot of work but you guys are all smart and you know how to hustle.  The work you put in here will help you out later.  The beta product, with a few small changes, will become the final product.  \n\n\nI will say that the best way to start building is to create a product backlog, essentially a to-do list of all the things that need to be completed in order to get your beta completed.  Trello is hands-down the best platform to use for creating a backlog and then keeping it updated.  It’s also free.\n \nBuilding a beta product may seem like a huge task but just break it down into little pieces.  Then eventually all of those pieces will add up to something really cool.  If you ever feel overwhelmed, just ask yourself: What can I do today?  This question often helps people break big tasks into smaller ones.\n\n \nDepending on your project, this will take longer for some people but just put your head down and build.  I have scheduled about 2.5 weeks just to building the beta so make sure you plan accordingly.\n\n# Lesson 8: Tools To Help You Out\nThe only thing I have for today is a few tools that I would like to share with you all.  These tools have helped me in the past when I have been building different beta products so I hope they can do the same for you.\n\n1. Unsplash - Free (do whatever you want) high-resolution photos.  This is extremely helpful for those of you building tech or printed products and need good looking images.\n\n2. Forest - A fun productivity app that encourages you to focus for 30-minute time intervals.  If you don’t, a virtual tree in your forest dies.\n\n3. SlimFAQ - Build a FAQ page quickly and easily for your website or application.\n\n4. Invoicely - free, unlimited online invoices   \n\n5. NewsletterStash - Hand curated directory of the best email newsletters.  This is a great resource if your project includes a mailing list.  It has great examples that you can study and you can mimic what the professionals are doing.\n\n6. Startup Stash - A list of more than 400 resources for you to use while building your startup\n\n7. Arka - The easiest way to order custom packaging.  Does your project involve delivery of any kind?  You’ll want to visit this site.\n\n8. Logo Maker - Create professional logos in minutes, on your phone.\n\n9. Splash - Splash empowers you to create memorable event experiences through beautiful design, powerful planning tools & meaningful media integration.  This tool is perfect if you are planning to build a class, a summer camp, a concert, or anything along those lines.  It creates a beautiful customizable website that allows you to collect payments.\n\n10. Squarespace - Another great website builder option.  This is the best if you are interested in creating an e-commerce store or a blog.\n# Lesson 9: Fixes To Common Problems While Building\nToday’s email is pretty light just because I know you all are working hard.\n\n \nIf you haven’t done so, email me, I’d love to hear about what you are building but more importantly what problems you are having.  If I can’t help you myself, I’ll connect you with someone who can.\n\n# Lesson 10: Start Thinking About Your Launch\nIt is important to keep your launch in the back of your mind while you are building.\n \nAt this point, I want you all to start taking steps so that your launch will be easy when it comes around.  So what should you be doing?\n\nCreate social media accounts.  Facebook, Instagram, Twitter, Pinterest, wherever you think your audience spends time.\n\nGet on Medium and write a quick post about what you are trying to build and why.  Remember, people don’t buy products, they buy the story behind them.\n\nIf you haven’t done so yet, set up a simple landing page.  There are countless tools out there for you to use even if you have never written a single line of code.  Squarespace, Splash, AppLandr, OntraPages, and Strinkingly are all tools you can use to get up and running online with no experience.  Each have their strengths and weaknesses, do your research and see what fits your needs the best.\n\nFinally, set yourself up with a Mailchimp account.  Set up a list within Mailchimp and start collecting email addresses of people who are interested in what you are building.\n \nNow that you have a landing page you can put language on it, something similar to: “Beta version coming soon.  Sign up to be a tester.”\n\nYou can then include a form that once filled out will add an interested person’s email address straight to your list in Mailchimp.  How to do this differs a little bit depending on the platform you are using for the landing page.  But there are millions of tutorials online that will show you what to do.  Just Google it.\n# Lesson 11: Build to Optimize Growth\nYou should be close to completing your beta product.  But before you are done, it is important to start thinking about how your project will grow and attract more people.  It is much easier to build those functions in now than to wait until everything is completed.\n\n \nThink about features or different products/services that you can reserve for people that share a blog post, like your Facebook page, get 5 friends to sign-up to your newsletter, or something along those lines.  You need ways to get your product out there and offering people incentives to help you out is the best way.\n\n \nThere are a number of ways that you can do this.\n\n \nViral Sign Ups is a good option but that’s just one of many.\n\n \nYou can also do something much less official.  Make a few images for Facebook that contain copy such as “Share this post for a chance to win a t-shirt”.  There are a million different things you can do.  Keep your audience in mind and if you think of something good be sure to share it on Slack.  I’m sure everyone would love to hear what others are coming up with.\n\nJust remember that if something worked for one person it doesn’t mean that it will work for everyone.\n\nDo some brainstorming here and continue to build your beta.  You should be finishing the last few things.  Plan to launch in a week!\n# Lesson 12: Build Your Channels\nIt’s almost here.  After the next email, you should plan to launch your beta product but before doing so, it is important that you start to grow your social following so that you have some sort of stage and audience to announce the release of your beta product to.\n \nThis is the time to invite all of your friends and family to like your Facebook page.  Ask anyone you know if they would be interested in being added to the mailing list.  Post on your personal Facebook, Twitter, and Instagram accounts about the upcoming launch.\n\nHand out a few stickers if you have them.  Make flyers.  Make posters.  Hang posters on stop signs, bathroom walls, ceilings, windows.  Don’t ask for permission, just go out and do things.\n\nSmall side note: I’ve found that hanging flyers right above urinals in the Men’s restroom is the absolute best place to hang flyers.\n \nOn Twitter, find an influencer that has a bunch of followers that would probably be interested in what you are building.  Start following their followers.  (Make sure you’ve tweeted a few times before doing this and make sure any important links are in your bio).  Unfollow ones that don’t follow back in 2-3 days.  Look around for twitter tools, there are many that will help you do this.  Some more effective than others.\n\n\nOnce you start to see your audience growing don’t be afraid to tell them that you’re about to launch a beta version.  Have them signup if they would be interested in testing it.  For this test, unlike the MLP testing, the more testers the better (within reason, just make sure you can handle the volume of testers that join).\n \nContinue to build up hype through your channels and try to get as many followers and subscribers as possible.\n\n \nIt’s almost time to launch.  In the next email I’ll leave you all a few tips on having a successful launch.\n\n# Lesson 13: The Beta Launch\nThe time has come.  You have worked very hard to get your beta product working and you are finally ready to have people test it out.  But let’s go over a few things before you go off and start onboarding people.\n\n\nFirst, let’s go over the purpose of the beta test.  The main reason you are launching is to test out your project, see if there are any bugs, problems, weak points, or things that could be improved.  You should try to get as much feedback from the beta users as possible.  If you’re making an app or something electronic that allows you to track usage - do it! This will give you a ton of valuable insights.  If you’re working on something that isn’t online, there are still ways to track valuable analytics that can be very helpful.  Surveys and phone calls will be your friends.\n \nWho you choose to be your beta testers is also something worth mentioning.  You should get beta testers that you know will give you honest feedback and also people who have a great need for your product.  This way you can be sure that they will spend a substantial amount of time with your product.  \n\n \nYour parents probably aren’t the best people to choose for this.  But if you’ve been following my tips, at this point you should have a mailing list of at least 100 people that you have met and talked to along your process of building.  Pull from this list for your testers! You can either individually reach out to a hand-selected group of people or send a newsletter to everyone.  Updating them of your progress and including a form (Google Form or Typeform) for those that would be interested in participating in a beta test.\n\n \nThe length of your beta test will depend on how often people are interacting with your project but aim for around a week.\n\nBefore you get everyone using your product, make sure that you run a pre-use survey!  This is extremely important and will help you immensely later down the road.  In this survey you want to figure out some sort of baseline before people started using your product.\n\nFor example, if you’re teaching a bootcamp teaching HTML/CSS to non-developers you could ask the following questions:\n\n1. On a scale of 1-10, how would you rate your current understanding of HTML/CSS?\n2. How many times a week do you currently write HTML/CSS code?\n\n3. How many times a week do you plan on writing HTML/CSS code after this bootcamp?\n\n4. How many hours do you plan on practicing outside of the bootcamp over the next week?\n\n \nTry to make these answers as quantitative as possible.  This will allow you to easily see the effects of your product after we run a post-test survey.\n\n \nThat’s all for now.  Good luck with getting your beta testers up and running.  And remember, be very respectful of their time and always be very gracious.  There’s a good chance that if you treat them well, beta testers will turn into your first customers once you release your finished product.\n\n# Lesson 14: The Followup\nHow is your beta test going?  Not seeing the results you were expecting?  People not using your product as much as you would like?  That’s FINE!  There is no such thing as a failed beta test.  It’s a learning experience.  If you’re frustrated with the results then just realize that you found a way to solve a problem that for whatever reason doesn’t work.  By running the beta test you just saved a whole bunch of time before wasting it on trying to perfect a product that doesn’t work.  You can take the feedback you gathered and see why your solution did not work.  Then you can make a few changes and try again.\n\n \nIf your test is going better than expected, great.  Listen to the users and discuss what could be improved, what added features may increase the value proposition.  You don’t have to listen to every single one of these but they may give you some good ideas that you hadn’t even thought of.\n\n \nAfter the week of testing, you should run a post-use survey.  In this survey you should have some of the same questions that you can compare before and after scores.  In the last example, we used a HTML/CSS bootcamp.  A post-test question should be: After the bootcamp, on a scale of 1-10, how would you rate your understanding of HTML/CSS.  You should also include some questions about continuing usage.  Ask them if they would ever be willing to pay for your product.  How much?  If not, what changes would need to be made in order for them to be willing to pay?  Make sure they realize that answering these questions in no way obligates them to paying anything.\n\n \nQuick side note here: you may want to think about offering beta users a discount for when your product becomes paid - it could encourage them to continue using while also paying a little bit.  It doesn’t have to be a huge discount.  20% for the first 3 months - it goes a long way and makes the beta testers feel valued.\n\n \nIf you see that people generally had positive feedback but they are not willing to pay, don’t worry about it.  You can start to explore different methods of revenue.  Maybe it is through sponsorship?  Displaying ads?  Other stakeholders?  If there are people that enjoy what you have built then there is always a way to make it work, it just might not be that obvious.\n\n \nFinish up your beta testing and send that follow-up email, make sure people fill out that post-use survey.  Keep track of everyone that has or hasn’t filled it out and continue to bug people (respectfully) until they complete it.  The information you gain from this is way too important to just let people off the hook.\n\n# Lesson 15: Build Your Channels, Again\nCongratulations!  You’re done with your beta test.  You gained a ton of extremely valuable insights and you have a few ideas about some small changes you can make to your product that would improve it.  Go ahead and spend some time improving it.  Any spare time you have for the next few days should be focused on continuing to build your channels so that getting the word out of your first public launch is easy.\n \nContinue to post on your social media platforms and keep growing your following.  There are millions of free resources all over the internet that will give you advice on this (some are much better than others).\n\n\nChange the language on any social accounts and your landing page to express that you are launching soon.  Encourage people to sign up to a mailing list so that they receive first access to your product as soon as it launches.\n \nSend another email to everyone on your current mailing list and send out a link to a survey.  Offer everyone a sticker that gives you the name and email of 3-5 friends that would be interested in your product.  Don’t forget to ask for the mailing address in the survey so you can mail the sticker.  This is a great, cheap, and effective guerrilla marketing tactic that has worked well for me in the past.  Take some time and write a quick thank you card for each of the stickers you send.  It doesn’t have to be much - a sentence or two will do.  This will help you to really stand out.\n \nIf you want to be even more adventurous, try holding a sweepstakes or a contest. Vyper.io lets you do this very easily.\n \nIf your product is something online that people all over the world would benefit from, think about submitting it to a few of the sites found on Promotehour.  These sites are all awesome ways to show off what you are building to early-adopting type people who may be interested in joining.\n\nIf your product is more local, such as a summer day camp for neighborhood kids, try getting into the local paper.  Email a local reporter, they’ll likely ignore your first email, but keep following up with them.  Presistentance counts here.\n# Lesson 16: Write About Your Journey\nYou have just one assignment for the next 4 days.  Write about the journey.  As I have said before, people love stories and it is important to tell yours.  Talk about the problem you sought out to solve, why it was important to you, the failures you encountered, and what you have accomplished so far.  If you have a blog as part of your project, post it there and make sure that as soon as someone subscribes to your mailing list, they receive an automated email from you directing them to read the article about your start.  If you don’t have a blog already set up, Medium is a great alternative.  On Medium, you can write a post about anything and allow the world to see it.  If you decide to go this route, make sure that you provide the link to your Medium account in as many places as possible (just like Facebook, Twitter, and Instagram accounts).  Medium is great, but without a following your story will not have much of an impact.\n\n \nAfter completing this, send it out to your current subscribers, share it from all of your personal social accounts, make as many people aware of your story as possible! This would also be a great time to announce when you are launching your product. Give a date that you know you can hit and give very clear instructions so that everyone knows exactly what they need to do in order to get access once it launches.\n\n \nNot confident about your writing abilities? I’d love to help out.  Also, feel free to share your story with me once it is completed. I’d be happy to share it from BOLD social accounts.\n\n\nOnce you have finished writing and sharing your story continue making changes to your beta product that improve it.  In four days, I will be giving you some last tips about launching your product.  You’re almost there.\n# Lesson 17: The Launch\nYour launch date is approaching and hopefully you have something to show everyone that you’re proud of.  I just want to leave you all with a few pieces of advice to make sure you have a great launch now that you spent so much time working on your product.\n\n \nRemember Promotehour, it is an extremely valuable resource and getting exposure from just one of those sources could really make a huge difference.\n\n\nThere are also some other things you could do.  Research some bloggers or publications that your target readers often read.  Offer to guest write for them as long as you can put a blurb about your launch in the article you write.  This is a great way to leverage communities that others have already built.\n \nI also encourage everyone to offer some kind of incentive for sharing your product with their friends.  There is still nothing like the word of mouth. \n\n \nThink about Uber and how they give $10 of credit to you and a friend when your friend uses your promo code when signing up.  What you do doesn’t have to be so complex to execute, but think of ways you can mimic that in a low-tech way.\n\n \nIf you are using Wordpress at all there are a number of plugins that allow you to lock certain parts of your website or certain pieces of content until a user shares a post to Facebook, Tweets something, or subscribes to your newsletter.  I’ve had great success with Social Locker but do your research and find out which plugin matches your needs the best.\n\n \nIf you haven’t already, purchase stickers.  Get them from StickerMule and give them out to people.  Put them in different locations and give them to friends.  I have found that giving stickers to students is extremely effective.  They will often put the sticker on their laptop and a sticker on a laptop in a college town can be incredibly valuable.\n\n# Lesson 18: Reflection\nSo you did it!  Over the course of ten weeks you identified a problem, researched why that problem existed, made a few (maybe wrong) assumptions about what would solve those problems, held a few interviews, asked a lot of questions, built a MLP, built a beta product, looked at a ton of survey response data, launched an actual product, and most importantly of all, you learned a lot.\n\n \nWhen I was creating the Launch In A Summer program, my goal was never to help students launch successful products.  Rather, I wanted to teach students how to tackle a problem in an entrepreneurial way.  Sure, I absolutely love hearing about all of your successful products, but what I would love even more is to hear that you take the processes you learned this summer and apply them elsewhere.  I truly believe that no matter the situation, be it at a startup, at a large corporate company, or even in class, the processes you learned can be applied anywhere and can result in some pretty amazing solutions.\n\n\nIf you have not yet done so, subscribe to the BOLD newsletter here to stay in touch.\n\nIf you are interested in having your resume sent to awesome hiring tech companies, submit it here, send me an email and let me know if you do.  For participating in this program I will grant everyone automatic acceptance.\n","slug":"NewsLetter-Make-a-product","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf40017m2cag2nq8aoq","content":"<h1 id=\"Lesson-1-Find-a-problem-not-a-Solution\"><a href=\"#Lesson-1-Find-a-problem-not-a-Solution\" class=\"headerlink\" title=\"Lesson 1: Find a problem, not a Solution\"></a>Lesson 1: Find a problem, not a Solution</h1><p>The first step to building something is determining what you are going to build.  But this isn’t as simple as many may think. The idea you choose to pursue will account for a large part of the success or failure of your product.</p>\n<p>Right this second, I want everyone to kill any idea they came into this program with.  Why?  Because starting with an idea is a huge red flag and despite what many people say - having an idea is not the first step.</p>\n<p>The first thing that everyone must complete is to think of a problem.  By starting with a problem and not a potential solution, you will be much less likely to build something that doesn’t really serve a purpose or that may solve a problem but that problem may be so minuscule that you have trouble getting people to convert.</p>\n<p>Thinking of an idea comes later: when you know a problem that you are going to solve and when you know the reasons why that problem is a problem in the first place.</p>\n<p>Your assignment for the next four days is simple, I want you to make a list of problems that you are passionate about solving.  Use a Google Sheet with two columns, in the first list all of the problems you can think of that you are passionate about solving.  In the second column rate each problem on a scale of 1(not that passionate) to 10 (the purpose of my life is to solve this problem).</p>\n<p>That’s all for now.  Feel free to share your list of problems with me, I would love to see what people are coming up with.<br><a id=\"more\"></a></p>\n<h1 id=\"Lesson-2-Email-and-talk-to-everyone-that-will-listen\"><a href=\"#Lesson-2-Email-and-talk-to-everyone-that-will-listen\" class=\"headerlink\" title=\"Lesson 2: Email and talk to everyone that will listen\"></a>Lesson 2: Email and talk to everyone that will listen</h1><p>Now that you have a list of problems, the next step is discovering why those are problems in the first place.</p>\n<h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1.\"></a>Step 1.</h2><p>Choose three problems you should focus on<br>these should be chosen by combining two factors - the first is your passion for the problem, the second is the feasibility of creating a solution for the problem.  If you don’t think you can solve any of your problems, you can always bring them down in scope.  </p>\n<p>For example, perhaps one of your problems was climate change.  While you are all amazingly talented students, launching a solution meant to solve a world crisis in your free time over the summer isn’t really feasible.  However, it is easy to lower the scope of that issue.  Maybe there isn’t enough education about climate change amongst the youth in your neighborhood, or maybe your county has the lowest levels of recycling in your state.  </p>\n<p>There are always ways of breaking large problems into smaller, more solvable ones.  If you’re having problems doing this, just reply to this email and I’ll help you out.</p>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><p>Once you have decided on 3 problems to focus on, begin to email, call, and talk to as many people as you can that are stakeholders for each problem.  Just keep in mind that depending on what it is, a problem may have multiple different types of stakeholders.  It is important to talk to all of them to get an idea of the problem from the various angles.</p>\n<p>You can send them an email similar to this one that I used…</p>\n<p>Hi [name],</p>\n<p>I’m  a student at the University of Virginia hoping to spend 15 minutes on the phone with other students across the country who are experiencing a disappointment with the education they are receiving. I’m just doing some research and have nothing to sell. Would you be available for a quick call tomorrow at 3pm?</p>\n<p>When you are communicating with these stakeholders, have about 5-8 questions prepared that are all focused on validating these three things:</p>\n<ol>\n<li><p>Do they actually experience the problem (why is it a problem for them now)</p>\n</li>\n<li><p>How painful is the problem to them (is it an essential problem or is it just a “it would be nice to have fixed problem”?)</p>\n</li>\n<li><p>How do they solve the problem now (What’s wrong with the current solution?)</p>\n</li>\n</ol>\n<p>Here are the 7 questions that I had prepared</p>\n<p>While you are talking/emailing with stakeholders be sure to record everything they say. Take good notes while you are on the phone and immediately after you hang up - rewrite your notes into an Evernote document, or an organized Google Sheet.  This process of rewriting what you just learned will help reinforce the information and make it clearer to you moving forward.</p>\n<p>Go through this process with at least 6 people for each of your three problems.  That means actually talking to 18 people.  Which means you will likely have to email around 50, as typically only a third of the people you email will be willing to fit you into their schedule. That’s a lot of emails but you know how to hustle so get to it.</p>\n<p>Here are a few pointers to help you get there.</p>\n<ol>\n<li>Use LinkedIn’s search feature to find people that you may want to talk to.</li>\n<li><p>Use Anymailfinder to find the email of almost anyone just based off their name and the company they work for.</p>\n</li>\n<li><p>Send a follow-up email every 2-3 business days if they do not respond.  You’ll be surprised how effective a quick follow-up can be.<br>Here’s an example of a follow-up email I used.</p>\n</li>\n</ol>\n<p>Hi [name],</p>\n<p>Just wanted to jump to the top of your inbox again.  As I mentioned, I’m researching [problem] and would love it if I could jump on a quick 15-minute call with you.</p>\n<p>Let me know what times work the best for you.</p>\n<p>As always, I’m interested in what you guys are learning and what problems you are experiencing. Reply directly to this email and tell me what’s up, I’d love to help wherever I can.</p>\n<h1 id=\"Lesson-3-📂-Organize-📂\"><a href=\"#Lesson-3-📂-Organize-📂\" class=\"headerlink\" title=\"Lesson 3: 📂 Organize 📂\"></a>Lesson 3: 📂 Organize 📂</h1><p>Take everything you learned and just digest it.  Read over all of your notes, do some outside research online, read some articles and really try to get a good understanding of each of the problems that you have been pursuing.  It is now time to pick one.</p>\n<p>Here are some factors that you should consider when narrowing down your problems from three to one.</p>\n<ol>\n<li><p>How much information did you gather from stakeholders (the more the better)</p>\n</li>\n<li><p>How painful is the problem? (the more painful, the more willing people will be to trying your solution)</p>\n</li>\n<li><p>What other solutions already exist?  Do those solutions have their own problems?</p>\n</li>\n<li><p>What do you know the most about?  It is near impossible to build something successful without being an expert in that field.  Make sure you aren’t getting in over your head here.</p>\n</li>\n</ol>\n<p>Take these four things into consideration while making your decision and narrow it down to one.  Remember, you should not be spending any time thinking about a solution to build yet!</p>\n<p>Think of what we are doing now as building a foundation.  You must have a strong, structured foundation that is based on true principles before you can actually start building a structure.</p>\n<p>After you have one problem, your final task for this week is to talk to at least five more people.  Ask these people much deeper questions that try to get at why the problem is a problem.  Often times you will discover smaller underlying problems that are extremely important to keep in mind moving forward.  For example, if your problem is that high school students don’t know how to navigate the college admissions process, why is this a problem?  Do students not like going to their school guidance counselors for help?  Why?  Are there not enough resources available? Why is that?  Are students just lazy and don’t care enough to do research on their own? Why?</p>\n<h1 id=\"Lesson-4-Nail-Down-What-You-Learned\"><a href=\"#Lesson-4-Nail-Down-What-You-Learned\" class=\"headerlink\" title=\"Lesson 4: Nail Down What You Learned\"></a>Lesson 4: Nail Down What You Learned</h1><p>By now you have done a lot of research and interviews, and while you certainly aren’t done with that (no one is ever done), you are closer to thinking about a potential solution.</p>\n<p>Take everything you have learned and try to fit it into a problem statement using a structure like one below.  Start by making a post-it note for all of the different stakeholders involved in your problem.  Then fill out the rest of the columns for each of the stakeholders.<br>This exercise will help you truly understand everything you have learned in a simplified form and help you begin to brainstorm.</p>\n<p>Take a picture of your problem statements and send them to me.  I would love to see what you guys came up with.</p>\n<h1 id=\"Lesson-5-Create-an-MLP\"><a href=\"#Lesson-5-Create-an-MLP\" class=\"headerlink\" title=\"Lesson 5: Create an MLP\"></a>Lesson 5: Create an MLP</h1><p>Okay so you have your problem, you have a great understanding of why it is a problem, and now it is time to start building something.  But this isn’t the time to start building something polished.  For the next 4 days, you should focus on completing an MLP.  MLP stands for Minimum Lovable Product, it is the simplest possible thing that solves the root problem that your potential users are facing.  The MLP does not have to resemble your final product at all, but it should try to solve the problem in a way similar to what you imagine your final project doing.  It also does not have to have any of the cool features that could improve usability.  The only thing that it has to do is begin to solve the problem.  In the end, it is not the MLP that is very important, it is the feedback that you will collect.</p>\n<p>Here are a few examples:<br>-If you want to make unemployed people more aware of available jobs, instead of creating an online job board right off the bat, make a very good, well-organized Google Sheet that you can share with people that acts as a huge database of available jobs.</p>\n<p>-If you want to run a month-long soccer boot camp, try running a one day camp with local neighborhood kids for free.</p>\n<p>-If you want to start a magazine that increases awareness of the amazing things women in tech are building, set up a MailChimp account, write a few email articles and send them to a list of everyone you know.</p>\n<p>No matter what you think you are going to build, there is always an ultra-simple way to do it that can be thrown together in a day or two.</p>\n<p>So make sure that in four days you have an MLP that is ready to be sent out to people.</p>\n<h1 id=\"Lesson-6-Getting-Feedback\"><a href=\"#Lesson-6-Getting-Feedback\" class=\"headerlink\" title=\"Lesson 6: Getting Feedback\"></a>Lesson 6: Getting Feedback</h1><p>So you have your MLP ready to go.  It is now time to send it to users and get your first rounds of feedback.  Start with the people that you have already talked to over the phone.  Send them a follow up email thanking them for their time and give them a brief summary of what you have learned from talking to them and the many other people in similar positions.  At the end of the email tell them that you took what you learned and tried to make a simple solution that you could build in a day.  Ask them to test it out.  Many people argue that you should try to get as many users as possible at this point. However, I strongly disagree.  Get at least 10 testers and you will be able to see trends in what they say about your MLP.  By having 100, 500, or even 1,000 you won’t see many deviations from the early trends of the first 10 or so.</p>\n<p>There are two advantages of having a small (but just large enough) pool of early testers.  First, it saves a ton of valuable time that you could be putting towards building your project.  Secondly, if your MLP really sucks (which I’m sure none of yours do) then you have only disappointed 10 potential users which is very easy to forget and recover from.</p>\n<p>After you have given your testers enough time to test your MLP, try to jump on another quick call with them.  And again, have a series of questions ready to go.  These questions should all be focused on their usage of the product.  You should try to find out these points from all of your testers:</p>\n<ol>\n<li><p>Did this solution solve the problem for you?  Completely or only partially?</p>\n</li>\n<li><p>How often did you use it?</p>\n</li>\n<li><p>What was lacking with it? What problems still exist for you?</p>\n</li>\n</ol>\n<p>Don’t forget to take great notes during these calls and then rewrite them into an organized document immediately after the call.</p>\n<p>Right now you are trying to figure out if you’re on the right path or if a different approach may work to solve the problem in a better way.  Negative feedback is valuable here! Do not ignore, and certainly don’t be discouraged by it.  Bad feedback only means you found a way not to solve a problem and will save you very valuable time down the road.</p>\n<p>At this point, you should start keeping a list that contains the name and email of everyone that you have talked to at this point. It is important to keep this list up-to-date, ideally, the people you are talking to now will turn into the first users of your project once it is completed.</p>\n<p>I can not stress enough how important the people you are talking to now are.  Always be very gracious of their time, and always be sure to follow up with them, relay any new information you have learned, or give them updates as to where you are in the launching process.  People love stories and involving people in your launching story will make them much more likely to become early adopters.</p>\n<h1 id=\"Lesson-7-Put-Your-Head-Down-and-Build\"><a href=\"#Lesson-7-Put-Your-Head-Down-and-Build\" class=\"headerlink\" title=\"Lesson 7: Put Your Head Down and Build\"></a>Lesson 7: Put Your Head Down and Build</h1><p>So you have some feedback about your MLP and you’ve spent some time digesting everything you learned by talking to your first round of testers.  I will repeat two important points again.</p>\n<ol>\n<li><p>Your MLP does not have to resemble your final project, it only has to try to tackle the problem in a similar fashion.</p>\n</li>\n<li><p>You want to learn about underlying problems and behaviors by testing your MLP and start to think about how you will address these before you start building your beta product.  For example, maybe you want to connect people with similar interests.  You may learn that the first message is the hardest part and that in most cases testers didn’t message their connections because they didn’t know what to say at first.  You may take this information and hypothesize that by providing prompts for the first message, people will talk to more of their connections.</p>\n</li>\n</ol>\n<p>Your next step is to start building your beta product.  How should your beta product differ from your MLP?  The beta is like a rough draft, it should closely resemble in form and structure what you are trying to make.  So if you are making an app, your beta should be an app.  If you are publishing a magazine, the beta should be some form of publication.  If you are launching a food delivery company, deliver some actual food.</p>\n<p>One very important thing that I want to point out here.  Choose something that you can build. This means that if you are not a developer DO NOT say that you’re going to build an app.  If you don’t have much design experience, don’t say that you want to launch a series of videos teaching design.  This isn’t to say that you can’t learn new things but to launch by the end of the summer, stick to what you know.</p>\n<p>Your beta does not have to be polished.  It does not have to have every core feature that you think would be useful.  The purpose of the beta is just to get something in testers’ hands that is similar to what you plan to build and ask them about it.  You may learn that a feature you built wasn’t very useful, or the testers may give you awesome ideas that could add a lot of value.  But let’s not worry about that yet.</p>\n<p>Building a beta product is a lot of work but you guys are all smart and you know how to hustle.  The work you put in here will help you out later.  The beta product, with a few small changes, will become the final product.  </p>\n<p>I will say that the best way to start building is to create a product backlog, essentially a to-do list of all the things that need to be completed in order to get your beta completed.  Trello is hands-down the best platform to use for creating a backlog and then keeping it updated.  It’s also free.</p>\n<p>Building a beta product may seem like a huge task but just break it down into little pieces.  Then eventually all of those pieces will add up to something really cool.  If you ever feel overwhelmed, just ask yourself: What can I do today?  This question often helps people break big tasks into smaller ones.</p>\n<p>Depending on your project, this will take longer for some people but just put your head down and build.  I have scheduled about 2.5 weeks just to building the beta so make sure you plan accordingly.</p>\n<h1 id=\"Lesson-8-Tools-To-Help-You-Out\"><a href=\"#Lesson-8-Tools-To-Help-You-Out\" class=\"headerlink\" title=\"Lesson 8: Tools To Help You Out\"></a>Lesson 8: Tools To Help You Out</h1><p>The only thing I have for today is a few tools that I would like to share with you all.  These tools have helped me in the past when I have been building different beta products so I hope they can do the same for you.</p>\n<ol>\n<li><p>Unsplash - Free (do whatever you want) high-resolution photos.  This is extremely helpful for those of you building tech or printed products and need good looking images.</p>\n</li>\n<li><p>Forest - A fun productivity app that encourages you to focus for 30-minute time intervals.  If you don’t, a virtual tree in your forest dies.</p>\n</li>\n<li><p>SlimFAQ - Build a FAQ page quickly and easily for your website or application.</p>\n</li>\n<li><p>Invoicely - free, unlimited online invoices   </p>\n</li>\n<li><p>NewsletterStash - Hand curated directory of the best email newsletters.  This is a great resource if your project includes a mailing list.  It has great examples that you can study and you can mimic what the professionals are doing.</p>\n</li>\n<li><p>Startup Stash - A list of more than 400 resources for you to use while building your startup</p>\n</li>\n<li><p>Arka - The easiest way to order custom packaging.  Does your project involve delivery of any kind?  You’ll want to visit this site.</p>\n</li>\n<li><p>Logo Maker - Create professional logos in minutes, on your phone.</p>\n</li>\n<li><p>Splash - Splash empowers you to create memorable event experiences through beautiful design, powerful planning tools &amp; meaningful media integration.  This tool is perfect if you are planning to build a class, a summer camp, a concert, or anything along those lines.  It creates a beautiful customizable website that allows you to collect payments.</p>\n</li>\n<li><p>Squarespace - Another great website builder option.  This is the best if you are interested in creating an e-commerce store or a blog.</p>\n<h1 id=\"Lesson-9-Fixes-To-Common-Problems-While-Building\"><a href=\"#Lesson-9-Fixes-To-Common-Problems-While-Building\" class=\"headerlink\" title=\"Lesson 9: Fixes To Common Problems While Building\"></a>Lesson 9: Fixes To Common Problems While Building</h1><p>Today’s email is pretty light just because I know you all are working hard.</p>\n</li>\n</ol>\n<p>If you haven’t done so, email me, I’d love to hear about what you are building but more importantly what problems you are having.  If I can’t help you myself, I’ll connect you with someone who can.</p>\n<h1 id=\"Lesson-10-Start-Thinking-About-Your-Launch\"><a href=\"#Lesson-10-Start-Thinking-About-Your-Launch\" class=\"headerlink\" title=\"Lesson 10: Start Thinking About Your Launch\"></a>Lesson 10: Start Thinking About Your Launch</h1><p>It is important to keep your launch in the back of your mind while you are building.</p>\n<p>At this point, I want you all to start taking steps so that your launch will be easy when it comes around.  So what should you be doing?</p>\n<p>Create social media accounts.  Facebook, Instagram, Twitter, Pinterest, wherever you think your audience spends time.</p>\n<p>Get on Medium and write a quick post about what you are trying to build and why.  Remember, people don’t buy products, they buy the story behind them.</p>\n<p>If you haven’t done so yet, set up a simple landing page.  There are countless tools out there for you to use even if you have never written a single line of code.  Squarespace, Splash, AppLandr, OntraPages, and Strinkingly are all tools you can use to get up and running online with no experience.  Each have their strengths and weaknesses, do your research and see what fits your needs the best.</p>\n<p>Finally, set yourself up with a Mailchimp account.  Set up a list within Mailchimp and start collecting email addresses of people who are interested in what you are building.</p>\n<p>Now that you have a landing page you can put language on it, something similar to: “Beta version coming soon.  Sign up to be a tester.”</p>\n<p>You can then include a form that once filled out will add an interested person’s email address straight to your list in Mailchimp.  How to do this differs a little bit depending on the platform you are using for the landing page.  But there are millions of tutorials online that will show you what to do.  Just Google it.</p>\n<h1 id=\"Lesson-11-Build-to-Optimize-Growth\"><a href=\"#Lesson-11-Build-to-Optimize-Growth\" class=\"headerlink\" title=\"Lesson 11: Build to Optimize Growth\"></a>Lesson 11: Build to Optimize Growth</h1><p>You should be close to completing your beta product.  But before you are done, it is important to start thinking about how your project will grow and attract more people.  It is much easier to build those functions in now than to wait until everything is completed.</p>\n<p>Think about features or different products/services that you can reserve for people that share a blog post, like your Facebook page, get 5 friends to sign-up to your newsletter, or something along those lines.  You need ways to get your product out there and offering people incentives to help you out is the best way.</p>\n<p>There are a number of ways that you can do this.</p>\n<p>Viral Sign Ups is a good option but that’s just one of many.</p>\n<p>You can also do something much less official.  Make a few images for Facebook that contain copy such as “Share this post for a chance to win a t-shirt”.  There are a million different things you can do.  Keep your audience in mind and if you think of something good be sure to share it on Slack.  I’m sure everyone would love to hear what others are coming up with.</p>\n<p>Just remember that if something worked for one person it doesn’t mean that it will work for everyone.</p>\n<p>Do some brainstorming here and continue to build your beta.  You should be finishing the last few things.  Plan to launch in a week!</p>\n<h1 id=\"Lesson-12-Build-Your-Channels\"><a href=\"#Lesson-12-Build-Your-Channels\" class=\"headerlink\" title=\"Lesson 12: Build Your Channels\"></a>Lesson 12: Build Your Channels</h1><p>It’s almost here.  After the next email, you should plan to launch your beta product but before doing so, it is important that you start to grow your social following so that you have some sort of stage and audience to announce the release of your beta product to.</p>\n<p>This is the time to invite all of your friends and family to like your Facebook page.  Ask anyone you know if they would be interested in being added to the mailing list.  Post on your personal Facebook, Twitter, and Instagram accounts about the upcoming launch.</p>\n<p>Hand out a few stickers if you have them.  Make flyers.  Make posters.  Hang posters on stop signs, bathroom walls, ceilings, windows.  Don’t ask for permission, just go out and do things.</p>\n<p>Small side note: I’ve found that hanging flyers right above urinals in the Men’s restroom is the absolute best place to hang flyers.</p>\n<p>On Twitter, find an influencer that has a bunch of followers that would probably be interested in what you are building.  Start following their followers.  (Make sure you’ve tweeted a few times before doing this and make sure any important links are in your bio).  Unfollow ones that don’t follow back in 2-3 days.  Look around for twitter tools, there are many that will help you do this.  Some more effective than others.</p>\n<p>Once you start to see your audience growing don’t be afraid to tell them that you’re about to launch a beta version.  Have them signup if they would be interested in testing it.  For this test, unlike the MLP testing, the more testers the better (within reason, just make sure you can handle the volume of testers that join).</p>\n<p>Continue to build up hype through your channels and try to get as many followers and subscribers as possible.</p>\n<p>It’s almost time to launch.  In the next email I’ll leave you all a few tips on having a successful launch.</p>\n<h1 id=\"Lesson-13-The-Beta-Launch\"><a href=\"#Lesson-13-The-Beta-Launch\" class=\"headerlink\" title=\"Lesson 13: The Beta Launch\"></a>Lesson 13: The Beta Launch</h1><p>The time has come.  You have worked very hard to get your beta product working and you are finally ready to have people test it out.  But let’s go over a few things before you go off and start onboarding people.</p>\n<p>First, let’s go over the purpose of the beta test.  The main reason you are launching is to test out your project, see if there are any bugs, problems, weak points, or things that could be improved.  You should try to get as much feedback from the beta users as possible.  If you’re making an app or something electronic that allows you to track usage - do it! This will give you a ton of valuable insights.  If you’re working on something that isn’t online, there are still ways to track valuable analytics that can be very helpful.  Surveys and phone calls will be your friends.</p>\n<p>Who you choose to be your beta testers is also something worth mentioning.  You should get beta testers that you know will give you honest feedback and also people who have a great need for your product.  This way you can be sure that they will spend a substantial amount of time with your product.  </p>\n<p>Your parents probably aren’t the best people to choose for this.  But if you’ve been following my tips, at this point you should have a mailing list of at least 100 people that you have met and talked to along your process of building.  Pull from this list for your testers! You can either individually reach out to a hand-selected group of people or send a newsletter to everyone.  Updating them of your progress and including a form (Google Form or Typeform) for those that would be interested in participating in a beta test.</p>\n<p>The length of your beta test will depend on how often people are interacting with your project but aim for around a week.</p>\n<p>Before you get everyone using your product, make sure that you run a pre-use survey!  This is extremely important and will help you immensely later down the road.  In this survey you want to figure out some sort of baseline before people started using your product.</p>\n<p>For example, if you’re teaching a bootcamp teaching HTML/CSS to non-developers you could ask the following questions:</p>\n<ol>\n<li>On a scale of 1-10, how would you rate your current understanding of HTML/CSS?</li>\n<li><p>How many times a week do you currently write HTML/CSS code?</p>\n</li>\n<li><p>How many times a week do you plan on writing HTML/CSS code after this bootcamp?</p>\n</li>\n<li><p>How many hours do you plan on practicing outside of the bootcamp over the next week?</p>\n</li>\n</ol>\n<p>Try to make these answers as quantitative as possible.  This will allow you to easily see the effects of your product after we run a post-test survey.</p>\n<p>That’s all for now.  Good luck with getting your beta testers up and running.  And remember, be very respectful of their time and always be very gracious.  There’s a good chance that if you treat them well, beta testers will turn into your first customers once you release your finished product.</p>\n<h1 id=\"Lesson-14-The-Followup\"><a href=\"#Lesson-14-The-Followup\" class=\"headerlink\" title=\"Lesson 14: The Followup\"></a>Lesson 14: The Followup</h1><p>How is your beta test going?  Not seeing the results you were expecting?  People not using your product as much as you would like?  That’s FINE!  There is no such thing as a failed beta test.  It’s a learning experience.  If you’re frustrated with the results then just realize that you found a way to solve a problem that for whatever reason doesn’t work.  By running the beta test you just saved a whole bunch of time before wasting it on trying to perfect a product that doesn’t work.  You can take the feedback you gathered and see why your solution did not work.  Then you can make a few changes and try again.</p>\n<p>If your test is going better than expected, great.  Listen to the users and discuss what could be improved, what added features may increase the value proposition.  You don’t have to listen to every single one of these but they may give you some good ideas that you hadn’t even thought of.</p>\n<p>After the week of testing, you should run a post-use survey.  In this survey you should have some of the same questions that you can compare before and after scores.  In the last example, we used a HTML/CSS bootcamp.  A post-test question should be: After the bootcamp, on a scale of 1-10, how would you rate your understanding of HTML/CSS.  You should also include some questions about continuing usage.  Ask them if they would ever be willing to pay for your product.  How much?  If not, what changes would need to be made in order for them to be willing to pay?  Make sure they realize that answering these questions in no way obligates them to paying anything.</p>\n<p>Quick side note here: you may want to think about offering beta users a discount for when your product becomes paid - it could encourage them to continue using while also paying a little bit.  It doesn’t have to be a huge discount.  20% for the first 3 months - it goes a long way and makes the beta testers feel valued.</p>\n<p>If you see that people generally had positive feedback but they are not willing to pay, don’t worry about it.  You can start to explore different methods of revenue.  Maybe it is through sponsorship?  Displaying ads?  Other stakeholders?  If there are people that enjoy what you have built then there is always a way to make it work, it just might not be that obvious.</p>\n<p>Finish up your beta testing and send that follow-up email, make sure people fill out that post-use survey.  Keep track of everyone that has or hasn’t filled it out and continue to bug people (respectfully) until they complete it.  The information you gain from this is way too important to just let people off the hook.</p>\n<h1 id=\"Lesson-15-Build-Your-Channels-Again\"><a href=\"#Lesson-15-Build-Your-Channels-Again\" class=\"headerlink\" title=\"Lesson 15: Build Your Channels, Again\"></a>Lesson 15: Build Your Channels, Again</h1><p>Congratulations!  You’re done with your beta test.  You gained a ton of extremely valuable insights and you have a few ideas about some small changes you can make to your product that would improve it.  Go ahead and spend some time improving it.  Any spare time you have for the next few days should be focused on continuing to build your channels so that getting the word out of your first public launch is easy.</p>\n<p>Continue to post on your social media platforms and keep growing your following.  There are millions of free resources all over the internet that will give you advice on this (some are much better than others).</p>\n<p>Change the language on any social accounts and your landing page to express that you are launching soon.  Encourage people to sign up to a mailing list so that they receive first access to your product as soon as it launches.</p>\n<p>Send another email to everyone on your current mailing list and send out a link to a survey.  Offer everyone a sticker that gives you the name and email of 3-5 friends that would be interested in your product.  Don’t forget to ask for the mailing address in the survey so you can mail the sticker.  This is a great, cheap, and effective guerrilla marketing tactic that has worked well for me in the past.  Take some time and write a quick thank you card for each of the stickers you send.  It doesn’t have to be much - a sentence or two will do.  This will help you to really stand out.</p>\n<p>If you want to be even more adventurous, try holding a sweepstakes or a contest. Vyper.io lets you do this very easily.</p>\n<p>If your product is something online that people all over the world would benefit from, think about submitting it to a few of the sites found on Promotehour.  These sites are all awesome ways to show off what you are building to early-adopting type people who may be interested in joining.</p>\n<p>If your product is more local, such as a summer day camp for neighborhood kids, try getting into the local paper.  Email a local reporter, they’ll likely ignore your first email, but keep following up with them.  Presistentance counts here.</p>\n<h1 id=\"Lesson-16-Write-About-Your-Journey\"><a href=\"#Lesson-16-Write-About-Your-Journey\" class=\"headerlink\" title=\"Lesson 16: Write About Your Journey\"></a>Lesson 16: Write About Your Journey</h1><p>You have just one assignment for the next 4 days.  Write about the journey.  As I have said before, people love stories and it is important to tell yours.  Talk about the problem you sought out to solve, why it was important to you, the failures you encountered, and what you have accomplished so far.  If you have a blog as part of your project, post it there and make sure that as soon as someone subscribes to your mailing list, they receive an automated email from you directing them to read the article about your start.  If you don’t have a blog already set up, Medium is a great alternative.  On Medium, you can write a post about anything and allow the world to see it.  If you decide to go this route, make sure that you provide the link to your Medium account in as many places as possible (just like Facebook, Twitter, and Instagram accounts).  Medium is great, but without a following your story will not have much of an impact.</p>\n<p>After completing this, send it out to your current subscribers, share it from all of your personal social accounts, make as many people aware of your story as possible! This would also be a great time to announce when you are launching your product. Give a date that you know you can hit and give very clear instructions so that everyone knows exactly what they need to do in order to get access once it launches.</p>\n<p>Not confident about your writing abilities? I’d love to help out.  Also, feel free to share your story with me once it is completed. I’d be happy to share it from BOLD social accounts.</p>\n<p>Once you have finished writing and sharing your story continue making changes to your beta product that improve it.  In four days, I will be giving you some last tips about launching your product.  You’re almost there.</p>\n<h1 id=\"Lesson-17-The-Launch\"><a href=\"#Lesson-17-The-Launch\" class=\"headerlink\" title=\"Lesson 17: The Launch\"></a>Lesson 17: The Launch</h1><p>Your launch date is approaching and hopefully you have something to show everyone that you’re proud of.  I just want to leave you all with a few pieces of advice to make sure you have a great launch now that you spent so much time working on your product.</p>\n<p>Remember Promotehour, it is an extremely valuable resource and getting exposure from just one of those sources could really make a huge difference.</p>\n<p>There are also some other things you could do.  Research some bloggers or publications that your target readers often read.  Offer to guest write for them as long as you can put a blurb about your launch in the article you write.  This is a great way to leverage communities that others have already built.</p>\n<p>I also encourage everyone to offer some kind of incentive for sharing your product with their friends.  There is still nothing like the word of mouth. </p>\n<p>Think about Uber and how they give $10 of credit to you and a friend when your friend uses your promo code when signing up.  What you do doesn’t have to be so complex to execute, but think of ways you can mimic that in a low-tech way.</p>\n<p>If you are using Wordpress at all there are a number of plugins that allow you to lock certain parts of your website or certain pieces of content until a user shares a post to Facebook, Tweets something, or subscribes to your newsletter.  I’ve had great success with Social Locker but do your research and find out which plugin matches your needs the best.</p>\n<p>If you haven’t already, purchase stickers.  Get them from StickerMule and give them out to people.  Put them in different locations and give them to friends.  I have found that giving stickers to students is extremely effective.  They will often put the sticker on their laptop and a sticker on a laptop in a college town can be incredibly valuable.</p>\n<h1 id=\"Lesson-18-Reflection\"><a href=\"#Lesson-18-Reflection\" class=\"headerlink\" title=\"Lesson 18: Reflection\"></a>Lesson 18: Reflection</h1><p>So you did it!  Over the course of ten weeks you identified a problem, researched why that problem existed, made a few (maybe wrong) assumptions about what would solve those problems, held a few interviews, asked a lot of questions, built a MLP, built a beta product, looked at a ton of survey response data, launched an actual product, and most importantly of all, you learned a lot.</p>\n<p>When I was creating the Launch In A Summer program, my goal was never to help students launch successful products.  Rather, I wanted to teach students how to tackle a problem in an entrepreneurial way.  Sure, I absolutely love hearing about all of your successful products, but what I would love even more is to hear that you take the processes you learned this summer and apply them elsewhere.  I truly believe that no matter the situation, be it at a startup, at a large corporate company, or even in class, the processes you learned can be applied anywhere and can result in some pretty amazing solutions.</p>\n<p>If you have not yet done so, subscribe to the BOLD newsletter here to stay in touch.</p>\n<p>If you are interested in having your resume sent to awesome hiring tech companies, submit it here, send me an email and let me know if you do.  For participating in this program I will grant everyone automatic acceptance.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Lesson-1-Find-a-problem-not-a-Solution\"><a href=\"#Lesson-1-Find-a-problem-not-a-Solution\" class=\"headerlink\" title=\"Lesson 1: Find a problem, not a Solution\"></a>Lesson 1: Find a problem, not a Solution</h1><p>The first step to building something is determining what you are going to build.  But this isn’t as simple as many may think. The idea you choose to pursue will account for a large part of the success or failure of your product.</p>\n<p>Right this second, I want everyone to kill any idea they came into this program with.  Why?  Because starting with an idea is a huge red flag and despite what many people say - having an idea is not the first step.</p>\n<p>The first thing that everyone must complete is to think of a problem.  By starting with a problem and not a potential solution, you will be much less likely to build something that doesn’t really serve a purpose or that may solve a problem but that problem may be so minuscule that you have trouble getting people to convert.</p>\n<p>Thinking of an idea comes later: when you know a problem that you are going to solve and when you know the reasons why that problem is a problem in the first place.</p>\n<p>Your assignment for the next four days is simple, I want you to make a list of problems that you are passionate about solving.  Use a Google Sheet with two columns, in the first list all of the problems you can think of that you are passionate about solving.  In the second column rate each problem on a scale of 1(not that passionate) to 10 (the purpose of my life is to solve this problem).</p>\n<p>That’s all for now.  Feel free to share your list of problems with me, I would love to see what people are coming up with.<br>","more":"</p>\n<h1 id=\"Lesson-2-Email-and-talk-to-everyone-that-will-listen\"><a href=\"#Lesson-2-Email-and-talk-to-everyone-that-will-listen\" class=\"headerlink\" title=\"Lesson 2: Email and talk to everyone that will listen\"></a>Lesson 2: Email and talk to everyone that will listen</h1><p>Now that you have a list of problems, the next step is discovering why those are problems in the first place.</p>\n<h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1.\"></a>Step 1.</h2><p>Choose three problems you should focus on<br>these should be chosen by combining two factors - the first is your passion for the problem, the second is the feasibility of creating a solution for the problem.  If you don’t think you can solve any of your problems, you can always bring them down in scope.  </p>\n<p>For example, perhaps one of your problems was climate change.  While you are all amazingly talented students, launching a solution meant to solve a world crisis in your free time over the summer isn’t really feasible.  However, it is easy to lower the scope of that issue.  Maybe there isn’t enough education about climate change amongst the youth in your neighborhood, or maybe your county has the lowest levels of recycling in your state.  </p>\n<p>There are always ways of breaking large problems into smaller, more solvable ones.  If you’re having problems doing this, just reply to this email and I’ll help you out.</p>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><p>Once you have decided on 3 problems to focus on, begin to email, call, and talk to as many people as you can that are stakeholders for each problem.  Just keep in mind that depending on what it is, a problem may have multiple different types of stakeholders.  It is important to talk to all of them to get an idea of the problem from the various angles.</p>\n<p>You can send them an email similar to this one that I used…</p>\n<p>Hi [name],</p>\n<p>I’m  a student at the University of Virginia hoping to spend 15 minutes on the phone with other students across the country who are experiencing a disappointment with the education they are receiving. I’m just doing some research and have nothing to sell. Would you be available for a quick call tomorrow at 3pm?</p>\n<p>When you are communicating with these stakeholders, have about 5-8 questions prepared that are all focused on validating these three things:</p>\n<ol>\n<li><p>Do they actually experience the problem (why is it a problem for them now)</p>\n</li>\n<li><p>How painful is the problem to them (is it an essential problem or is it just a “it would be nice to have fixed problem”?)</p>\n</li>\n<li><p>How do they solve the problem now (What’s wrong with the current solution?)</p>\n</li>\n</ol>\n<p>Here are the 7 questions that I had prepared</p>\n<p>While you are talking/emailing with stakeholders be sure to record everything they say. Take good notes while you are on the phone and immediately after you hang up - rewrite your notes into an Evernote document, or an organized Google Sheet.  This process of rewriting what you just learned will help reinforce the information and make it clearer to you moving forward.</p>\n<p>Go through this process with at least 6 people for each of your three problems.  That means actually talking to 18 people.  Which means you will likely have to email around 50, as typically only a third of the people you email will be willing to fit you into their schedule. That’s a lot of emails but you know how to hustle so get to it.</p>\n<p>Here are a few pointers to help you get there.</p>\n<ol>\n<li>Use LinkedIn’s search feature to find people that you may want to talk to.</li>\n<li><p>Use Anymailfinder to find the email of almost anyone just based off their name and the company they work for.</p>\n</li>\n<li><p>Send a follow-up email every 2-3 business days if they do not respond.  You’ll be surprised how effective a quick follow-up can be.<br>Here’s an example of a follow-up email I used.</p>\n</li>\n</ol>\n<p>Hi [name],</p>\n<p>Just wanted to jump to the top of your inbox again.  As I mentioned, I’m researching [problem] and would love it if I could jump on a quick 15-minute call with you.</p>\n<p>Let me know what times work the best for you.</p>\n<p>As always, I’m interested in what you guys are learning and what problems you are experiencing. Reply directly to this email and tell me what’s up, I’d love to help wherever I can.</p>\n<h1 id=\"Lesson-3-📂-Organize-📂\"><a href=\"#Lesson-3-📂-Organize-📂\" class=\"headerlink\" title=\"Lesson 3: 📂 Organize 📂\"></a>Lesson 3: 📂 Organize 📂</h1><p>Take everything you learned and just digest it.  Read over all of your notes, do some outside research online, read some articles and really try to get a good understanding of each of the problems that you have been pursuing.  It is now time to pick one.</p>\n<p>Here are some factors that you should consider when narrowing down your problems from three to one.</p>\n<ol>\n<li><p>How much information did you gather from stakeholders (the more the better)</p>\n</li>\n<li><p>How painful is the problem? (the more painful, the more willing people will be to trying your solution)</p>\n</li>\n<li><p>What other solutions already exist?  Do those solutions have their own problems?</p>\n</li>\n<li><p>What do you know the most about?  It is near impossible to build something successful without being an expert in that field.  Make sure you aren’t getting in over your head here.</p>\n</li>\n</ol>\n<p>Take these four things into consideration while making your decision and narrow it down to one.  Remember, you should not be spending any time thinking about a solution to build yet!</p>\n<p>Think of what we are doing now as building a foundation.  You must have a strong, structured foundation that is based on true principles before you can actually start building a structure.</p>\n<p>After you have one problem, your final task for this week is to talk to at least five more people.  Ask these people much deeper questions that try to get at why the problem is a problem.  Often times you will discover smaller underlying problems that are extremely important to keep in mind moving forward.  For example, if your problem is that high school students don’t know how to navigate the college admissions process, why is this a problem?  Do students not like going to their school guidance counselors for help?  Why?  Are there not enough resources available? Why is that?  Are students just lazy and don’t care enough to do research on their own? Why?</p>\n<h1 id=\"Lesson-4-Nail-Down-What-You-Learned\"><a href=\"#Lesson-4-Nail-Down-What-You-Learned\" class=\"headerlink\" title=\"Lesson 4: Nail Down What You Learned\"></a>Lesson 4: Nail Down What You Learned</h1><p>By now you have done a lot of research and interviews, and while you certainly aren’t done with that (no one is ever done), you are closer to thinking about a potential solution.</p>\n<p>Take everything you have learned and try to fit it into a problem statement using a structure like one below.  Start by making a post-it note for all of the different stakeholders involved in your problem.  Then fill out the rest of the columns for each of the stakeholders.<br>This exercise will help you truly understand everything you have learned in a simplified form and help you begin to brainstorm.</p>\n<p>Take a picture of your problem statements and send them to me.  I would love to see what you guys came up with.</p>\n<h1 id=\"Lesson-5-Create-an-MLP\"><a href=\"#Lesson-5-Create-an-MLP\" class=\"headerlink\" title=\"Lesson 5: Create an MLP\"></a>Lesson 5: Create an MLP</h1><p>Okay so you have your problem, you have a great understanding of why it is a problem, and now it is time to start building something.  But this isn’t the time to start building something polished.  For the next 4 days, you should focus on completing an MLP.  MLP stands for Minimum Lovable Product, it is the simplest possible thing that solves the root problem that your potential users are facing.  The MLP does not have to resemble your final product at all, but it should try to solve the problem in a way similar to what you imagine your final project doing.  It also does not have to have any of the cool features that could improve usability.  The only thing that it has to do is begin to solve the problem.  In the end, it is not the MLP that is very important, it is the feedback that you will collect.</p>\n<p>Here are a few examples:<br>-If you want to make unemployed people more aware of available jobs, instead of creating an online job board right off the bat, make a very good, well-organized Google Sheet that you can share with people that acts as a huge database of available jobs.</p>\n<p>-If you want to run a month-long soccer boot camp, try running a one day camp with local neighborhood kids for free.</p>\n<p>-If you want to start a magazine that increases awareness of the amazing things women in tech are building, set up a MailChimp account, write a few email articles and send them to a list of everyone you know.</p>\n<p>No matter what you think you are going to build, there is always an ultra-simple way to do it that can be thrown together in a day or two.</p>\n<p>So make sure that in four days you have an MLP that is ready to be sent out to people.</p>\n<h1 id=\"Lesson-6-Getting-Feedback\"><a href=\"#Lesson-6-Getting-Feedback\" class=\"headerlink\" title=\"Lesson 6: Getting Feedback\"></a>Lesson 6: Getting Feedback</h1><p>So you have your MLP ready to go.  It is now time to send it to users and get your first rounds of feedback.  Start with the people that you have already talked to over the phone.  Send them a follow up email thanking them for their time and give them a brief summary of what you have learned from talking to them and the many other people in similar positions.  At the end of the email tell them that you took what you learned and tried to make a simple solution that you could build in a day.  Ask them to test it out.  Many people argue that you should try to get as many users as possible at this point. However, I strongly disagree.  Get at least 10 testers and you will be able to see trends in what they say about your MLP.  By having 100, 500, or even 1,000 you won’t see many deviations from the early trends of the first 10 or so.</p>\n<p>There are two advantages of having a small (but just large enough) pool of early testers.  First, it saves a ton of valuable time that you could be putting towards building your project.  Secondly, if your MLP really sucks (which I’m sure none of yours do) then you have only disappointed 10 potential users which is very easy to forget and recover from.</p>\n<p>After you have given your testers enough time to test your MLP, try to jump on another quick call with them.  And again, have a series of questions ready to go.  These questions should all be focused on their usage of the product.  You should try to find out these points from all of your testers:</p>\n<ol>\n<li><p>Did this solution solve the problem for you?  Completely or only partially?</p>\n</li>\n<li><p>How often did you use it?</p>\n</li>\n<li><p>What was lacking with it? What problems still exist for you?</p>\n</li>\n</ol>\n<p>Don’t forget to take great notes during these calls and then rewrite them into an organized document immediately after the call.</p>\n<p>Right now you are trying to figure out if you’re on the right path or if a different approach may work to solve the problem in a better way.  Negative feedback is valuable here! Do not ignore, and certainly don’t be discouraged by it.  Bad feedback only means you found a way not to solve a problem and will save you very valuable time down the road.</p>\n<p>At this point, you should start keeping a list that contains the name and email of everyone that you have talked to at this point. It is important to keep this list up-to-date, ideally, the people you are talking to now will turn into the first users of your project once it is completed.</p>\n<p>I can not stress enough how important the people you are talking to now are.  Always be very gracious of their time, and always be sure to follow up with them, relay any new information you have learned, or give them updates as to where you are in the launching process.  People love stories and involving people in your launching story will make them much more likely to become early adopters.</p>\n<h1 id=\"Lesson-7-Put-Your-Head-Down-and-Build\"><a href=\"#Lesson-7-Put-Your-Head-Down-and-Build\" class=\"headerlink\" title=\"Lesson 7: Put Your Head Down and Build\"></a>Lesson 7: Put Your Head Down and Build</h1><p>So you have some feedback about your MLP and you’ve spent some time digesting everything you learned by talking to your first round of testers.  I will repeat two important points again.</p>\n<ol>\n<li><p>Your MLP does not have to resemble your final project, it only has to try to tackle the problem in a similar fashion.</p>\n</li>\n<li><p>You want to learn about underlying problems and behaviors by testing your MLP and start to think about how you will address these before you start building your beta product.  For example, maybe you want to connect people with similar interests.  You may learn that the first message is the hardest part and that in most cases testers didn’t message their connections because they didn’t know what to say at first.  You may take this information and hypothesize that by providing prompts for the first message, people will talk to more of their connections.</p>\n</li>\n</ol>\n<p>Your next step is to start building your beta product.  How should your beta product differ from your MLP?  The beta is like a rough draft, it should closely resemble in form and structure what you are trying to make.  So if you are making an app, your beta should be an app.  If you are publishing a magazine, the beta should be some form of publication.  If you are launching a food delivery company, deliver some actual food.</p>\n<p>One very important thing that I want to point out here.  Choose something that you can build. This means that if you are not a developer DO NOT say that you’re going to build an app.  If you don’t have much design experience, don’t say that you want to launch a series of videos teaching design.  This isn’t to say that you can’t learn new things but to launch by the end of the summer, stick to what you know.</p>\n<p>Your beta does not have to be polished.  It does not have to have every core feature that you think would be useful.  The purpose of the beta is just to get something in testers’ hands that is similar to what you plan to build and ask them about it.  You may learn that a feature you built wasn’t very useful, or the testers may give you awesome ideas that could add a lot of value.  But let’s not worry about that yet.</p>\n<p>Building a beta product is a lot of work but you guys are all smart and you know how to hustle.  The work you put in here will help you out later.  The beta product, with a few small changes, will become the final product.  </p>\n<p>I will say that the best way to start building is to create a product backlog, essentially a to-do list of all the things that need to be completed in order to get your beta completed.  Trello is hands-down the best platform to use for creating a backlog and then keeping it updated.  It’s also free.</p>\n<p>Building a beta product may seem like a huge task but just break it down into little pieces.  Then eventually all of those pieces will add up to something really cool.  If you ever feel overwhelmed, just ask yourself: What can I do today?  This question often helps people break big tasks into smaller ones.</p>\n<p>Depending on your project, this will take longer for some people but just put your head down and build.  I have scheduled about 2.5 weeks just to building the beta so make sure you plan accordingly.</p>\n<h1 id=\"Lesson-8-Tools-To-Help-You-Out\"><a href=\"#Lesson-8-Tools-To-Help-You-Out\" class=\"headerlink\" title=\"Lesson 8: Tools To Help You Out\"></a>Lesson 8: Tools To Help You Out</h1><p>The only thing I have for today is a few tools that I would like to share with you all.  These tools have helped me in the past when I have been building different beta products so I hope they can do the same for you.</p>\n<ol>\n<li><p>Unsplash - Free (do whatever you want) high-resolution photos.  This is extremely helpful for those of you building tech or printed products and need good looking images.</p>\n</li>\n<li><p>Forest - A fun productivity app that encourages you to focus for 30-minute time intervals.  If you don’t, a virtual tree in your forest dies.</p>\n</li>\n<li><p>SlimFAQ - Build a FAQ page quickly and easily for your website or application.</p>\n</li>\n<li><p>Invoicely - free, unlimited online invoices   </p>\n</li>\n<li><p>NewsletterStash - Hand curated directory of the best email newsletters.  This is a great resource if your project includes a mailing list.  It has great examples that you can study and you can mimic what the professionals are doing.</p>\n</li>\n<li><p>Startup Stash - A list of more than 400 resources for you to use while building your startup</p>\n</li>\n<li><p>Arka - The easiest way to order custom packaging.  Does your project involve delivery of any kind?  You’ll want to visit this site.</p>\n</li>\n<li><p>Logo Maker - Create professional logos in minutes, on your phone.</p>\n</li>\n<li><p>Splash - Splash empowers you to create memorable event experiences through beautiful design, powerful planning tools &amp; meaningful media integration.  This tool is perfect if you are planning to build a class, a summer camp, a concert, or anything along those lines.  It creates a beautiful customizable website that allows you to collect payments.</p>\n</li>\n<li><p>Squarespace - Another great website builder option.  This is the best if you are interested in creating an e-commerce store or a blog.</p>\n<h1 id=\"Lesson-9-Fixes-To-Common-Problems-While-Building\"><a href=\"#Lesson-9-Fixes-To-Common-Problems-While-Building\" class=\"headerlink\" title=\"Lesson 9: Fixes To Common Problems While Building\"></a>Lesson 9: Fixes To Common Problems While Building</h1><p>Today’s email is pretty light just because I know you all are working hard.</p>\n</li>\n</ol>\n<p>If you haven’t done so, email me, I’d love to hear about what you are building but more importantly what problems you are having.  If I can’t help you myself, I’ll connect you with someone who can.</p>\n<h1 id=\"Lesson-10-Start-Thinking-About-Your-Launch\"><a href=\"#Lesson-10-Start-Thinking-About-Your-Launch\" class=\"headerlink\" title=\"Lesson 10: Start Thinking About Your Launch\"></a>Lesson 10: Start Thinking About Your Launch</h1><p>It is important to keep your launch in the back of your mind while you are building.</p>\n<p>At this point, I want you all to start taking steps so that your launch will be easy when it comes around.  So what should you be doing?</p>\n<p>Create social media accounts.  Facebook, Instagram, Twitter, Pinterest, wherever you think your audience spends time.</p>\n<p>Get on Medium and write a quick post about what you are trying to build and why.  Remember, people don’t buy products, they buy the story behind them.</p>\n<p>If you haven’t done so yet, set up a simple landing page.  There are countless tools out there for you to use even if you have never written a single line of code.  Squarespace, Splash, AppLandr, OntraPages, and Strinkingly are all tools you can use to get up and running online with no experience.  Each have their strengths and weaknesses, do your research and see what fits your needs the best.</p>\n<p>Finally, set yourself up with a Mailchimp account.  Set up a list within Mailchimp and start collecting email addresses of people who are interested in what you are building.</p>\n<p>Now that you have a landing page you can put language on it, something similar to: “Beta version coming soon.  Sign up to be a tester.”</p>\n<p>You can then include a form that once filled out will add an interested person’s email address straight to your list in Mailchimp.  How to do this differs a little bit depending on the platform you are using for the landing page.  But there are millions of tutorials online that will show you what to do.  Just Google it.</p>\n<h1 id=\"Lesson-11-Build-to-Optimize-Growth\"><a href=\"#Lesson-11-Build-to-Optimize-Growth\" class=\"headerlink\" title=\"Lesson 11: Build to Optimize Growth\"></a>Lesson 11: Build to Optimize Growth</h1><p>You should be close to completing your beta product.  But before you are done, it is important to start thinking about how your project will grow and attract more people.  It is much easier to build those functions in now than to wait until everything is completed.</p>\n<p>Think about features or different products/services that you can reserve for people that share a blog post, like your Facebook page, get 5 friends to sign-up to your newsletter, or something along those lines.  You need ways to get your product out there and offering people incentives to help you out is the best way.</p>\n<p>There are a number of ways that you can do this.</p>\n<p>Viral Sign Ups is a good option but that’s just one of many.</p>\n<p>You can also do something much less official.  Make a few images for Facebook that contain copy such as “Share this post for a chance to win a t-shirt”.  There are a million different things you can do.  Keep your audience in mind and if you think of something good be sure to share it on Slack.  I’m sure everyone would love to hear what others are coming up with.</p>\n<p>Just remember that if something worked for one person it doesn’t mean that it will work for everyone.</p>\n<p>Do some brainstorming here and continue to build your beta.  You should be finishing the last few things.  Plan to launch in a week!</p>\n<h1 id=\"Lesson-12-Build-Your-Channels\"><a href=\"#Lesson-12-Build-Your-Channels\" class=\"headerlink\" title=\"Lesson 12: Build Your Channels\"></a>Lesson 12: Build Your Channels</h1><p>It’s almost here.  After the next email, you should plan to launch your beta product but before doing so, it is important that you start to grow your social following so that you have some sort of stage and audience to announce the release of your beta product to.</p>\n<p>This is the time to invite all of your friends and family to like your Facebook page.  Ask anyone you know if they would be interested in being added to the mailing list.  Post on your personal Facebook, Twitter, and Instagram accounts about the upcoming launch.</p>\n<p>Hand out a few stickers if you have them.  Make flyers.  Make posters.  Hang posters on stop signs, bathroom walls, ceilings, windows.  Don’t ask for permission, just go out and do things.</p>\n<p>Small side note: I’ve found that hanging flyers right above urinals in the Men’s restroom is the absolute best place to hang flyers.</p>\n<p>On Twitter, find an influencer that has a bunch of followers that would probably be interested in what you are building.  Start following their followers.  (Make sure you’ve tweeted a few times before doing this and make sure any important links are in your bio).  Unfollow ones that don’t follow back in 2-3 days.  Look around for twitter tools, there are many that will help you do this.  Some more effective than others.</p>\n<p>Once you start to see your audience growing don’t be afraid to tell them that you’re about to launch a beta version.  Have them signup if they would be interested in testing it.  For this test, unlike the MLP testing, the more testers the better (within reason, just make sure you can handle the volume of testers that join).</p>\n<p>Continue to build up hype through your channels and try to get as many followers and subscribers as possible.</p>\n<p>It’s almost time to launch.  In the next email I’ll leave you all a few tips on having a successful launch.</p>\n<h1 id=\"Lesson-13-The-Beta-Launch\"><a href=\"#Lesson-13-The-Beta-Launch\" class=\"headerlink\" title=\"Lesson 13: The Beta Launch\"></a>Lesson 13: The Beta Launch</h1><p>The time has come.  You have worked very hard to get your beta product working and you are finally ready to have people test it out.  But let’s go over a few things before you go off and start onboarding people.</p>\n<p>First, let’s go over the purpose of the beta test.  The main reason you are launching is to test out your project, see if there are any bugs, problems, weak points, or things that could be improved.  You should try to get as much feedback from the beta users as possible.  If you’re making an app or something electronic that allows you to track usage - do it! This will give you a ton of valuable insights.  If you’re working on something that isn’t online, there are still ways to track valuable analytics that can be very helpful.  Surveys and phone calls will be your friends.</p>\n<p>Who you choose to be your beta testers is also something worth mentioning.  You should get beta testers that you know will give you honest feedback and also people who have a great need for your product.  This way you can be sure that they will spend a substantial amount of time with your product.  </p>\n<p>Your parents probably aren’t the best people to choose for this.  But if you’ve been following my tips, at this point you should have a mailing list of at least 100 people that you have met and talked to along your process of building.  Pull from this list for your testers! You can either individually reach out to a hand-selected group of people or send a newsletter to everyone.  Updating them of your progress and including a form (Google Form or Typeform) for those that would be interested in participating in a beta test.</p>\n<p>The length of your beta test will depend on how often people are interacting with your project but aim for around a week.</p>\n<p>Before you get everyone using your product, make sure that you run a pre-use survey!  This is extremely important and will help you immensely later down the road.  In this survey you want to figure out some sort of baseline before people started using your product.</p>\n<p>For example, if you’re teaching a bootcamp teaching HTML/CSS to non-developers you could ask the following questions:</p>\n<ol>\n<li>On a scale of 1-10, how would you rate your current understanding of HTML/CSS?</li>\n<li><p>How many times a week do you currently write HTML/CSS code?</p>\n</li>\n<li><p>How many times a week do you plan on writing HTML/CSS code after this bootcamp?</p>\n</li>\n<li><p>How many hours do you plan on practicing outside of the bootcamp over the next week?</p>\n</li>\n</ol>\n<p>Try to make these answers as quantitative as possible.  This will allow you to easily see the effects of your product after we run a post-test survey.</p>\n<p>That’s all for now.  Good luck with getting your beta testers up and running.  And remember, be very respectful of their time and always be very gracious.  There’s a good chance that if you treat them well, beta testers will turn into your first customers once you release your finished product.</p>\n<h1 id=\"Lesson-14-The-Followup\"><a href=\"#Lesson-14-The-Followup\" class=\"headerlink\" title=\"Lesson 14: The Followup\"></a>Lesson 14: The Followup</h1><p>How is your beta test going?  Not seeing the results you were expecting?  People not using your product as much as you would like?  That’s FINE!  There is no such thing as a failed beta test.  It’s a learning experience.  If you’re frustrated with the results then just realize that you found a way to solve a problem that for whatever reason doesn’t work.  By running the beta test you just saved a whole bunch of time before wasting it on trying to perfect a product that doesn’t work.  You can take the feedback you gathered and see why your solution did not work.  Then you can make a few changes and try again.</p>\n<p>If your test is going better than expected, great.  Listen to the users and discuss what could be improved, what added features may increase the value proposition.  You don’t have to listen to every single one of these but they may give you some good ideas that you hadn’t even thought of.</p>\n<p>After the week of testing, you should run a post-use survey.  In this survey you should have some of the same questions that you can compare before and after scores.  In the last example, we used a HTML/CSS bootcamp.  A post-test question should be: After the bootcamp, on a scale of 1-10, how would you rate your understanding of HTML/CSS.  You should also include some questions about continuing usage.  Ask them if they would ever be willing to pay for your product.  How much?  If not, what changes would need to be made in order for them to be willing to pay?  Make sure they realize that answering these questions in no way obligates them to paying anything.</p>\n<p>Quick side note here: you may want to think about offering beta users a discount for when your product becomes paid - it could encourage them to continue using while also paying a little bit.  It doesn’t have to be a huge discount.  20% for the first 3 months - it goes a long way and makes the beta testers feel valued.</p>\n<p>If you see that people generally had positive feedback but they are not willing to pay, don’t worry about it.  You can start to explore different methods of revenue.  Maybe it is through sponsorship?  Displaying ads?  Other stakeholders?  If there are people that enjoy what you have built then there is always a way to make it work, it just might not be that obvious.</p>\n<p>Finish up your beta testing and send that follow-up email, make sure people fill out that post-use survey.  Keep track of everyone that has or hasn’t filled it out and continue to bug people (respectfully) until they complete it.  The information you gain from this is way too important to just let people off the hook.</p>\n<h1 id=\"Lesson-15-Build-Your-Channels-Again\"><a href=\"#Lesson-15-Build-Your-Channels-Again\" class=\"headerlink\" title=\"Lesson 15: Build Your Channels, Again\"></a>Lesson 15: Build Your Channels, Again</h1><p>Congratulations!  You’re done with your beta test.  You gained a ton of extremely valuable insights and you have a few ideas about some small changes you can make to your product that would improve it.  Go ahead and spend some time improving it.  Any spare time you have for the next few days should be focused on continuing to build your channels so that getting the word out of your first public launch is easy.</p>\n<p>Continue to post on your social media platforms and keep growing your following.  There are millions of free resources all over the internet that will give you advice on this (some are much better than others).</p>\n<p>Change the language on any social accounts and your landing page to express that you are launching soon.  Encourage people to sign up to a mailing list so that they receive first access to your product as soon as it launches.</p>\n<p>Send another email to everyone on your current mailing list and send out a link to a survey.  Offer everyone a sticker that gives you the name and email of 3-5 friends that would be interested in your product.  Don’t forget to ask for the mailing address in the survey so you can mail the sticker.  This is a great, cheap, and effective guerrilla marketing tactic that has worked well for me in the past.  Take some time and write a quick thank you card for each of the stickers you send.  It doesn’t have to be much - a sentence or two will do.  This will help you to really stand out.</p>\n<p>If you want to be even more adventurous, try holding a sweepstakes or a contest. Vyper.io lets you do this very easily.</p>\n<p>If your product is something online that people all over the world would benefit from, think about submitting it to a few of the sites found on Promotehour.  These sites are all awesome ways to show off what you are building to early-adopting type people who may be interested in joining.</p>\n<p>If your product is more local, such as a summer day camp for neighborhood kids, try getting into the local paper.  Email a local reporter, they’ll likely ignore your first email, but keep following up with them.  Presistentance counts here.</p>\n<h1 id=\"Lesson-16-Write-About-Your-Journey\"><a href=\"#Lesson-16-Write-About-Your-Journey\" class=\"headerlink\" title=\"Lesson 16: Write About Your Journey\"></a>Lesson 16: Write About Your Journey</h1><p>You have just one assignment for the next 4 days.  Write about the journey.  As I have said before, people love stories and it is important to tell yours.  Talk about the problem you sought out to solve, why it was important to you, the failures you encountered, and what you have accomplished so far.  If you have a blog as part of your project, post it there and make sure that as soon as someone subscribes to your mailing list, they receive an automated email from you directing them to read the article about your start.  If you don’t have a blog already set up, Medium is a great alternative.  On Medium, you can write a post about anything and allow the world to see it.  If you decide to go this route, make sure that you provide the link to your Medium account in as many places as possible (just like Facebook, Twitter, and Instagram accounts).  Medium is great, but without a following your story will not have much of an impact.</p>\n<p>After completing this, send it out to your current subscribers, share it from all of your personal social accounts, make as many people aware of your story as possible! This would also be a great time to announce when you are launching your product. Give a date that you know you can hit and give very clear instructions so that everyone knows exactly what they need to do in order to get access once it launches.</p>\n<p>Not confident about your writing abilities? I’d love to help out.  Also, feel free to share your story with me once it is completed. I’d be happy to share it from BOLD social accounts.</p>\n<p>Once you have finished writing and sharing your story continue making changes to your beta product that improve it.  In four days, I will be giving you some last tips about launching your product.  You’re almost there.</p>\n<h1 id=\"Lesson-17-The-Launch\"><a href=\"#Lesson-17-The-Launch\" class=\"headerlink\" title=\"Lesson 17: The Launch\"></a>Lesson 17: The Launch</h1><p>Your launch date is approaching and hopefully you have something to show everyone that you’re proud of.  I just want to leave you all with a few pieces of advice to make sure you have a great launch now that you spent so much time working on your product.</p>\n<p>Remember Promotehour, it is an extremely valuable resource and getting exposure from just one of those sources could really make a huge difference.</p>\n<p>There are also some other things you could do.  Research some bloggers or publications that your target readers often read.  Offer to guest write for them as long as you can put a blurb about your launch in the article you write.  This is a great way to leverage communities that others have already built.</p>\n<p>I also encourage everyone to offer some kind of incentive for sharing your product with their friends.  There is still nothing like the word of mouth. </p>\n<p>Think about Uber and how they give $10 of credit to you and a friend when your friend uses your promo code when signing up.  What you do doesn’t have to be so complex to execute, but think of ways you can mimic that in a low-tech way.</p>\n<p>If you are using Wordpress at all there are a number of plugins that allow you to lock certain parts of your website or certain pieces of content until a user shares a post to Facebook, Tweets something, or subscribes to your newsletter.  I’ve had great success with Social Locker but do your research and find out which plugin matches your needs the best.</p>\n<p>If you haven’t already, purchase stickers.  Get them from StickerMule and give them out to people.  Put them in different locations and give them to friends.  I have found that giving stickers to students is extremely effective.  They will often put the sticker on their laptop and a sticker on a laptop in a college town can be incredibly valuable.</p>\n<h1 id=\"Lesson-18-Reflection\"><a href=\"#Lesson-18-Reflection\" class=\"headerlink\" title=\"Lesson 18: Reflection\"></a>Lesson 18: Reflection</h1><p>So you did it!  Over the course of ten weeks you identified a problem, researched why that problem existed, made a few (maybe wrong) assumptions about what would solve those problems, held a few interviews, asked a lot of questions, built a MLP, built a beta product, looked at a ton of survey response data, launched an actual product, and most importantly of all, you learned a lot.</p>\n<p>When I was creating the Launch In A Summer program, my goal was never to help students launch successful products.  Rather, I wanted to teach students how to tackle a problem in an entrepreneurial way.  Sure, I absolutely love hearing about all of your successful products, but what I would love even more is to hear that you take the processes you learned this summer and apply them elsewhere.  I truly believe that no matter the situation, be it at a startup, at a large corporate company, or even in class, the processes you learned can be applied anywhere and can result in some pretty amazing solutions.</p>\n<p>If you have not yet done so, subscribe to the BOLD newsletter here to stay in touch.</p>\n<p>If you are interested in having your resume sent to awesome hiring tech companies, submit it here, send me an email and let me know if you do.  For participating in this program I will grant everyone automatic acceptance.</p>"},{"title":"Opinion about Love","comments":1,"date":"2017-10-19T18:46:17.000Z","updated":"2017-10-19T18:46:17.000Z","_content":"# 浅谈一下爱情的看法\n奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。","source":"_posts/Opinion-about-Love.md","raw":"---\ntitle: Opinion about Love\ncomments: true\ndate: 2017-10-19 11:46:17\nupdated: 2017-10-19 11:46:17\ncategories: Thinking\ntags: Love\n---\n# 浅谈一下爱情的看法\n奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。","slug":"Opinion-about-Love","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf5001bm2ca33rwnu1y","content":"<h1 id=\"浅谈一下爱情的看法\"><a href=\"#浅谈一下爱情的看法\" class=\"headerlink\" title=\"浅谈一下爱情的看法\"></a>浅谈一下爱情的看法</h1><p>奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浅谈一下爱情的看法\"><a href=\"#浅谈一下爱情的看法\" class=\"headerlink\" title=\"浅谈一下爱情的看法\"></a>浅谈一下爱情的看法</h1><p>奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。</p>\n"},{"title":"Quote John Adams--Education","comments":1,"date":"2017-05-03T19:32:25.000Z","updated":"2017-05-03T19:32:25.000Z","_content":"\nJohn Adams\nUS diplomat & politician (1735 - 1826) \n> I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.\n","source":"_posts/Quote-John-Adams-Education.md","raw":"---\ntitle: Quote John Adams--Education\ncomments: true\ndate: 2017-05-03 12:32:25\nupdated: 2017-05-03 12:32:25\ncategories: Thinking\ntags: Quote\n---\n\nJohn Adams\nUS diplomat & politician (1735 - 1826) \n> I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.\n","slug":"Quote-John-Adams-Education","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf7001em2cam2t8t5m5","content":"<p>John Adams<br>US diplomat &amp; politician (1735 - 1826) </p>\n<blockquote>\n<p>I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>John Adams<br>US diplomat &amp; politician (1735 - 1826) </p>\n<blockquote>\n<p>I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.</p>\n</blockquote>\n"},{"title":"Stack总结","comments":1,"date":"2017-10-25T04:51:46.000Z","updated":"2017-10-28T04:56:46.000Z","_content":"# Stack性质\n## 定义\nStack的定义便是先进后出，在python中用list实现\n\n```python\nclass Stack(object):\n\tdef __init__(self):\n\t\tself.stack = []\n\tdef push(self, i):\n\t\tself.stack.append(i)\n\tdef pop(self):\n\t\tif self.stack：\n\t\t\treturn self.stack.pop()\n\t\telse:\n\t\t\traise(\"Error\")\n\tdef peek(self):\n\t\treturn self.stack[-1]\n\t\n```\n## Basic 题目\n### 225. Implement Stack using Queues\n只用一个queue，每次append的时候，都要把前面的给pop出来再append进去\n\n```python\nclass MyStack(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = []\n        \n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        size = len(self.queue)\n        while size > 1:\n            self.queue.append(self.queue.pop(0))\n            size -= 1      \n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        return self.queue.pop(0)\n        \n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        return self.queue[0]\n        \n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n        \n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n```\n### 232. Implement Queue using Stacks\n用两个stack来存，输出的时候再全部放入到output的stack中\n\n```python\nclass MyQueue(object):\n    def __init__(self):\n        self.input = []\n        self.output = []\n        \n    def push(self, x):\n        self.input.append(x)\n\n    def pop(self):\n        self.peek()\n        return self.output.pop()\n        \n    def peek(self):\n        if(self.output == []):\n            while(self.input != []):\n                self.output.append(self.input.pop())\n        return self.output[-1]\n        \n    def empty(self):\n        return self.input == [] and self.output == []\n```\n### 20. Valid Parentheses\n左边的Parentheses作为key进入,右面的来判断是不是跟顶部的一样\n\n```python\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(')')\n            elif char == '[':\n                stack.append(']')\n            elif char == '{':\n                stack.append('}')\n            elif not stack or char != stack.pop():\n                return False\n        return not stack\n```\n<!--more-->\n### 42. Trapping Rain Water\n这道题感觉不是十分好想，需要维持一个stack来进行操作，当遇到新加的元素比栈顶元素大的时候，我们就要比较之前的元素，如果栈里面是有一个，则不能形成坑，continue；不然就比较之前的元素和当前的最小值，减去高度。哎呀，还是需要画图用例子来说比较好\n> 我们的做法是，遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦\n> http://www.cnblogs.com/grandyang/p/4402392.html\n\n```python\nclass Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        i = 0\n        size = len(height)\n        res = 0\n        while i < size:\n            if not stack or height[i] <= height[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                if not stack:\n                    continue\n                else:\n                    res += (min(height[i], height[stack[-1]]) - height[top]) * (i - stack[-1] -1) # height * width\n        return res\n```\n\n\n## Decreasing stack\n递减stack主要是记录数组中第一个比它大的数\n\n```python\nwhile stack and nums[i] > stack[-1]:\n\tdic[stack.pop()] = nums[i]\nstack.append(nums[i])\n```\n\n### 496. Next Greater Element I\n\n```python\nclass Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        # to store\n        dic = dict()\n        for i in range(len(nums)):\n            while stack and nums[i] > stack[-1]:\n                dic[stack.pop()] = nums[i]\n            stack.append(nums[i])\n        # deal with last   \n        while stack:\n            dic[stack.pop()] = -1\n            \n        for i in range(len(findNums)):\n            res.append(dic[findNums[i]])\n        return res\n```\n### 739. Daily Temperatures\n\n```python\nclass Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = [0] * len(temperatures)\n        stack = []\n        left = 0\n        for i in range(len(temperatures)):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                index = stack.pop()\n                res[index] = i - index\n            stack.append(i)\n        return res\n```\n### 503. Next Greater Element II\n\n```python\nclass Solution(object):\n    # stack\n    def nextGreaterElements(self, nums):\n        stack, res = [], [-1] * len(nums)\n        for i in range(len(nums)) * 2:\n            while stack and (nums[stack[-1]] < nums[i]):\n                res[stack.pop()] = nums[i]\n            stack.append(i)\n            \n        return res\n```\n### 316. Remove Duplicate Letters\n\n```python\nclass Solution(object):\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        stack = []\n        dic = dict()\n        for char in s:\n            dic[char] = dic.get(char, 0) + 1\n            \n        for char in s:\n            dic[char] -= 1\n            if char in stack:\n                continue\n            else:\n                while stack and ord(char) < ord(stack[-1]) and dic[stack[-1]] > 0:\n                    stack.pop()\n            stack.append(char)\n        return \"\".join(stack)\n```\n\n## 稍难题\n### 84. Largest Rectangle in Histogram\n维持一个递增stack，碰到一个比栈顶元素小的数，不断比较，更新最大面积\n\n```python\nclass Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        stack = []\n        for i in range(len(heights)+1):\n            height = heights[i] if i!= len(heights) else 0\n            while stack and height <= heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] -1 if stack else i\n                res = max(res, h*w)\n            stack.append(i)\n        return res\n```\n### 85. Maximal Rectangle\n同样的操作，只是这次是把上一道题的高度，变成矩阵中连续长度\n\n```python\nclass Solution(object):\n    def maximalRectangle(self, matrix):\n    \t# O(m^2)\n        if not matrix or not matrix[0]:\n            return 0\n        n = len(matrix[0])\n        # init heights array \n        height = [0] * (n + 1)\n        ans = 0\n        # calculate each row\n        for row in matrix:\n            for i in range(n):\n                # count next level '1'\n                height[i] = height[i] + 1 if row[i] == '1' else 0\n                \n            stack = []\n            \n            for i in range(n + 1):\n                while stack and height[i] <= height[stack[-1]]:\n                    h = height[stack.pop()]\n                    # if not stack means left boundary is zero then width is i else is the stack[-1] index\n                    w = i - 1 - stack[-1] if stack else i\n                    ans = max(ans, h * w)\n                stack.append(i)\n        return ans\n```","source":"_posts/Stack总结.md","raw":"---\ntitle: Stack总结\ncomments: true\ndate: 2017-10-24 21:51:46\nupdated: 2017-10-27 21:56:46\ncategories: Leetcode\ntags: stack\n---\n# Stack性质\n## 定义\nStack的定义便是先进后出，在python中用list实现\n\n```python\nclass Stack(object):\n\tdef __init__(self):\n\t\tself.stack = []\n\tdef push(self, i):\n\t\tself.stack.append(i)\n\tdef pop(self):\n\t\tif self.stack：\n\t\t\treturn self.stack.pop()\n\t\telse:\n\t\t\traise(\"Error\")\n\tdef peek(self):\n\t\treturn self.stack[-1]\n\t\n```\n## Basic 题目\n### 225. Implement Stack using Queues\n只用一个queue，每次append的时候，都要把前面的给pop出来再append进去\n\n```python\nclass MyStack(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = []\n        \n\n    def push(self, x):\n        \"\"\"\n        Push element x onto stack.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.queue.append(x)\n        size = len(self.queue)\n        while size > 1:\n            self.queue.append(self.queue.pop(0))\n            size -= 1      \n\n    def pop(self):\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        :rtype: int\n        \"\"\"\n        return self.queue.pop(0)\n        \n\n    def top(self):\n        \"\"\"\n        Get the top element.\n        :rtype: int\n        \"\"\"\n        return self.queue[0]\n        \n\n    def empty(self):\n        \"\"\"\n        Returns whether the stack is empty.\n        :rtype: bool\n        \"\"\"\n        return len(self.queue) == 0\n        \n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()\n```\n### 232. Implement Queue using Stacks\n用两个stack来存，输出的时候再全部放入到output的stack中\n\n```python\nclass MyQueue(object):\n    def __init__(self):\n        self.input = []\n        self.output = []\n        \n    def push(self, x):\n        self.input.append(x)\n\n    def pop(self):\n        self.peek()\n        return self.output.pop()\n        \n    def peek(self):\n        if(self.output == []):\n            while(self.input != []):\n                self.output.append(self.input.pop())\n        return self.output[-1]\n        \n    def empty(self):\n        return self.input == [] and self.output == []\n```\n### 20. Valid Parentheses\n左边的Parentheses作为key进入,右面的来判断是不是跟顶部的一样\n\n```python\nclass Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(')')\n            elif char == '[':\n                stack.append(']')\n            elif char == '{':\n                stack.append('}')\n            elif not stack or char != stack.pop():\n                return False\n        return not stack\n```\n<!--more-->\n### 42. Trapping Rain Water\n这道题感觉不是十分好想，需要维持一个stack来进行操作，当遇到新加的元素比栈顶元素大的时候，我们就要比较之前的元素，如果栈里面是有一个，则不能形成坑，continue；不然就比较之前的元素和当前的最小值，减去高度。哎呀，还是需要画图用例子来说比较好\n> 我们的做法是，遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦\n> http://www.cnblogs.com/grandyang/p/4402392.html\n\n```python\nclass Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        i = 0\n        size = len(height)\n        res = 0\n        while i < size:\n            if not stack or height[i] <= height[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                if not stack:\n                    continue\n                else:\n                    res += (min(height[i], height[stack[-1]]) - height[top]) * (i - stack[-1] -1) # height * width\n        return res\n```\n\n\n## Decreasing stack\n递减stack主要是记录数组中第一个比它大的数\n\n```python\nwhile stack and nums[i] > stack[-1]:\n\tdic[stack.pop()] = nums[i]\nstack.append(nums[i])\n```\n\n### 496. Next Greater Element I\n\n```python\nclass Solution(object):\n    def nextGreaterElement(self, findNums, nums):\n        \"\"\"\n        :type findNums: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        stack = []\n        # to store\n        dic = dict()\n        for i in range(len(nums)):\n            while stack and nums[i] > stack[-1]:\n                dic[stack.pop()] = nums[i]\n            stack.append(nums[i])\n        # deal with last   \n        while stack:\n            dic[stack.pop()] = -1\n            \n        for i in range(len(findNums)):\n            res.append(dic[findNums[i]])\n        return res\n```\n### 739. Daily Temperatures\n\n```python\nclass Solution(object):\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = [0] * len(temperatures)\n        stack = []\n        left = 0\n        for i in range(len(temperatures)):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                index = stack.pop()\n                res[index] = i - index\n            stack.append(i)\n        return res\n```\n### 503. Next Greater Element II\n\n```python\nclass Solution(object):\n    # stack\n    def nextGreaterElements(self, nums):\n        stack, res = [], [-1] * len(nums)\n        for i in range(len(nums)) * 2:\n            while stack and (nums[stack[-1]] < nums[i]):\n                res[stack.pop()] = nums[i]\n            stack.append(i)\n            \n        return res\n```\n### 316. Remove Duplicate Letters\n\n```python\nclass Solution(object):\n    def removeDuplicateLetters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        stack = []\n        dic = dict()\n        for char in s:\n            dic[char] = dic.get(char, 0) + 1\n            \n        for char in s:\n            dic[char] -= 1\n            if char in stack:\n                continue\n            else:\n                while stack and ord(char) < ord(stack[-1]) and dic[stack[-1]] > 0:\n                    stack.pop()\n            stack.append(char)\n        return \"\".join(stack)\n```\n\n## 稍难题\n### 84. Largest Rectangle in Histogram\n维持一个递增stack，碰到一个比栈顶元素小的数，不断比较，更新最大面积\n\n```python\nclass Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        res = 0\n        stack = []\n        for i in range(len(heights)+1):\n            height = heights[i] if i!= len(heights) else 0\n            while stack and height <= heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i - stack[-1] -1 if stack else i\n                res = max(res, h*w)\n            stack.append(i)\n        return res\n```\n### 85. Maximal Rectangle\n同样的操作，只是这次是把上一道题的高度，变成矩阵中连续长度\n\n```python\nclass Solution(object):\n    def maximalRectangle(self, matrix):\n    \t# O(m^2)\n        if not matrix or not matrix[0]:\n            return 0\n        n = len(matrix[0])\n        # init heights array \n        height = [0] * (n + 1)\n        ans = 0\n        # calculate each row\n        for row in matrix:\n            for i in range(n):\n                # count next level '1'\n                height[i] = height[i] + 1 if row[i] == '1' else 0\n                \n            stack = []\n            \n            for i in range(n + 1):\n                while stack and height[i] <= height[stack[-1]]:\n                    h = height[stack.pop()]\n                    # if not stack means left boundary is zero then width is i else is the stack[-1] index\n                    w = i - 1 - stack[-1] if stack else i\n                    ans = max(ans, h * w)\n                stack.append(i)\n        return ans\n```","slug":"Stack总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdf8001im2caytlic6ou","content":"<h1 id=\"Stack性质\"><a href=\"#Stack性质\" class=\"headerlink\" title=\"Stack性质\"></a>Stack性质</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>Stack的定义便是先进后出，在python中用list实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tself.stack = []</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">\t\tself.stack.append(i)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> self.stack：</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.stack.pop()</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span>(<span class=\"string\">\"Error\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic-题目\"><a href=\"#Basic-题目\" class=\"headerlink\" title=\"Basic 题目\"></a>Basic 题目</h2><h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225. Implement Stack using Queues\"></a>225. Implement Stack using Queues</h3><p>只用一个queue，每次append的时候，都要把前面的给pop出来再append进去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Push element x onto stack.</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue.append(x)</span><br><span class=\"line\">        size = len(self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> size &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.queue.append(self.queue.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            size -= <span class=\"number\">1</span>      </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes the element on top of the stack and returns that element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get the top element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns whether the stack is empty.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.queue) == <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># Your MyStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MyStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232. Implement Queue using Stacks\"></a>232. Implement Queue using Stacks</h3><p>用两个stack来存，输出的时候再全部放入到output的stack中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.input = []</span><br><span class=\"line\">        self.output = []</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.input.append(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.output == []):</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(self.input != []):</span><br><span class=\"line\">                self.output.append(self.input.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.input == [] <span class=\"keyword\">and</span> self.output == []</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20. Valid Parentheses\"></a>20. Valid Parentheses</h3><p>左边的Parentheses作为key进入,右面的来判断是不是跟顶部的一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char == <span class=\"string\">'('</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">')'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> char == <span class=\"string\">'['</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">']'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> char == <span class=\"string\">'&#123;'</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">'&#125;'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> char != stack.pop():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"42-Trapping-Rain-Water\"><a href=\"#42-Trapping-Rain-Water\" class=\"headerlink\" title=\"42. Trapping Rain Water\"></a>42. Trapping Rain Water</h3><p>这道题感觉不是十分好想，需要维持一个stack来进行操作，当遇到新加的元素比栈顶元素大的时候，我们就要比较之前的元素，如果栈里面是有一个，则不能形成坑，continue；不然就比较之前的元素和当前的最小值，减去高度。哎呀，还是需要画图用例子来说比较好</p>\n<blockquote>\n<p>我们的做法是，遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦<br><a href=\"http://www.cnblogs.com/grandyang/p/4402392.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/grandyang/p/4402392.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trap</span><span class=\"params\">(self, height)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type height: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        size = len(height)</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; size:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> height[i] &lt;= height[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                stack.append(i)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                top = stack.pop()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    res += (min(height[i], height[stack[<span class=\"number\">-1</span>]]) - height[top]) * (i - stack[<span class=\"number\">-1</span>] <span class=\"number\">-1</span>) <span class=\"comment\"># height * width</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decreasing-stack\"><a href=\"#Decreasing-stack\" class=\"headerlink\" title=\"Decreasing stack\"></a>Decreasing stack</h2><p>递减stack主要是记录数组中第一个比它大的数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> nums[i] &gt; stack[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">\tdic[stack.pop()] = nums[i]</span><br><span class=\"line\">stack.append(nums[i])</span><br></pre></td></tr></table></figure>\n<h3 id=\"496-Next-Greater-Element-I\"><a href=\"#496-Next-Greater-Element-I\" class=\"headerlink\" title=\"496. Next Greater Element I\"></a>496. Next Greater Element I</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"comment\"># to store</span></span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> nums[i] &gt; stack[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                dic[stack.pop()] = nums[i]</span><br><span class=\"line\">            stack.append(nums[i])</span><br><span class=\"line\">        <span class=\"comment\"># deal with last   </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">            dic[stack.pop()] = <span class=\"number\">-1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(findNums)):</span><br><span class=\"line\">            res.append(dic[findNums[i]])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"739-Daily-Temperatures\"><a href=\"#739-Daily-Temperatures\" class=\"headerlink\" title=\"739. Daily Temperatures\"></a>739. Daily Temperatures</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dailyTemperatures</span><span class=\"params\">(self, temperatures)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type temperatures: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * len(temperatures)</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        left = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(temperatures)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> temperatures[i] &gt; temperatures[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                index = stack.pop()</span><br><span class=\"line\">                res[index] = i - index</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"503-Next-Greater-Element-II\"><a href=\"#503-Next-Greater-Element-II\" class=\"headerlink\" title=\"503. Next Greater Element II\"></a>503. Next Greater Element II</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># stack</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElements</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        stack, res = [], [<span class=\"number\">-1</span>] * len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)) * <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> (nums[stack[<span class=\"number\">-1</span>]] &lt; nums[i]):</span><br><span class=\"line\">                res[stack.pop()] = nums[i]</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"316-Remove-Duplicate-Letters\"><a href=\"#316-Remove-Duplicate-Letters\" class=\"headerlink\" title=\"316. Remove Duplicate Letters\"></a>316. Remove Duplicate Letters</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeDuplicateLetters</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            dic[char] = dic.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            dic[char] -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> ord(char) &lt; ord(stack[<span class=\"number\">-1</span>]) <span class=\"keyword\">and</span> dic[stack[<span class=\"number\">-1</span>]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    stack.pop()</span><br><span class=\"line\">            stack.append(char)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(stack)</span><br></pre></td></tr></table></figure>\n<h2 id=\"稍难题\"><a href=\"#稍难题\" class=\"headerlink\" title=\"稍难题\"></a>稍难题</h2><h3 id=\"84-Largest-Rectangle-in-Histogram\"><a href=\"#84-Largest-Rectangle-in-Histogram\" class=\"headerlink\" title=\"84. Largest Rectangle in Histogram\"></a>84. Largest Rectangle in Histogram</h3><p>维持一个递增stack，碰到一个比栈顶元素小的数，不断比较，更新最大面积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(self, heights)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type heights: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(heights)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            height = heights[i] <span class=\"keyword\">if</span> i!= len(heights) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> height &lt;= heights[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                h = heights[stack.pop()]</span><br><span class=\"line\">                w = i - stack[<span class=\"number\">-1</span>] <span class=\"number\">-1</span> <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> i</span><br><span class=\"line\">                res = max(res, h*w)</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"85-Maximal-Rectangle\"><a href=\"#85-Maximal-Rectangle\" class=\"headerlink\" title=\"85. Maximal Rectangle\"></a>85. Maximal Rectangle</h3><p>同样的操作，只是这次是把上一道题的高度，变成矩阵中连续长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># O(m^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># init heights array </span></span><br><span class=\"line\">        height = [<span class=\"number\">0</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># calculate each row</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># count next level '1'</span></span><br><span class=\"line\">                height[i] = height[i] + <span class=\"number\">1</span> <span class=\"keyword\">if</span> row[i] == <span class=\"string\">'1'</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            stack = []</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> height[i] &lt;= height[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                    h = height[stack.pop()]</span><br><span class=\"line\">                    <span class=\"comment\"># if not stack means left boundary is zero then width is i else is the stack[-1] index</span></span><br><span class=\"line\">                    w = i - <span class=\"number\">1</span> - stack[<span class=\"number\">-1</span>] <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> i</span><br><span class=\"line\">                    ans = max(ans, h * w)</span><br><span class=\"line\">                stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Stack性质\"><a href=\"#Stack性质\" class=\"headerlink\" title=\"Stack性质\"></a>Stack性质</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>Stack的定义便是先进后出，在python中用list实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\tself.stack = []</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">\t\tself.stack.append(i)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> self.stack：</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.stack.pop()</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">raise</span>(<span class=\"string\">\"Error\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> self.stack[<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic-题目\"><a href=\"#Basic-题目\" class=\"headerlink\" title=\"Basic 题目\"></a>Basic 题目</h2><h3 id=\"225-Implement-Stack-using-Queues\"><a href=\"#225-Implement-Stack-using-Queues\" class=\"headerlink\" title=\"225. Implement Stack using Queues\"></a>225. Implement Stack using Queues</h3><p>只用一个queue，每次append的时候，都要把前面的给pop出来再append进去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Push element x onto stack.</span></span><br><span class=\"line\"><span class=\"string\">        :type x: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.queue.append(x)</span><br><span class=\"line\">        size = len(self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> size &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.queue.append(self.queue.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">            size -= <span class=\"number\">1</span>      </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Removes the element on top of the stack and returns that element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Get the top element.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.queue[<span class=\"number\">0</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns whether the stack is empty.</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self.queue) == <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># Your MyStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = MyStack()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"232-Implement-Queue-using-Stacks\"><a href=\"#232-Implement-Queue-using-Stacks\" class=\"headerlink\" title=\"232. Implement Queue using Stacks\"></a>232. Implement Queue using Stacks</h3><p>用两个stack来存，输出的时候再全部放入到output的stack中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyQueue</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.input = []</span><br><span class=\"line\">        self.output = []</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.input.append(x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.peek()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output.pop()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">peek</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(self.output == []):</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(self.input != []):</span><br><span class=\"line\">                self.output.append(self.input.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.input == [] <span class=\"keyword\">and</span> self.output == []</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20. Valid Parentheses\"></a>20. Valid Parentheses</h3><p>左边的Parentheses作为key进入,右面的来判断是不是跟顶部的一样</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char == <span class=\"string\">'('</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">')'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> char == <span class=\"string\">'['</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">']'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> char == <span class=\"string\">'&#123;'</span>:</span><br><span class=\"line\">                stack.append(<span class=\"string\">'&#125;'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> char != stack.pop():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"42-Trapping-Rain-Water\"><a href=\"#42-Trapping-Rain-Water\" class=\"headerlink\" title=\"42. Trapping Rain Water\"></a>42. Trapping Rain Water</h3><p>这道题感觉不是十分好想，需要维持一个stack来进行操作，当遇到新加的元素比栈顶元素大的时候，我们就要比较之前的元素，如果栈里面是有一个，则不能形成坑，continue；不然就比较之前的元素和当前的最小值，减去高度。哎呀，还是需要画图用例子来说比较好</p>\n<blockquote>\n<p>我们的做法是，遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦<br><a href=\"http://www.cnblogs.com/grandyang/p/4402392.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/grandyang/p/4402392.html</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trap</span><span class=\"params\">(self, height)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type height: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        size = len(height)</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; size:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack <span class=\"keyword\">or</span> height[i] &lt;= height[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                stack.append(i)</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                top = stack.pop()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> stack:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    res += (min(height[i], height[stack[<span class=\"number\">-1</span>]]) - height[top]) * (i - stack[<span class=\"number\">-1</span>] <span class=\"number\">-1</span>) <span class=\"comment\"># height * width</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"Decreasing-stack\"><a href=\"#Decreasing-stack\" class=\"headerlink\" title=\"Decreasing stack\"></a>Decreasing stack</h2><p>递减stack主要是记录数组中第一个比它大的数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> nums[i] &gt; stack[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">\tdic[stack.pop()] = nums[i]</span><br><span class=\"line\">stack.append(nums[i])</span><br></pre></td></tr></table></figure>\n<h3 id=\"496-Next-Greater-Element-I\"><a href=\"#496-Next-Greater-Element-I\" class=\"headerlink\" title=\"496. Next Greater Element I\"></a>496. Next Greater Element I</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElement</span><span class=\"params\">(self, findNums, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type findNums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"comment\"># to store</span></span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> nums[i] &gt; stack[<span class=\"number\">-1</span>]:</span><br><span class=\"line\">                dic[stack.pop()] = nums[i]</span><br><span class=\"line\">            stack.append(nums[i])</span><br><span class=\"line\">        <span class=\"comment\"># deal with last   </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">            dic[stack.pop()] = <span class=\"number\">-1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(findNums)):</span><br><span class=\"line\">            res.append(dic[findNums[i]])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"739-Daily-Temperatures\"><a href=\"#739-Daily-Temperatures\" class=\"headerlink\" title=\"739. Daily Temperatures\"></a>739. Daily Temperatures</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dailyTemperatures</span><span class=\"params\">(self, temperatures)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type temperatures: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * len(temperatures)</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        left = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(temperatures)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> temperatures[i] &gt; temperatures[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                index = stack.pop()</span><br><span class=\"line\">                res[index] = i - index</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"503-Next-Greater-Element-II\"><a href=\"#503-Next-Greater-Element-II\" class=\"headerlink\" title=\"503. Next Greater Element II\"></a>503. Next Greater Element II</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># stack</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">nextGreaterElements</span><span class=\"params\">(self, nums)</span>:</span></span><br><span class=\"line\">        stack, res = [], [<span class=\"number\">-1</span>] * len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)) * <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> (nums[stack[<span class=\"number\">-1</span>]] &lt; nums[i]):</span><br><span class=\"line\">                res[stack.pop()] = nums[i]</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"316-Remove-Duplicate-Letters\"><a href=\"#316-Remove-Duplicate-Letters\" class=\"headerlink\" title=\"316. Remove Duplicate Letters\"></a>316. Remove Duplicate Letters</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeDuplicateLetters</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            dic[char] = dic.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">            dic[char] -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> ord(char) &lt; ord(stack[<span class=\"number\">-1</span>]) <span class=\"keyword\">and</span> dic[stack[<span class=\"number\">-1</span>]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    stack.pop()</span><br><span class=\"line\">            stack.append(char)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(stack)</span><br></pre></td></tr></table></figure>\n<h2 id=\"稍难题\"><a href=\"#稍难题\" class=\"headerlink\" title=\"稍难题\"></a>稍难题</h2><h3 id=\"84-Largest-Rectangle-in-Histogram\"><a href=\"#84-Largest-Rectangle-in-Histogram\" class=\"headerlink\" title=\"84. Largest Rectangle in Histogram\"></a>84. Largest Rectangle in Histogram</h3><p>维持一个递增stack，碰到一个比栈顶元素小的数，不断比较，更新最大面积</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(self, heights)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type heights: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(heights)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            height = heights[i] <span class=\"keyword\">if</span> i!= len(heights) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> height &lt;= heights[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                h = heights[stack.pop()]</span><br><span class=\"line\">                w = i - stack[<span class=\"number\">-1</span>] <span class=\"number\">-1</span> <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> i</span><br><span class=\"line\">                res = max(res, h*w)</span><br><span class=\"line\">            stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"85-Maximal-Rectangle\"><a href=\"#85-Maximal-Rectangle\" class=\"headerlink\" title=\"85. Maximal Rectangle\"></a>85. Maximal Rectangle</h3><p>同样的操作，只是这次是把上一道题的高度，变成矩阵中连续长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maximalRectangle</span><span class=\"params\">(self, matrix)</span>:</span></span><br><span class=\"line\">    \t<span class=\"comment\"># O(m^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> matrix[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        n = len(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># init heights array </span></span><br><span class=\"line\">        height = [<span class=\"number\">0</span>] * (n + <span class=\"number\">1</span>)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># calculate each row</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"comment\"># count next level '1'</span></span><br><span class=\"line\">                height[i] = height[i] + <span class=\"number\">1</span> <span class=\"keyword\">if</span> row[i] == <span class=\"string\">'1'</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            stack = []</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n + <span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> height[i] &lt;= height[stack[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                    h = height[stack.pop()]</span><br><span class=\"line\">                    <span class=\"comment\"># if not stack means left boundary is zero then width is i else is the stack[-1] index</span></span><br><span class=\"line\">                    w = i - <span class=\"number\">1</span> - stack[<span class=\"number\">-1</span>] <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> i</span><br><span class=\"line\">                    ans = max(ans, h * w)</span><br><span class=\"line\">                stack.append(i)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>"},{"title":"String总结","comments":1,"date":"2017-10-25T04:53:46.000Z","updated":"2017-10-25T04:56:46.000Z","_content":"### 3. Longest Substring Without Repeating Characters\n这道题就是用一个Dict来统计字符所出现的index，然后不断计算不重复字符串的长度\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        useddict = {}\n        maxnum,start = 0,0\n        for i in range(len(s)):\n            if s[i] in useddict and start <= useddict[s[i]]:\n                start = useddict[s[i]] + 1\n            else:\n                maxnum = max(maxnum, i - start + 1)\n                \n            useddict[s[i]]= i\n        return maxnum\n```\n\n### 76. Minimum Window Substring\n这题和之前的非常像，就是需要处理的边界条件很多\n\n```python\nfrom collections import defaultdict\nclass Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        if not t:\n            return \"\"\n        useddict = defaultdict(int)\n        for char in t:\n            useddict[char] += 1\n        length = len(t)\n        minnum,start,end = len(s)+1,0,0\n        head = 0\n        for i in range(len(s)):\n            if s[i] in useddict:\n                useddict[s[i]] -= 1\n                if useddict[s[i]]>=0: \n                    length -= 1\n                while length==0:\n                    if i - start+1 < minnum:\n                        minnum = i-start+1\n                        head = start\n                    if s[start] in useddict:\n                        useddict[s[start]] += 1\n                        if useddict[s[start]] > 0: ## more same char was used\n                            length += 1\n                    start += 1\n                \n        \n        return s[head:head+minnum] if minnum <= len(s) else \"\"\n```","source":"_posts/String总结.md","raw":"---\ntitle: String总结\ncomments: true\ndate: 2017-10-24 21:53:46\nupdated: 2017-10-24 21:56:46\ncategories: Leetcode\ntags: String\n---\n### 3. Longest Substring Without Repeating Characters\n这道题就是用一个Dict来统计字符所出现的index，然后不断计算不重复字符串的长度\n\n```python\nclass Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        useddict = {}\n        maxnum,start = 0,0\n        for i in range(len(s)):\n            if s[i] in useddict and start <= useddict[s[i]]:\n                start = useddict[s[i]] + 1\n            else:\n                maxnum = max(maxnum, i - start + 1)\n                \n            useddict[s[i]]= i\n        return maxnum\n```\n\n### 76. Minimum Window Substring\n这题和之前的非常像，就是需要处理的边界条件很多\n\n```python\nfrom collections import defaultdict\nclass Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        if not s:\n            return \"\"\n        if not t:\n            return \"\"\n        useddict = defaultdict(int)\n        for char in t:\n            useddict[char] += 1\n        length = len(t)\n        minnum,start,end = len(s)+1,0,0\n        head = 0\n        for i in range(len(s)):\n            if s[i] in useddict:\n                useddict[s[i]] -= 1\n                if useddict[s[i]]>=0: \n                    length -= 1\n                while length==0:\n                    if i - start+1 < minnum:\n                        minnum = i-start+1\n                        head = start\n                    if s[start] in useddict:\n                        useddict[s[start]] += 1\n                        if useddict[s[start]] > 0: ## more same char was used\n                            length += 1\n                    start += 1\n                \n        \n        return s[head:head+minnum] if minnum <= len(s) else \"\"\n```","slug":"String总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfa001lm2cao4fvblbi","content":"<h3 id=\"3-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. Longest Substring Without Repeating Characters\"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是用一个Dict来统计字符所出现的index，然后不断计算不重复字符串的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        useddict = &#123;&#125;</span><br><span class=\"line\">        maxnum,start = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> useddict <span class=\"keyword\">and</span> start &lt;= useddict[s[i]]:</span><br><span class=\"line\">                start = useddict[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                maxnum = max(maxnum, i - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">            useddict[s[i]]= i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxnum</span><br></pre></td></tr></table></figure>\n<h3 id=\"76-Minimum-Window-Substring\"><a href=\"#76-Minimum-Window-Substring\" class=\"headerlink\" title=\"76. Minimum Window Substring\"></a>76. Minimum Window Substring</h3><p>这题和之前的非常像，就是需要处理的边界条件很多</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minWindow</span><span class=\"params\">(self, s, t)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        useddict = defaultdict(int)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            useddict[char] += <span class=\"number\">1</span></span><br><span class=\"line\">        length = len(t)</span><br><span class=\"line\">        minnum,start,end = len(s)+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        head = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> useddict:</span><br><span class=\"line\">                useddict[s[i]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> useddict[s[i]]&gt;=<span class=\"number\">0</span>: </span><br><span class=\"line\">                    length -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> length==<span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i - start+<span class=\"number\">1</span> &lt; minnum:</span><br><span class=\"line\">                        minnum = i-start+<span class=\"number\">1</span></span><br><span class=\"line\">                        head = start</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> s[start] <span class=\"keyword\">in</span> useddict:</span><br><span class=\"line\">                        useddict[s[start]] += <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> useddict[s[start]] &gt; <span class=\"number\">0</span>: <span class=\"comment\">## more same char was used</span></span><br><span class=\"line\">                            length += <span class=\"number\">1</span></span><br><span class=\"line\">                    start += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[head:head+minnum] <span class=\"keyword\">if</span> minnum &lt;= len(s) <span class=\"keyword\">else</span> <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"3-Longest-Substring-Without-Repeating-Characters\"><a href=\"#3-Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"3. Longest Substring Without Repeating Characters\"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是用一个Dict来统计字符所出现的index，然后不断计算不重复字符串的长度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        useddict = &#123;&#125;</span><br><span class=\"line\">        maxnum,start = <span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> useddict <span class=\"keyword\">and</span> start &lt;= useddict[s[i]]:</span><br><span class=\"line\">                start = useddict[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                maxnum = max(maxnum, i - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">                </span><br><span class=\"line\">            useddict[s[i]]= i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxnum</span><br></pre></td></tr></table></figure>\n<h3 id=\"76-Minimum-Window-Substring\"><a href=\"#76-Minimum-Window-Substring\" class=\"headerlink\" title=\"76. Minimum Window Substring\"></a>76. Minimum Window Substring</h3><p>这题和之前的非常像，就是需要处理的边界条件很多</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minWindow</span><span class=\"params\">(self, s, t)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        useddict = defaultdict(int)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            useddict[char] += <span class=\"number\">1</span></span><br><span class=\"line\">        length = len(t)</span><br><span class=\"line\">        minnum,start,end = len(s)+<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></span><br><span class=\"line\">        head = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[i] <span class=\"keyword\">in</span> useddict:</span><br><span class=\"line\">                useddict[s[i]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> useddict[s[i]]&gt;=<span class=\"number\">0</span>: </span><br><span class=\"line\">                    length -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> length==<span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> i - start+<span class=\"number\">1</span> &lt; minnum:</span><br><span class=\"line\">                        minnum = i-start+<span class=\"number\">1</span></span><br><span class=\"line\">                        head = start</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> s[start] <span class=\"keyword\">in</span> useddict:</span><br><span class=\"line\">                        useddict[s[start]] += <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> useddict[s[start]] &gt; <span class=\"number\">0</span>: <span class=\"comment\">## more same char was used</span></span><br><span class=\"line\">                            length += <span class=\"number\">1</span></span><br><span class=\"line\">                    start += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[head:head+minnum] <span class=\"keyword\">if</span> minnum &lt;= len(s) <span class=\"keyword\">else</span> <span class=\"string\">\"\"</span></span><br></pre></td></tr></table></figure>"},{"title":"Joshua美东探索III--Maine & Acadia National Park","comments":1,"date":"2017-06-03T20:46:26.000Z","updated":"2017-06-03T20:46:26.000Z","_content":"> Time: 2017-05-23~05-25\n> Travel: Rental Car\n\n# 北境\n平潭清秀的阿卡迪亚是密西西比河以东第一个国家公园，没有黄石的奇幻与优胜美地的 俊俏，这里更像是百科全书：港口，沙滩，悬崖，海岛，灯塔，峡湾，山岭，湖泊--一切的户外活动几乎无所不能。平淡中展现的生活恰似远离了中国游客的旋绕。\n<!--more-->\n\n# 缅因\n## 天气\n多变的天气环绕了缅因，自然给予了什么我们就接受什么，缅因人的生活追随着自然，也就像标牌所示的： The Way Life Should Be\n[![IMG_4928.jpg](https://s5.postimg.org/ucy5clohz/IMG_4928.jpg)](https://postimg.org/image/kseippz5v/)\n[![IMG_3168.jpg](https://s5.postimg.org/sb29c3fwn/IMG_3168.jpg)](https://postimg.org/image/tq3u0tgzn/)\n时速80mile在缅因州的高速上  \n\n[https://youtu.be/plicXEq3aHk]()\n## 龙虾\n据说全美90%的龙虾都产自缅因州，此话所言非虚。鲜活的龙虾即刻用海水煮熟，配上薯片，沙拉，新英格兰Clam Chowder，就是一顿绝美的餐食\n[![IMG_3225.jpg](https://s5.postimg.org/wcnxvhxl3/IMG_3225.jpg)](https://postimg.org/image/6h47cavr7/)\n[![SubstandardFullSizeRender 6.jpg](https://s5.postimg.org/9u7ul9zyf/Substandard_Full_Size_Render_6.jpg)](https://postimg.org/image/6ndb1nfib/)\n[![IMG_5089.jpg](https://s5.postimg.org/3y9bk4v9j/IMG_5089.jpg)](https://postimg.org/image/t4a9qywjn/)\n[![IMG_4891.jpg](https://s5.postimg.org/5kyj5d7bb/IMG_4891.jpg)](https://postimg.org/image/a6undpsub/)\n## 灯塔\n波特兰的南面，有一处叫做“伊丽莎白岬角”（Cape Elizabeth）的小镇里，站立着一个著名灯塔，他的名字叫“波特兰灯塔”，是缅因州65个灯塔中最古老且至今仍在运作的灯塔。许多游客，尤其是专业摄影师非常偏爱这里的日出，很多人早早就在此守候，等待太阳露面的那一刻。赏日出、吹海风、听海浪，人生的美好也不过如此了吧！\n[![SubstandardFullSizeRender 3.jpg](https://s5.postimg.org/e22mu11dz/Substandard_Full_Size_Render_3.jpg)](https://postimg.org/image/rizlcwbpf/)\n[![IMG_4935.jpg](https://s5.postimg.org/nl7q9qzif/IMG_4935.jpg)](https://postimg.org/image/3qlonmkar/)\n[![IMG_4940.jpg](https://s5.postimg.org/66ni1h2dj/IMG_4940.jpg)](https://postimg.org/image/xh8t9e5ab/)\n## 阿卡迪亚国家公园\n### 介绍\n这里放一张来自[http://www.acadiamagic.com]()的公园地图，然后简单介绍一下。公园的主要景点集中在岛的东边，入口处有个Hulls Cove Visitor Center，然后再往前开就是围绕着Cadillac Mountain的环线公路（地图上比较粗的黑线），基本上绕着开一圈就能把大部分景点看过来，这里要注意的是环线的右半边一直快到Jordan Pond House是单行，左半边这一小段是双行，所以顺时针开比较合理。Cadillac Mountain有专门一条路可以开上去，山上有停车的地方。岛的西南部分景点较少，比较有名的只有Bass Harbor Light House，从Bar Harbor开过去要半个多小时。大概就是这样了，美国国家公园官方网站[http://www.nps.gov/acad/index.htm]()有大量信息，包括哪条路在整修，哪天关园之类的，去之前一定要去看一下。\n![](http://pic.qyer.com/album/17b/97/740304/index)\n### 感受\nBass Harbor LightHouse\n[![SubstandardFullSizeRender 10.jpg](https://s5.postimg.org/xz3yp8uvb/Substandard_Full_Size_Render_10.jpg)](https://postimg.org/image/7e1ftoshv/)\n[![FullSizeRender 2.jpg](https://s5.postimg.org/7tlwe6t6v/Full_Size_Render_2.jpg)](https://postimg.org/image/tg0wv7rr7/)  \n如美如画的海滩  \n[![SubstandardFullSizeRender 9.jpg](https://s5.postimg.org/n8kxhb6mf/Substandard_Full_Size_Render_9.jpg)](https://postimg.org/image/68218mtkz/)\n明信片般的Jordan Pond House \n[![IMG_5017.jpg](https://s5.postimg.org/jl0kxi91j/IMG_5017.jpg)](https://postimg.org/image/6tmeqzz9f/)\n[![SubstandardFullSizeRender 4.jpg](https://s5.postimg.org/9b2rc08jr/Substandard_Full_Size_Render_4.jpg)](https://postimg.org/image/88sktgpqb/)\n[![IMG_2634.jpg](https://s5.postimg.org/hffguhkcn/IMG_2634.jpg)](https://postimg.org/image/dvtj4ohmr/) \nCadillac Mountain\n[![SubstandardFullSizeRender 7.jpg](https://s5.postimg.org/rbbyge0qv/Substandard_Full_Size_Render_7.jpg)](https://postimg.org/image/bpumwfosj/)\n其他\n[![SubstandardFullSizeRender.jpg]\n(https://s5.postimg.org/vpkfs8bbb/Substandard_Full_Size_Render.jpg)](https://postimg.org/image/bi6zzxdtv/)\n[![SubstandardFullSizeRender 2.jpg](https://s5.postimg.org/p5d2857wn/Substandard_Full_Size_Render_2.jpg)](https://postimg.org/image/ugrysutz7/)\n[![IMG_5003.jpg](https://s5.postimg.org/ninumwvuv/IMG_5003.jpg)](https://postimg.org/image/bgsgsrmmb/)\n[![SubstandardFullSizeRender 8.jpg](https://s5.postimg.org/gd0oy7c5j/Substandard_Full_Size_Render_8.jpg)](https://postimg.org/image/4b5b422wz/)","source":"_posts/TEST.md","raw":"---\ntitle: Joshua美东探索III--Maine & Acadia National Park\ncomments: true\ndate: 2017-06-03 13:46:26\nupdated: 2017-06-03 13:46:26\ncategories: Travel\ntags: \n---\n> Time: 2017-05-23~05-25\n> Travel: Rental Car\n\n# 北境\n平潭清秀的阿卡迪亚是密西西比河以东第一个国家公园，没有黄石的奇幻与优胜美地的 俊俏，这里更像是百科全书：港口，沙滩，悬崖，海岛，灯塔，峡湾，山岭，湖泊--一切的户外活动几乎无所不能。平淡中展现的生活恰似远离了中国游客的旋绕。\n<!--more-->\n\n# 缅因\n## 天气\n多变的天气环绕了缅因，自然给予了什么我们就接受什么，缅因人的生活追随着自然，也就像标牌所示的： The Way Life Should Be\n[![IMG_4928.jpg](https://s5.postimg.org/ucy5clohz/IMG_4928.jpg)](https://postimg.org/image/kseippz5v/)\n[![IMG_3168.jpg](https://s5.postimg.org/sb29c3fwn/IMG_3168.jpg)](https://postimg.org/image/tq3u0tgzn/)\n时速80mile在缅因州的高速上  \n\n[https://youtu.be/plicXEq3aHk]()\n## 龙虾\n据说全美90%的龙虾都产自缅因州，此话所言非虚。鲜活的龙虾即刻用海水煮熟，配上薯片，沙拉，新英格兰Clam Chowder，就是一顿绝美的餐食\n[![IMG_3225.jpg](https://s5.postimg.org/wcnxvhxl3/IMG_3225.jpg)](https://postimg.org/image/6h47cavr7/)\n[![SubstandardFullSizeRender 6.jpg](https://s5.postimg.org/9u7ul9zyf/Substandard_Full_Size_Render_6.jpg)](https://postimg.org/image/6ndb1nfib/)\n[![IMG_5089.jpg](https://s5.postimg.org/3y9bk4v9j/IMG_5089.jpg)](https://postimg.org/image/t4a9qywjn/)\n[![IMG_4891.jpg](https://s5.postimg.org/5kyj5d7bb/IMG_4891.jpg)](https://postimg.org/image/a6undpsub/)\n## 灯塔\n波特兰的南面，有一处叫做“伊丽莎白岬角”（Cape Elizabeth）的小镇里，站立着一个著名灯塔，他的名字叫“波特兰灯塔”，是缅因州65个灯塔中最古老且至今仍在运作的灯塔。许多游客，尤其是专业摄影师非常偏爱这里的日出，很多人早早就在此守候，等待太阳露面的那一刻。赏日出、吹海风、听海浪，人生的美好也不过如此了吧！\n[![SubstandardFullSizeRender 3.jpg](https://s5.postimg.org/e22mu11dz/Substandard_Full_Size_Render_3.jpg)](https://postimg.org/image/rizlcwbpf/)\n[![IMG_4935.jpg](https://s5.postimg.org/nl7q9qzif/IMG_4935.jpg)](https://postimg.org/image/3qlonmkar/)\n[![IMG_4940.jpg](https://s5.postimg.org/66ni1h2dj/IMG_4940.jpg)](https://postimg.org/image/xh8t9e5ab/)\n## 阿卡迪亚国家公园\n### 介绍\n这里放一张来自[http://www.acadiamagic.com]()的公园地图，然后简单介绍一下。公园的主要景点集中在岛的东边，入口处有个Hulls Cove Visitor Center，然后再往前开就是围绕着Cadillac Mountain的环线公路（地图上比较粗的黑线），基本上绕着开一圈就能把大部分景点看过来，这里要注意的是环线的右半边一直快到Jordan Pond House是单行，左半边这一小段是双行，所以顺时针开比较合理。Cadillac Mountain有专门一条路可以开上去，山上有停车的地方。岛的西南部分景点较少，比较有名的只有Bass Harbor Light House，从Bar Harbor开过去要半个多小时。大概就是这样了，美国国家公园官方网站[http://www.nps.gov/acad/index.htm]()有大量信息，包括哪条路在整修，哪天关园之类的，去之前一定要去看一下。\n![](http://pic.qyer.com/album/17b/97/740304/index)\n### 感受\nBass Harbor LightHouse\n[![SubstandardFullSizeRender 10.jpg](https://s5.postimg.org/xz3yp8uvb/Substandard_Full_Size_Render_10.jpg)](https://postimg.org/image/7e1ftoshv/)\n[![FullSizeRender 2.jpg](https://s5.postimg.org/7tlwe6t6v/Full_Size_Render_2.jpg)](https://postimg.org/image/tg0wv7rr7/)  \n如美如画的海滩  \n[![SubstandardFullSizeRender 9.jpg](https://s5.postimg.org/n8kxhb6mf/Substandard_Full_Size_Render_9.jpg)](https://postimg.org/image/68218mtkz/)\n明信片般的Jordan Pond House \n[![IMG_5017.jpg](https://s5.postimg.org/jl0kxi91j/IMG_5017.jpg)](https://postimg.org/image/6tmeqzz9f/)\n[![SubstandardFullSizeRender 4.jpg](https://s5.postimg.org/9b2rc08jr/Substandard_Full_Size_Render_4.jpg)](https://postimg.org/image/88sktgpqb/)\n[![IMG_2634.jpg](https://s5.postimg.org/hffguhkcn/IMG_2634.jpg)](https://postimg.org/image/dvtj4ohmr/) \nCadillac Mountain\n[![SubstandardFullSizeRender 7.jpg](https://s5.postimg.org/rbbyge0qv/Substandard_Full_Size_Render_7.jpg)](https://postimg.org/image/bpumwfosj/)\n其他\n[![SubstandardFullSizeRender.jpg]\n(https://s5.postimg.org/vpkfs8bbb/Substandard_Full_Size_Render.jpg)](https://postimg.org/image/bi6zzxdtv/)\n[![SubstandardFullSizeRender 2.jpg](https://s5.postimg.org/p5d2857wn/Substandard_Full_Size_Render_2.jpg)](https://postimg.org/image/ugrysutz7/)\n[![IMG_5003.jpg](https://s5.postimg.org/ninumwvuv/IMG_5003.jpg)](https://postimg.org/image/bgsgsrmmb/)\n[![SubstandardFullSizeRender 8.jpg](https://s5.postimg.org/gd0oy7c5j/Substandard_Full_Size_Render_8.jpg)](https://postimg.org/image/4b5b422wz/)","slug":"TEST","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfb001om2caynnlob9e","content":"<blockquote>\n<p>Time: 2017-05-23~05-25<br>Travel: Rental Car</p>\n</blockquote>\n<h1 id=\"北境\"><a href=\"#北境\" class=\"headerlink\" title=\"北境\"></a>北境</h1><p>平潭清秀的阿卡迪亚是密西西比河以东第一个国家公园，没有黄石的奇幻与优胜美地的 俊俏，这里更像是百科全书：港口，沙滩，悬崖，海岛，灯塔，峡湾，山岭，湖泊–一切的户外活动几乎无所不能。平淡中展现的生活恰似远离了中国游客的旋绕。<br><a id=\"more\"></a></p>\n<h1 id=\"缅因\"><a href=\"#缅因\" class=\"headerlink\" title=\"缅因\"></a>缅因</h1><h2 id=\"天气\"><a href=\"#天气\" class=\"headerlink\" title=\"天气\"></a>天气</h2><p>多变的天气环绕了缅因，自然给予了什么我们就接受什么，缅因人的生活追随着自然，也就像标牌所示的： The Way Life Should Be<br><a href=\"https://postimg.org/image/kseippz5v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ucy5clohz/IMG_4928.jpg\" alt=\"IMG_4928.jpg\"></a><br><a href=\"https://postimg.org/image/tq3u0tgzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/sb29c3fwn/IMG_3168.jpg\" alt=\"IMG_3168.jpg\"></a><br>时速80mile在缅因州的高速上  </p>\n<p><a href=\"\">https://youtu.be/plicXEq3aHk</a></p>\n<h2 id=\"龙虾\"><a href=\"#龙虾\" class=\"headerlink\" title=\"龙虾\"></a>龙虾</h2><p>据说全美90%的龙虾都产自缅因州，此话所言非虚。鲜活的龙虾即刻用海水煮熟，配上薯片，沙拉，新英格兰Clam Chowder，就是一顿绝美的餐食<br><a href=\"https://postimg.org/image/6h47cavr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wcnxvhxl3/IMG_3225.jpg\" alt=\"IMG_3225.jpg\"></a><br><a href=\"https://postimg.org/image/6ndb1nfib/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9u7ul9zyf/Substandard_Full_Size_Render_6.jpg\" alt=\"SubstandardFullSizeRender 6.jpg\"></a><br><a href=\"https://postimg.org/image/t4a9qywjn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3y9bk4v9j/IMG_5089.jpg\" alt=\"IMG_5089.jpg\"></a><br><a href=\"https://postimg.org/image/a6undpsub/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5kyj5d7bb/IMG_4891.jpg\" alt=\"IMG_4891.jpg\"></a></p>\n<h2 id=\"灯塔\"><a href=\"#灯塔\" class=\"headerlink\" title=\"灯塔\"></a>灯塔</h2><p>波特兰的南面，有一处叫做“伊丽莎白岬角”（Cape Elizabeth）的小镇里，站立着一个著名灯塔，他的名字叫“波特兰灯塔”，是缅因州65个灯塔中最古老且至今仍在运作的灯塔。许多游客，尤其是专业摄影师非常偏爱这里的日出，很多人早早就在此守候，等待太阳露面的那一刻。赏日出、吹海风、听海浪，人生的美好也不过如此了吧！<br><a href=\"https://postimg.org/image/rizlcwbpf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/e22mu11dz/Substandard_Full_Size_Render_3.jpg\" alt=\"SubstandardFullSizeRender 3.jpg\"></a><br><a href=\"https://postimg.org/image/3qlonmkar/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/nl7q9qzif/IMG_4935.jpg\" alt=\"IMG_4935.jpg\"></a><br><a href=\"https://postimg.org/image/xh8t9e5ab/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/66ni1h2dj/IMG_4940.jpg\" alt=\"IMG_4940.jpg\"></a></p>\n<h2 id=\"阿卡迪亚国家公园\"><a href=\"#阿卡迪亚国家公园\" class=\"headerlink\" title=\"阿卡迪亚国家公园\"></a>阿卡迪亚国家公园</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>这里放一张来自<a href=\"\">http://www.acadiamagic.com</a>的公园地图，然后简单介绍一下。公园的主要景点集中在岛的东边，入口处有个Hulls Cove Visitor Center，然后再往前开就是围绕着Cadillac Mountain的环线公路（地图上比较粗的黑线），基本上绕着开一圈就能把大部分景点看过来，这里要注意的是环线的右半边一直快到Jordan Pond House是单行，左半边这一小段是双行，所以顺时针开比较合理。Cadillac Mountain有专门一条路可以开上去，山上有停车的地方。岛的西南部分景点较少，比较有名的只有Bass Harbor Light House，从Bar Harbor开过去要半个多小时。大概就是这样了，美国国家公园官方网站<a href=\"\">http://www.nps.gov/acad/index.htm</a>有大量信息，包括哪条路在整修，哪天关园之类的，去之前一定要去看一下。<br><img src=\"http://pic.qyer.com/album/17b/97/740304/index\" alt=\"\"></p>\n<h3 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h3><p>Bass Harbor LightHouse<br><a href=\"https://postimg.org/image/7e1ftoshv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/xz3yp8uvb/Substandard_Full_Size_Render_10.jpg\" alt=\"SubstandardFullSizeRender 10.jpg\"></a><br><a href=\"https://postimg.org/image/tg0wv7rr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7tlwe6t6v/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"></a><br>如美如画的海滩<br><a href=\"https://postimg.org/image/68218mtkz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/n8kxhb6mf/Substandard_Full_Size_Render_9.jpg\" alt=\"SubstandardFullSizeRender 9.jpg\"></a><br>明信片般的Jordan Pond House<br><a href=\"https://postimg.org/image/6tmeqzz9f/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jl0kxi91j/IMG_5017.jpg\" alt=\"IMG_5017.jpg\"></a><br><a href=\"https://postimg.org/image/88sktgpqb/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9b2rc08jr/Substandard_Full_Size_Render_4.jpg\" alt=\"SubstandardFullSizeRender 4.jpg\"></a><br><a href=\"https://postimg.org/image/dvtj4ohmr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hffguhkcn/IMG_2634.jpg\" alt=\"IMG_2634.jpg\"></a><br>Cadillac Mountain<br><a href=\"https://postimg.org/image/bpumwfosj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/rbbyge0qv/Substandard_Full_Size_Render_7.jpg\" alt=\"SubstandardFullSizeRender 7.jpg\"></a><br>其他<br><a href=\"https://postimg.org/image/bi6zzxdtv/\" target=\"_blank\" rel=\"noopener\">![SubstandardFullSizeRender.jpg]<br>(https://s5.postimg.org/vpkfs8bbb/Substandard_Full_Size_Render.jpg)</a><br><a href=\"https://postimg.org/image/ugrysutz7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/p5d2857wn/Substandard_Full_Size_Render_2.jpg\" alt=\"SubstandardFullSizeRender 2.jpg\"></a><br><a href=\"https://postimg.org/image/bgsgsrmmb/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ninumwvuv/IMG_5003.jpg\" alt=\"IMG_5003.jpg\"></a><br><a href=\"https://postimg.org/image/4b5b422wz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gd0oy7c5j/Substandard_Full_Size_Render_8.jpg\" alt=\"SubstandardFullSizeRender 8.jpg\"></a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Time: 2017-05-23~05-25<br>Travel: Rental Car</p>\n</blockquote>\n<h1 id=\"北境\"><a href=\"#北境\" class=\"headerlink\" title=\"北境\"></a>北境</h1><p>平潭清秀的阿卡迪亚是密西西比河以东第一个国家公园，没有黄石的奇幻与优胜美地的 俊俏，这里更像是百科全书：港口，沙滩，悬崖，海岛，灯塔，峡湾，山岭，湖泊–一切的户外活动几乎无所不能。平淡中展现的生活恰似远离了中国游客的旋绕。<br>","more":"</p>\n<h1 id=\"缅因\"><a href=\"#缅因\" class=\"headerlink\" title=\"缅因\"></a>缅因</h1><h2 id=\"天气\"><a href=\"#天气\" class=\"headerlink\" title=\"天气\"></a>天气</h2><p>多变的天气环绕了缅因，自然给予了什么我们就接受什么，缅因人的生活追随着自然，也就像标牌所示的： The Way Life Should Be<br><a href=\"https://postimg.org/image/kseippz5v/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ucy5clohz/IMG_4928.jpg\" alt=\"IMG_4928.jpg\"></a><br><a href=\"https://postimg.org/image/tq3u0tgzn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/sb29c3fwn/IMG_3168.jpg\" alt=\"IMG_3168.jpg\"></a><br>时速80mile在缅因州的高速上  </p>\n<p><a href=\"\">https://youtu.be/plicXEq3aHk</a></p>\n<h2 id=\"龙虾\"><a href=\"#龙虾\" class=\"headerlink\" title=\"龙虾\"></a>龙虾</h2><p>据说全美90%的龙虾都产自缅因州，此话所言非虚。鲜活的龙虾即刻用海水煮熟，配上薯片，沙拉，新英格兰Clam Chowder，就是一顿绝美的餐食<br><a href=\"https://postimg.org/image/6h47cavr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/wcnxvhxl3/IMG_3225.jpg\" alt=\"IMG_3225.jpg\"></a><br><a href=\"https://postimg.org/image/6ndb1nfib/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9u7ul9zyf/Substandard_Full_Size_Render_6.jpg\" alt=\"SubstandardFullSizeRender 6.jpg\"></a><br><a href=\"https://postimg.org/image/t4a9qywjn/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/3y9bk4v9j/IMG_5089.jpg\" alt=\"IMG_5089.jpg\"></a><br><a href=\"https://postimg.org/image/a6undpsub/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/5kyj5d7bb/IMG_4891.jpg\" alt=\"IMG_4891.jpg\"></a></p>\n<h2 id=\"灯塔\"><a href=\"#灯塔\" class=\"headerlink\" title=\"灯塔\"></a>灯塔</h2><p>波特兰的南面，有一处叫做“伊丽莎白岬角”（Cape Elizabeth）的小镇里，站立着一个著名灯塔，他的名字叫“波特兰灯塔”，是缅因州65个灯塔中最古老且至今仍在运作的灯塔。许多游客，尤其是专业摄影师非常偏爱这里的日出，很多人早早就在此守候，等待太阳露面的那一刻。赏日出、吹海风、听海浪，人生的美好也不过如此了吧！<br><a href=\"https://postimg.org/image/rizlcwbpf/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/e22mu11dz/Substandard_Full_Size_Render_3.jpg\" alt=\"SubstandardFullSizeRender 3.jpg\"></a><br><a href=\"https://postimg.org/image/3qlonmkar/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/nl7q9qzif/IMG_4935.jpg\" alt=\"IMG_4935.jpg\"></a><br><a href=\"https://postimg.org/image/xh8t9e5ab/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/66ni1h2dj/IMG_4940.jpg\" alt=\"IMG_4940.jpg\"></a></p>\n<h2 id=\"阿卡迪亚国家公园\"><a href=\"#阿卡迪亚国家公园\" class=\"headerlink\" title=\"阿卡迪亚国家公园\"></a>阿卡迪亚国家公园</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>这里放一张来自<a href=\"\">http://www.acadiamagic.com</a>的公园地图，然后简单介绍一下。公园的主要景点集中在岛的东边，入口处有个Hulls Cove Visitor Center，然后再往前开就是围绕着Cadillac Mountain的环线公路（地图上比较粗的黑线），基本上绕着开一圈就能把大部分景点看过来，这里要注意的是环线的右半边一直快到Jordan Pond House是单行，左半边这一小段是双行，所以顺时针开比较合理。Cadillac Mountain有专门一条路可以开上去，山上有停车的地方。岛的西南部分景点较少，比较有名的只有Bass Harbor Light House，从Bar Harbor开过去要半个多小时。大概就是这样了，美国国家公园官方网站<a href=\"\">http://www.nps.gov/acad/index.htm</a>有大量信息，包括哪条路在整修，哪天关园之类的，去之前一定要去看一下。<br><img src=\"http://pic.qyer.com/album/17b/97/740304/index\" alt=\"\"></p>\n<h3 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h3><p>Bass Harbor LightHouse<br><a href=\"https://postimg.org/image/7e1ftoshv/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/xz3yp8uvb/Substandard_Full_Size_Render_10.jpg\" alt=\"SubstandardFullSizeRender 10.jpg\"></a><br><a href=\"https://postimg.org/image/tg0wv7rr7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/7tlwe6t6v/Full_Size_Render_2.jpg\" alt=\"FullSizeRender 2.jpg\"></a><br>如美如画的海滩<br><a href=\"https://postimg.org/image/68218mtkz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/n8kxhb6mf/Substandard_Full_Size_Render_9.jpg\" alt=\"SubstandardFullSizeRender 9.jpg\"></a><br>明信片般的Jordan Pond House<br><a href=\"https://postimg.org/image/6tmeqzz9f/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/jl0kxi91j/IMG_5017.jpg\" alt=\"IMG_5017.jpg\"></a><br><a href=\"https://postimg.org/image/88sktgpqb/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/9b2rc08jr/Substandard_Full_Size_Render_4.jpg\" alt=\"SubstandardFullSizeRender 4.jpg\"></a><br><a href=\"https://postimg.org/image/dvtj4ohmr/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/hffguhkcn/IMG_2634.jpg\" alt=\"IMG_2634.jpg\"></a><br>Cadillac Mountain<br><a href=\"https://postimg.org/image/bpumwfosj/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/rbbyge0qv/Substandard_Full_Size_Render_7.jpg\" alt=\"SubstandardFullSizeRender 7.jpg\"></a><br>其他<br><a href=\"https://postimg.org/image/bi6zzxdtv/\" target=\"_blank\" rel=\"noopener\">![SubstandardFullSizeRender.jpg]<br>(https://s5.postimg.org/vpkfs8bbb/Substandard_Full_Size_Render.jpg)</a><br><a href=\"https://postimg.org/image/ugrysutz7/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/p5d2857wn/Substandard_Full_Size_Render_2.jpg\" alt=\"SubstandardFullSizeRender 2.jpg\"></a><br><a href=\"https://postimg.org/image/bgsgsrmmb/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/ninumwvuv/IMG_5003.jpg\" alt=\"IMG_5003.jpg\"></a><br><a href=\"https://postimg.org/image/4b5b422wz/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s5.postimg.org/gd0oy7c5j/Substandard_Full_Size_Render_8.jpg\" alt=\"SubstandardFullSizeRender 8.jpg\"></a></p>"},{"title":"TopLogicalSort 总结","comments":1,"date":"2018-03-11T20:39:51.000Z","updated":"2018-03-20T20:39:51.000Z","_content":"# 拓扑排序\n拓扑排序适合于求解相关联的依赖状态，比如0依赖于1，2; 2 依赖于3\n这样就类似于BFS的模版，用一个queue来维持；然后把各个链接用图的形式连接起来，从入度为0的点开始，遍历每一个字节点也就是每一个出度；同时对应的入度-1， 如果对应的节点入度为0，证明该节点的依赖关系已经被计算过，从而加入Queue进行下一步操作\n## 题目\n模版\n\n```python\noutdegree = [[] for _ in range(numCourses)]\nindegree = [0 for _ in range(numCourses)]\n\nqueue = []\n# find zero indegree\n\nfor i in indegree:\n\tif not i:\n\tqueue.append(i) \n\t\ncount = 0\nwhile queue:\n\tnode = queue.pop(0)\n\tcount += 1\n\tfor succ in outdegree[course]:\n\t\tindegree[succ] -= 1\n\t\t# no indegree\n\t\tif indegree[succ] == 0:\n\t\t\tqueue.append(succ)\n```\n<!--more-->\n### 207. Course Schedule\n\n```python\nclass Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        outdegree = [[] for _ in range(numCourses)]\n        indegree = [0] * numCourses\n        \n        for succ, pre in prerequisites:\n            outdegree[pre].append(succ)\n            indegree[succ] += 1\n           \n        queue = []\n        # find start from all course - indegree == 0\n        for i in range(numCourses):\n            if indegree[i] == 0:\n                queue.append(i)\n                \n        count = 0\n        \n        while queue:\n            course = queue.pop(0)\n            count += 1\n            for succ in outdegree[course]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n                    \n        # if we find all course that are equal to the given course\n        return count == numCourses\n        \n```\n### 210. Course Schedule II\n区别就是输出list\n\n```python\nclass Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        outdegree = [[] for _ in range(numCourses)]\n        indegree = [0] * numCourses\n        \n        for succ, pre in prerequisites:\n            outdegree[pre].append(succ)\n            indegree[succ] += 1\n        \n        queue = []\n        for i in range(numCourses):\n            if indegree[i] == 0:\n                queue.append(i)\n                \n        res = []\n        \n        while queue:\n            pre = queue.pop(0)\n            res.append(pre)\n            for succ in outdegree[pre]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n        return res if len(res) == numCourses else []\n```\n### 802. Find Eventual Safe States\n也是一道可以用这种方法做的题，就是经过拓扑排序后出度为0的点输出出来就好。\n\n```python\nclass Solution(object):\n    def eventualSafeNodes(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        outdegree = [0] * len(graph)\n        indegree = [[] for _ in range(len(graph))]\n\n        for i in range(len(graph)):\n            outdegree[i] = len(graph[i])\n            for j in range(len(graph[i])):\n                indegree[graph[i][j]].append(i)\n                \n        queue = []\n        for i in range(len(outdegree)):\n            if outdegree[i] == 0:\n                queue.append(i)\n        res = []   \n        while queue:\n            node = queue.pop(0)\n            res.append(node)\n            if indegree[node]:\n                for rest in indegree[node]:\n                    outdegree[rest] -= 1\n                    if outdegree[rest] == 0:\n                        queue.append(rest)\n                    \n        return sorted(res)\n```\n### 444. Sequence Reconstruction\n这道题有两个点，一个是入度为0的只能有一个；二是如何控制只有一个数字的list-虽说对结果没啥影响，不过还要处理这么一个case[1],[[1],[1],[1]] 挺无聊的\n\n```python\nclass Solution(object):\n    def sequenceReconstruction(self, org, seqs):\n        \"\"\"\n        :type org: List[int]\n        :type seqs: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        indegree = collections.defaultdict(int)\n        outdegree = collections.defaultdict(list)\n        \n        st = set()\n        \n        for seq in seqs:\n            # union set\n            st |= set(seq)\n            if len(seq) == 1:\n                if seq[0] not in indegree:\n                    indegree[seq[0]] = 0\n                continue\n            for i in range(len(seq)-1):\n                if seq[i] not in indegree:\n                    indegree[seq[i]] = 0\n                if seq[i+1] not in outdegree[seq[i]]:\n                    outdegree[seq[i]].append(seq[i+1])\n                    indegree[seq[i+1]] += 1\n        \n        zero_degree = 0\n        queue = []\n        \n        for each in indegree:\n            if indegree[each] == 0:\n                queue.append(each)\n                zero_degree += 1\n                # unique\n                if zero_degree > 1:\n                    return False\n        \n        res = []\n        \n        while queue:\n            prev = queue.pop(0)\n            res.append(prev)\n            count = 0\n            for succ in outdegree[prev]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    count += 1\n                    queue.append(succ)\n                    # not unique\n                    if count > 1:\n                        return False\n            # if left\n            if outdegree[prev] and not count:\n                return False\n        return res == org and set(org) == set(st)\n```\n### 269. Alien Dictionary\nHard 难度，一方面是构建dictionary的时候很繁琐.  \n每次判断完后要del掉outdegree所对应pop出来的元素，直到没有出度，也就是全部遍历完了才成功。因为order的长度没有给出，所以不能用len(order) == len(origin) 来判断\n\n```python\nclass Solution(object):\n    def alienOrder(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        res = []\n        indegree, outdegree = collections.defaultdict(int), collections.defaultdict(list)\n        \n        queue = []\n        \n        for i in range(1, len(words)):\n            # consider play and playing\n            if len(words[i-1]) > len(words[i]) and words[i-1][:len(words[i])] == words[i]:\n                continue\n            self.buildToplogicalSort(words[i-1], words[i], indegree, outdegree)\n            \n        # build number of char\n        nodes = set()\n        for word in words:\n            for char in word:\n                nodes.add(char)\n                \n        for char in nodes:\n            if indegree[char] == 0:\n            #if char not in indegree:\n                queue.append(char)\n          \n        while queue:\n            prev = queue.pop(0)\n            res.append(prev)\n            # we need to check outdegree because we del outdegree if we find\n        \n            for succ in outdegree[prev]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n            # del outdegree for this char\n            del(outdegree[prev])\n         \n        if outdegree:\n            return \"\"\n        return \"\".join(res)\n        \n    def buildToplogicalSort(self, word1, word2, indegree, outdegree):\n        length = min(len(word1), len(word2))\n        for i in range(length):\n            if word1[i] != word2[i]:\n                # init pre char\n                # if word1[i] not in outdegree:\n                #     outdegree[word1[i]] = set()\n                if word2[i] not in outdegree[word1[i]]:\n                    indegree[word2[i]] += 1\n                    outdegree[word1[i]].append(word2[i])\n                # only contain two char is not the same its order after that is irrelevent\n                break\n\n```","source":"_posts/TopLogicalSort-总结.md","raw":"---\ntitle: TopLogicalSort 总结\ncomments: true\ndate: 2018-03-11 13:39:51\nupdated: 2018-03-20 13:39:51\ncategories: Leetcode\ntags: TopLogicalSort\n---\n# 拓扑排序\n拓扑排序适合于求解相关联的依赖状态，比如0依赖于1，2; 2 依赖于3\n这样就类似于BFS的模版，用一个queue来维持；然后把各个链接用图的形式连接起来，从入度为0的点开始，遍历每一个字节点也就是每一个出度；同时对应的入度-1， 如果对应的节点入度为0，证明该节点的依赖关系已经被计算过，从而加入Queue进行下一步操作\n## 题目\n模版\n\n```python\noutdegree = [[] for _ in range(numCourses)]\nindegree = [0 for _ in range(numCourses)]\n\nqueue = []\n# find zero indegree\n\nfor i in indegree:\n\tif not i:\n\tqueue.append(i) \n\t\ncount = 0\nwhile queue:\n\tnode = queue.pop(0)\n\tcount += 1\n\tfor succ in outdegree[course]:\n\t\tindegree[succ] -= 1\n\t\t# no indegree\n\t\tif indegree[succ] == 0:\n\t\t\tqueue.append(succ)\n```\n<!--more-->\n### 207. Course Schedule\n\n```python\nclass Solution(object):\n    def canFinish(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        outdegree = [[] for _ in range(numCourses)]\n        indegree = [0] * numCourses\n        \n        for succ, pre in prerequisites:\n            outdegree[pre].append(succ)\n            indegree[succ] += 1\n           \n        queue = []\n        # find start from all course - indegree == 0\n        for i in range(numCourses):\n            if indegree[i] == 0:\n                queue.append(i)\n                \n        count = 0\n        \n        while queue:\n            course = queue.pop(0)\n            count += 1\n            for succ in outdegree[course]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n                    \n        # if we find all course that are equal to the given course\n        return count == numCourses\n        \n```\n### 210. Course Schedule II\n区别就是输出list\n\n```python\nclass Solution(object):\n    def findOrder(self, numCourses, prerequisites):\n        \"\"\"\n        :type numCourses: int\n        :type prerequisites: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        outdegree = [[] for _ in range(numCourses)]\n        indegree = [0] * numCourses\n        \n        for succ, pre in prerequisites:\n            outdegree[pre].append(succ)\n            indegree[succ] += 1\n        \n        queue = []\n        for i in range(numCourses):\n            if indegree[i] == 0:\n                queue.append(i)\n                \n        res = []\n        \n        while queue:\n            pre = queue.pop(0)\n            res.append(pre)\n            for succ in outdegree[pre]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n        return res if len(res) == numCourses else []\n```\n### 802. Find Eventual Safe States\n也是一道可以用这种方法做的题，就是经过拓扑排序后出度为0的点输出出来就好。\n\n```python\nclass Solution(object):\n    def eventualSafeNodes(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        outdegree = [0] * len(graph)\n        indegree = [[] for _ in range(len(graph))]\n\n        for i in range(len(graph)):\n            outdegree[i] = len(graph[i])\n            for j in range(len(graph[i])):\n                indegree[graph[i][j]].append(i)\n                \n        queue = []\n        for i in range(len(outdegree)):\n            if outdegree[i] == 0:\n                queue.append(i)\n        res = []   \n        while queue:\n            node = queue.pop(0)\n            res.append(node)\n            if indegree[node]:\n                for rest in indegree[node]:\n                    outdegree[rest] -= 1\n                    if outdegree[rest] == 0:\n                        queue.append(rest)\n                    \n        return sorted(res)\n```\n### 444. Sequence Reconstruction\n这道题有两个点，一个是入度为0的只能有一个；二是如何控制只有一个数字的list-虽说对结果没啥影响，不过还要处理这么一个case[1],[[1],[1],[1]] 挺无聊的\n\n```python\nclass Solution(object):\n    def sequenceReconstruction(self, org, seqs):\n        \"\"\"\n        :type org: List[int]\n        :type seqs: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        indegree = collections.defaultdict(int)\n        outdegree = collections.defaultdict(list)\n        \n        st = set()\n        \n        for seq in seqs:\n            # union set\n            st |= set(seq)\n            if len(seq) == 1:\n                if seq[0] not in indegree:\n                    indegree[seq[0]] = 0\n                continue\n            for i in range(len(seq)-1):\n                if seq[i] not in indegree:\n                    indegree[seq[i]] = 0\n                if seq[i+1] not in outdegree[seq[i]]:\n                    outdegree[seq[i]].append(seq[i+1])\n                    indegree[seq[i+1]] += 1\n        \n        zero_degree = 0\n        queue = []\n        \n        for each in indegree:\n            if indegree[each] == 0:\n                queue.append(each)\n                zero_degree += 1\n                # unique\n                if zero_degree > 1:\n                    return False\n        \n        res = []\n        \n        while queue:\n            prev = queue.pop(0)\n            res.append(prev)\n            count = 0\n            for succ in outdegree[prev]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    count += 1\n                    queue.append(succ)\n                    # not unique\n                    if count > 1:\n                        return False\n            # if left\n            if outdegree[prev] and not count:\n                return False\n        return res == org and set(org) == set(st)\n```\n### 269. Alien Dictionary\nHard 难度，一方面是构建dictionary的时候很繁琐.  \n每次判断完后要del掉outdegree所对应pop出来的元素，直到没有出度，也就是全部遍历完了才成功。因为order的长度没有给出，所以不能用len(order) == len(origin) 来判断\n\n```python\nclass Solution(object):\n    def alienOrder(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        res = []\n        indegree, outdegree = collections.defaultdict(int), collections.defaultdict(list)\n        \n        queue = []\n        \n        for i in range(1, len(words)):\n            # consider play and playing\n            if len(words[i-1]) > len(words[i]) and words[i-1][:len(words[i])] == words[i]:\n                continue\n            self.buildToplogicalSort(words[i-1], words[i], indegree, outdegree)\n            \n        # build number of char\n        nodes = set()\n        for word in words:\n            for char in word:\n                nodes.add(char)\n                \n        for char in nodes:\n            if indegree[char] == 0:\n            #if char not in indegree:\n                queue.append(char)\n          \n        while queue:\n            prev = queue.pop(0)\n            res.append(prev)\n            # we need to check outdegree because we del outdegree if we find\n        \n            for succ in outdegree[prev]:\n                indegree[succ] -= 1\n                if indegree[succ] == 0:\n                    queue.append(succ)\n            # del outdegree for this char\n            del(outdegree[prev])\n         \n        if outdegree:\n            return \"\"\n        return \"\".join(res)\n        \n    def buildToplogicalSort(self, word1, word2, indegree, outdegree):\n        length = min(len(word1), len(word2))\n        for i in range(length):\n            if word1[i] != word2[i]:\n                # init pre char\n                # if word1[i] not in outdegree:\n                #     outdegree[word1[i]] = set()\n                if word2[i] not in outdegree[word1[i]]:\n                    indegree[word2[i]] += 1\n                    outdegree[word1[i]].append(word2[i])\n                # only contain two char is not the same its order after that is irrelevent\n                break\n\n```","slug":"TopLogicalSort-总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfd001tm2cazwy063xx","content":"<h1 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h1><p>拓扑排序适合于求解相关联的依赖状态，比如0依赖于1，2; 2 依赖于3<br>这样就类似于BFS的模版，用一个queue来维持；然后把各个链接用图的形式连接起来，从入度为0的点开始，遍历每一个字节点也就是每一个出度；同时对应的入度-1， 如果对应的节点入度为0，证明该节点的依赖关系已经被计算过，从而加入Queue进行下一步操作</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>模版</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">indegree = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\"></span><br><span class=\"line\">queue = []</span><br><span class=\"line\"><span class=\"comment\"># find zero indegree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i:</span><br><span class=\"line\">\tqueue.append(i) </span><br><span class=\"line\">\t</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\tnode = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[course]:</span><br><span class=\"line\">\t\tindegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># no indegree</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tqueue.append(succ)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"207-Course-Schedule\"><a href=\"#207-Course-Schedule\" class=\"headerlink\" title=\"207. Course Schedule\"></a>207. Course Schedule</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canFinish</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">        indegree = [<span class=\"number\">0</span>] * numCourses</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> succ, pre <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            outdegree[pre].append(succ)</span><br><span class=\"line\">            indegree[succ] += <span class=\"number\">1</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"comment\"># find start from all course - indegree == 0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            course = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[course]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"comment\"># if we find all course that are equal to the given course</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count == numCourses</span><br></pre></td></tr></table></figure>\n<h3 id=\"210-Course-Schedule-II\"><a href=\"#210-Course-Schedule-II\" class=\"headerlink\" title=\"210. Course Schedule II\"></a>210. Course Schedule II</h3><p>区别就是输出list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findOrder</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">        indegree = [<span class=\"number\">0</span>] * numCourses</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> succ, pre <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            outdegree[pre].append(succ)</span><br><span class=\"line\">            indegree[succ] += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            pre = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(pre)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[pre]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res <span class=\"keyword\">if</span> len(res) == numCourses <span class=\"keyword\">else</span> []</span><br></pre></td></tr></table></figure>\n<h3 id=\"802-Find-Eventual-Safe-States\"><a href=\"#802-Find-Eventual-Safe-States\" class=\"headerlink\" title=\"802. Find Eventual Safe States\"></a>802. Find Eventual Safe States</h3><p>也是一道可以用这种方法做的题，就是经过拓扑排序后出度为0的点输出出来就好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eventualSafeNodes</span><span class=\"params\">(self, graph)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type graph: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [<span class=\"number\">0</span>] * len(graph)</span><br><span class=\"line\">        indegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(graph))]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(graph)):</span><br><span class=\"line\">            outdegree[i] = len(graph[i])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(graph[i])):</span><br><span class=\"line\">                indegree[graph[i][j]].append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(outdegree)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> outdegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">        res = []   </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(node)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[node]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> rest <span class=\"keyword\">in</span> indegree[node]:</span><br><span class=\"line\">                    outdegree[rest] -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> outdegree[rest] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        queue.append(rest)</span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sorted(res)</span><br></pre></td></tr></table></figure>\n<h3 id=\"444-Sequence-Reconstruction\"><a href=\"#444-Sequence-Reconstruction\" class=\"headerlink\" title=\"444. Sequence Reconstruction\"></a>444. Sequence Reconstruction</h3><p>这道题有两个点，一个是入度为0的只能有一个；二是如何控制只有一个数字的list-虽说对结果没啥影响，不过还要处理这么一个case[1],[[1],[1],[1]] 挺无聊的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sequenceReconstruction</span><span class=\"params\">(self, org, seqs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type org: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type seqs: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        indegree = collections.defaultdict(int)</span><br><span class=\"line\">        outdegree = collections.defaultdict(list)</span><br><span class=\"line\">        </span><br><span class=\"line\">        st = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> seq <span class=\"keyword\">in</span> seqs:</span><br><span class=\"line\">            <span class=\"comment\"># union set</span></span><br><span class=\"line\">            st |= set(seq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(seq) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">                    indegree[seq[<span class=\"number\">0</span>]] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(seq)<span class=\"number\">-1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">                    indegree[seq[i]] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> outdegree[seq[i]]:</span><br><span class=\"line\">                    outdegree[seq[i]].append(seq[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    indegree[seq[i+<span class=\"number\">1</span>]] += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        zero_degree = <span class=\"number\">0</span></span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[each] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(each)</span><br><span class=\"line\">                zero_degree += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># unique</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> zero_degree &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            prev = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(prev)</span><br><span class=\"line\">            count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[prev]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    count += <span class=\"number\">1</span></span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">                    <span class=\"comment\"># not unique</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> count &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"comment\"># if left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> outdegree[prev] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> count:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res == org <span class=\"keyword\">and</span> set(org) == set(st)</span><br></pre></td></tr></table></figure>\n<h3 id=\"269-Alien-Dictionary\"><a href=\"#269-Alien-Dictionary\" class=\"headerlink\" title=\"269. Alien Dictionary\"></a>269. Alien Dictionary</h3><p>Hard 难度，一方面是构建dictionary的时候很繁琐.<br>每次判断完后要del掉outdegree所对应pop出来的元素，直到没有出度，也就是全部遍历完了才成功。因为order的长度没有给出，所以不能用len(order) == len(origin) 来判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">alienOrder</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        indegree, outdegree = collections.defaultdict(int), collections.defaultdict(list)</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(words)):</span><br><span class=\"line\">            <span class=\"comment\"># consider play and playing</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(words[i<span class=\"number\">-1</span>]) &gt; len(words[i]) <span class=\"keyword\">and</span> words[i<span class=\"number\">-1</span>][:len(words[i])] == words[i]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.buildToplogicalSort(words[i<span class=\"number\">-1</span>], words[i], indegree, outdegree)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># build number of char</span></span><br><span class=\"line\">        nodes = set()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                nodes.add(char)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> nodes:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[char] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">#if char not in indegree:</span></span><br><span class=\"line\">                queue.append(char)</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            prev = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(prev)</span><br><span class=\"line\">            <span class=\"comment\"># we need to check outdegree because we del outdegree if we find</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[prev]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">            <span class=\"comment\"># del outdegree for this char</span></span><br><span class=\"line\">            <span class=\"keyword\">del</span>(outdegree[prev])</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span> outdegree:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(res)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildToplogicalSort</span><span class=\"params\">(self, word1, word2, indegree, outdegree)</span>:</span></span><br><span class=\"line\">        length = min(len(word1), len(word2))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word1[i] != word2[i]:</span><br><span class=\"line\">                <span class=\"comment\"># init pre char</span></span><br><span class=\"line\">                <span class=\"comment\"># if word1[i] not in outdegree:</span></span><br><span class=\"line\">                <span class=\"comment\">#     outdegree[word1[i]] = set()</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> word2[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> outdegree[word1[i]]:</span><br><span class=\"line\">                    indegree[word2[i]] += <span class=\"number\">1</span></span><br><span class=\"line\">                    outdegree[word1[i]].append(word2[i])</span><br><span class=\"line\">                <span class=\"comment\"># only contain two char is not the same its order after that is irrelevent</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h1><p>拓扑排序适合于求解相关联的依赖状态，比如0依赖于1，2; 2 依赖于3<br>这样就类似于BFS的模版，用一个queue来维持；然后把各个链接用图的形式连接起来，从入度为0的点开始，遍历每一个字节点也就是每一个出度；同时对应的入度-1， 如果对应的节点入度为0，证明该节点的依赖关系已经被计算过，从而加入Queue进行下一步操作</p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>模版</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">indegree = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\"></span><br><span class=\"line\">queue = []</span><br><span class=\"line\"><span class=\"comment\"># find zero indegree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i:</span><br><span class=\"line\">\tqueue.append(i) </span><br><span class=\"line\">\t</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">\tnode = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[course]:</span><br><span class=\"line\">\t\tindegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># no indegree</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tqueue.append(succ)</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"207-Course-Schedule\"><a href=\"#207-Course-Schedule\" class=\"headerlink\" title=\"207. Course Schedule\"></a>207. Course Schedule</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canFinish</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">        indegree = [<span class=\"number\">0</span>] * numCourses</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> succ, pre <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            outdegree[pre].append(succ)</span><br><span class=\"line\">            indegree[succ] += <span class=\"number\">1</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"comment\"># find start from all course - indegree == 0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            course = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[course]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"comment\"># if we find all course that are equal to the given course</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count == numCourses</span><br></pre></td></tr></table></figure>\n<h3 id=\"210-Course-Schedule-II\"><a href=\"#210-Course-Schedule-II\" class=\"headerlink\" title=\"210. Course Schedule II\"></a>210. Course Schedule II</h3><p>区别就是输出list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findOrder</span><span class=\"params\">(self, numCourses, prerequisites)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type numCourses: int</span></span><br><span class=\"line\"><span class=\"string\">        :type prerequisites: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(numCourses)]</span><br><span class=\"line\">        indegree = [<span class=\"number\">0</span>] * numCourses</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> succ, pre <span class=\"keyword\">in</span> prerequisites:</span><br><span class=\"line\">            outdegree[pre].append(succ)</span><br><span class=\"line\">            indegree[succ] += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(numCourses):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            pre = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(pre)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[pre]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res <span class=\"keyword\">if</span> len(res) == numCourses <span class=\"keyword\">else</span> []</span><br></pre></td></tr></table></figure>\n<h3 id=\"802-Find-Eventual-Safe-States\"><a href=\"#802-Find-Eventual-Safe-States\" class=\"headerlink\" title=\"802. Find Eventual Safe States\"></a>802. Find Eventual Safe States</h3><p>也是一道可以用这种方法做的题，就是经过拓扑排序后出度为0的点输出出来就好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eventualSafeNodes</span><span class=\"params\">(self, graph)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type graph: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        outdegree = [<span class=\"number\">0</span>] * len(graph)</span><br><span class=\"line\">        indegree = [[] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(len(graph))]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(graph)):</span><br><span class=\"line\">            outdegree[i] = len(graph[i])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(graph[i])):</span><br><span class=\"line\">                indegree[graph[i][j]].append(i)</span><br><span class=\"line\">                </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(outdegree)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> outdegree[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">        res = []   </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(node)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[node]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> rest <span class=\"keyword\">in</span> indegree[node]:</span><br><span class=\"line\">                    outdegree[rest] -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> outdegree[rest] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        queue.append(rest)</span><br><span class=\"line\">                    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sorted(res)</span><br></pre></td></tr></table></figure>\n<h3 id=\"444-Sequence-Reconstruction\"><a href=\"#444-Sequence-Reconstruction\" class=\"headerlink\" title=\"444. Sequence Reconstruction\"></a>444. Sequence Reconstruction</h3><p>这道题有两个点，一个是入度为0的只能有一个；二是如何控制只有一个数字的list-虽说对结果没啥影响，不过还要处理这么一个case[1],[[1],[1],[1]] 挺无聊的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sequenceReconstruction</span><span class=\"params\">(self, org, seqs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type org: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type seqs: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        indegree = collections.defaultdict(int)</span><br><span class=\"line\">        outdegree = collections.defaultdict(list)</span><br><span class=\"line\">        </span><br><span class=\"line\">        st = set()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> seq <span class=\"keyword\">in</span> seqs:</span><br><span class=\"line\">            <span class=\"comment\"># union set</span></span><br><span class=\"line\">            st |= set(seq)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(seq) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">                    indegree[seq[<span class=\"number\">0</span>]] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(seq)<span class=\"number\">-1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">                    indegree[seq[i]] = <span class=\"number\">0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> outdegree[seq[i]]:</span><br><span class=\"line\">                    outdegree[seq[i]].append(seq[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    indegree[seq[i+<span class=\"number\">1</span>]] += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        zero_degree = <span class=\"number\">0</span></span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> indegree:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[each] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append(each)</span><br><span class=\"line\">                zero_degree += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># unique</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> zero_degree &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            prev = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(prev)</span><br><span class=\"line\">            count = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[prev]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    count += <span class=\"number\">1</span></span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">                    <span class=\"comment\"># not unique</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> count &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"comment\"># if left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> outdegree[prev] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> count:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res == org <span class=\"keyword\">and</span> set(org) == set(st)</span><br></pre></td></tr></table></figure>\n<h3 id=\"269-Alien-Dictionary\"><a href=\"#269-Alien-Dictionary\" class=\"headerlink\" title=\"269. Alien Dictionary\"></a>269. Alien Dictionary</h3><p>Hard 难度，一方面是构建dictionary的时候很繁琐.<br>每次判断完后要del掉outdegree所对应pop出来的元素，直到没有出度，也就是全部遍历完了才成功。因为order的长度没有给出，所以不能用len(order) == len(origin) 来判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">alienOrder</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        indegree, outdegree = collections.defaultdict(int), collections.defaultdict(list)</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(words)):</span><br><span class=\"line\">            <span class=\"comment\"># consider play and playing</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(words[i<span class=\"number\">-1</span>]) &gt; len(words[i]) <span class=\"keyword\">and</span> words[i<span class=\"number\">-1</span>][:len(words[i])] == words[i]:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            self.buildToplogicalSort(words[i<span class=\"number\">-1</span>], words[i], indegree, outdegree)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># build number of char</span></span><br><span class=\"line\">        nodes = set()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">                nodes.add(char)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> nodes:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> indegree[char] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">#if char not in indegree:</span></span><br><span class=\"line\">                queue.append(char)</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            prev = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            res.append(prev)</span><br><span class=\"line\">            <span class=\"comment\"># we need to check outdegree because we del outdegree if we find</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">for</span> succ <span class=\"keyword\">in</span> outdegree[prev]:</span><br><span class=\"line\">                indegree[succ] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> indegree[succ] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    queue.append(succ)</span><br><span class=\"line\">            <span class=\"comment\"># del outdegree for this char</span></span><br><span class=\"line\">            <span class=\"keyword\">del</span>(outdegree[prev])</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span> outdegree:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>.join(res)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildToplogicalSort</span><span class=\"params\">(self, word1, word2, indegree, outdegree)</span>:</span></span><br><span class=\"line\">        length = min(len(word1), len(word2))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word1[i] != word2[i]:</span><br><span class=\"line\">                <span class=\"comment\"># init pre char</span></span><br><span class=\"line\">                <span class=\"comment\"># if word1[i] not in outdegree:</span></span><br><span class=\"line\">                <span class=\"comment\">#     outdegree[word1[i]] = set()</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> word2[i] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> outdegree[word1[i]]:</span><br><span class=\"line\">                    indegree[word2[i]] += <span class=\"number\">1</span></span><br><span class=\"line\">                    outdegree[word1[i]].append(word2[i])</span><br><span class=\"line\">                <span class=\"comment\"># only contain two char is not the same its order after that is irrelevent</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>"},{"title":"Two Pointer问题总结","comments":1,"date":"2017-10-25T04:56:46.000Z","updated":"2018-04-25T04:56:46.000Z","_content":"### 209. Minimum Size Subarray Sum\n这道题没有那么多复杂的计算size方法，只是和大于k后，左移一位\n\n```python\nclass Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # sliding widows\n        if not nums:\n            return 0\n        l, r = 0, 0\n        minLength = len(nums)+1\n        res = 0\n        while r < len(nums):\n            res += nums[r]\n            \n            r += 1\n            \n            while res >= s:\n                minLength = min(minLength, r - l)\n                res -= nums[l]\n                l += 1\n        return 0 if minLength == len(nums)+1 else minLength\n```\n### 713. Subarray Product Less Than K\n这道题甚至是上一道题的简略版本，要求出所有符合条件的。\n\n```python\nclass Solution(object):\n    def numSubarrayProductLessThanK(self, nums, k):\n        if k <= 1: return 0\n        prod = 1\n        ans = left = 0\n        for right, val in enumerate(nums):\n            prod *= val\n            while prod >= k:\n                prod /= nums[left]\n                left += 1\n            ans += right - left + 1\n        return ans\n```\n\n### 763. Partition Labels\n简化版本的windows题\n\n```python\nclass Solution(object):\n    def partitionLabels(self, S):\n        last = {c: i for i, c in enumerate(S)}\n        j = anchor = 0\n        ans = []\n        for i, c in enumerate(S):\n            # update j like a sliding window\n            j = max(j, last[c])\n           \n            if i == j:\n                ans.append(i - anchor + 1)\n                anchor = i + 1\n            \n        return ans\n```\n<!--more-->\n### 424. Longest Repeating Character Replacement\n这道题的关键是最多可以替换k个字母，所以维护窗口的size是max出现字母的次数，剩下的都要替换\n\n```python\n#from collections import defaultdict\nclass Solution(object):\n    def characterReplacement(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        count = {}\n        max_count = start = result = 0\n        for end in range(len(s)):\n            count[s[end]] = count.get(s[end], 0) + 1\n            max_count = max(max_count, count[s[end]])\n            if end - start + 1 - max_count > k:\n                count[s[start]] -= 1\n                start += 1\n            result = max(result, end - start + 1)\n        return result\n        \n```\n### 567. Permutation in String\n这道题是找Permutation in String，所以窗口size永远是end-start + 1,只要比较两个dict是否相同就可以了\n\n```python\nclass Solution:\n    def checkInclusion(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        # O(n)\n        dic1, dic2 = dict(), dict()\n        for s in s1:\n            dic1[s] = dic1.get(s,0) + 1\n        start, end = 0, 0\n        \n        while end < len(s2):\n            dic2[s2[end]] = dic2.get(s2[end],0) + 1\n            if dic1 == dic2:\n                return True\n            \n            end += 1\n                \n            # compare\n            if end -start + 1 > len(s1):\n                dic2[s2[start]] -= 1\n                if dic2[s2[start]] == 0:\n                    del(dic2[s2[start]])\n                start += 1\n        return False\n```\n### 438. Find All Anagrams in a String\n\n```python\nclass Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        dic1, dic2 = dict(), dict()\n        for each in p:\n            dic1[each] = dic1.get(each,0) + 1\n        start, end = 0, 0\n        res = []\n        \n        while end < len(s):\n            dic2[s[end]] = dic2.get(s[end],0) + 1\n            if dic1 == dic2:\n                res.append(start)\n            \n            end += 1\n                \n            # compare\n            if end -start + 1 > len(p):\n                dic2[s[start]] -= 1\n                if dic2[s[start]] == 0:\n                    del(dic2[s[start]])\n                start += 1\n        return res\n\n```\n### 239. Sliding Window Maximum\n这道题是Two Pointer的升级版，我们不仅需要维护一个window size，还要判断最大值出现的位置，以便能节省空间；所以这道题我们用deque来进行解决\n\n```python\nfrom collections import deque\nclass Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        dq = deque()\n        res = []\n        for i in range(len(nums)):\n            # limit range\n            if dq and dq[0] == i-k:\n                dq.popleft()\n            while dq and nums[i] >= nums[dq[-1]]:\n                # no meaning\n                dq.pop()\n            dq.append(i)\n            if i - k + 1 >= 0:\n                res.append(nums[dq[0]])\n        return res\n        \n```\n### 76. Minimum Window Substring\n这道题记录出现字母次数，然后知道windows里满足substring的时候再移动`duplicate-- dic value maybe < 0`\n\n```python\nclass Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        # sliding windows\n        if not s or not t:\n            return \"\"\n        res = \"\"\n        dic = dict()\n        # init\n        for char in t:\n            dic[char] = dic.get(char, 0) + 1\n        l,r = 0, 0\n        minLength = len(s)\n        # windows\n        size = len(t)\n        \n        while r < len(s):\n            if s[r] in dic:\n                # duplicate-- dic value maybe < 0\n                if dic[s[r]] > 0:\n                    size -= 1\n                    \n                dic[s[r]] -= 1\n            \n            # windos\n            r += 1\n            \n            while size == 0:\n                if minLength >= r-l:\n                    minLength = r-l\n                    res = s[l:r]\n                    #t = [l :r]\n                    \n                # left bound\n                if s[l] in dic:\n                    dic[s[l]] += 1\n                    if dic[s[l]] > 0:\n                        size += 1\n                l += 1\n        return res      \n```\n","source":"_posts/Two-Pointer问题总结.md","raw":"---\ntitle: Two Pointer问题总结\ncomments: true\ndate: 2017-10-24 21:56:46\nupdated: 2018-04-24 21:56:46\ncategories:\ntags: Leetcode\n---\n### 209. Minimum Size Subarray Sum\n这道题没有那么多复杂的计算size方法，只是和大于k后，左移一位\n\n```python\nclass Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # sliding widows\n        if not nums:\n            return 0\n        l, r = 0, 0\n        minLength = len(nums)+1\n        res = 0\n        while r < len(nums):\n            res += nums[r]\n            \n            r += 1\n            \n            while res >= s:\n                minLength = min(minLength, r - l)\n                res -= nums[l]\n                l += 1\n        return 0 if minLength == len(nums)+1 else minLength\n```\n### 713. Subarray Product Less Than K\n这道题甚至是上一道题的简略版本，要求出所有符合条件的。\n\n```python\nclass Solution(object):\n    def numSubarrayProductLessThanK(self, nums, k):\n        if k <= 1: return 0\n        prod = 1\n        ans = left = 0\n        for right, val in enumerate(nums):\n            prod *= val\n            while prod >= k:\n                prod /= nums[left]\n                left += 1\n            ans += right - left + 1\n        return ans\n```\n\n### 763. Partition Labels\n简化版本的windows题\n\n```python\nclass Solution(object):\n    def partitionLabels(self, S):\n        last = {c: i for i, c in enumerate(S)}\n        j = anchor = 0\n        ans = []\n        for i, c in enumerate(S):\n            # update j like a sliding window\n            j = max(j, last[c])\n           \n            if i == j:\n                ans.append(i - anchor + 1)\n                anchor = i + 1\n            \n        return ans\n```\n<!--more-->\n### 424. Longest Repeating Character Replacement\n这道题的关键是最多可以替换k个字母，所以维护窗口的size是max出现字母的次数，剩下的都要替换\n\n```python\n#from collections import defaultdict\nclass Solution(object):\n    def characterReplacement(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        count = {}\n        max_count = start = result = 0\n        for end in range(len(s)):\n            count[s[end]] = count.get(s[end], 0) + 1\n            max_count = max(max_count, count[s[end]])\n            if end - start + 1 - max_count > k:\n                count[s[start]] -= 1\n                start += 1\n            result = max(result, end - start + 1)\n        return result\n        \n```\n### 567. Permutation in String\n这道题是找Permutation in String，所以窗口size永远是end-start + 1,只要比较两个dict是否相同就可以了\n\n```python\nclass Solution:\n    def checkInclusion(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        # O(n)\n        dic1, dic2 = dict(), dict()\n        for s in s1:\n            dic1[s] = dic1.get(s,0) + 1\n        start, end = 0, 0\n        \n        while end < len(s2):\n            dic2[s2[end]] = dic2.get(s2[end],0) + 1\n            if dic1 == dic2:\n                return True\n            \n            end += 1\n                \n            # compare\n            if end -start + 1 > len(s1):\n                dic2[s2[start]] -= 1\n                if dic2[s2[start]] == 0:\n                    del(dic2[s2[start]])\n                start += 1\n        return False\n```\n### 438. Find All Anagrams in a String\n\n```python\nclass Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        dic1, dic2 = dict(), dict()\n        for each in p:\n            dic1[each] = dic1.get(each,0) + 1\n        start, end = 0, 0\n        res = []\n        \n        while end < len(s):\n            dic2[s[end]] = dic2.get(s[end],0) + 1\n            if dic1 == dic2:\n                res.append(start)\n            \n            end += 1\n                \n            # compare\n            if end -start + 1 > len(p):\n                dic2[s[start]] -= 1\n                if dic2[s[start]] == 0:\n                    del(dic2[s[start]])\n                start += 1\n        return res\n\n```\n### 239. Sliding Window Maximum\n这道题是Two Pointer的升级版，我们不仅需要维护一个window size，还要判断最大值出现的位置，以便能节省空间；所以这道题我们用deque来进行解决\n\n```python\nfrom collections import deque\nclass Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        dq = deque()\n        res = []\n        for i in range(len(nums)):\n            # limit range\n            if dq and dq[0] == i-k:\n                dq.popleft()\n            while dq and nums[i] >= nums[dq[-1]]:\n                # no meaning\n                dq.pop()\n            dq.append(i)\n            if i - k + 1 >= 0:\n                res.append(nums[dq[0]])\n        return res\n        \n```\n### 76. Minimum Window Substring\n这道题记录出现字母次数，然后知道windows里满足substring的时候再移动`duplicate-- dic value maybe < 0`\n\n```python\nclass Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        # sliding windows\n        if not s or not t:\n            return \"\"\n        res = \"\"\n        dic = dict()\n        # init\n        for char in t:\n            dic[char] = dic.get(char, 0) + 1\n        l,r = 0, 0\n        minLength = len(s)\n        # windows\n        size = len(t)\n        \n        while r < len(s):\n            if s[r] in dic:\n                # duplicate-- dic value maybe < 0\n                if dic[s[r]] > 0:\n                    size -= 1\n                    \n                dic[s[r]] -= 1\n            \n            # windos\n            r += 1\n            \n            while size == 0:\n                if minLength >= r-l:\n                    minLength = r-l\n                    res = s[l:r]\n                    #t = [l :r]\n                    \n                # left bound\n                if s[l] in dic:\n                    dic[s[l]] += 1\n                    if dic[s[l]] > 0:\n                        size += 1\n                l += 1\n        return res      \n```\n","slug":"Two-Pointer问题总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfe001vm2catwbtisxq","content":"<h3 id=\"209-Minimum-Size-Subarray-Sum\"><a href=\"#209-Minimum-Size-Subarray-Sum\" class=\"headerlink\" title=\"209. Minimum Size Subarray Sum\"></a>209. Minimum Size Subarray Sum</h3><p>这道题没有那么多复杂的计算size方法，只是和大于k后，左移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(self, s, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: int</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding widows</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        l, r = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        minLength = len(nums)+<span class=\"number\">1</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> r &lt; len(nums):</span><br><span class=\"line\">            res += nums[r]</span><br><span class=\"line\">            </span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> res &gt;= s:</span><br><span class=\"line\">                minLength = min(minLength, r - l)</span><br><span class=\"line\">                res -= nums[l]</span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> minLength == len(nums)+<span class=\"number\">1</span> <span class=\"keyword\">else</span> minLength</span><br></pre></td></tr></table></figure>\n<h3 id=\"713-Subarray-Product-Less-Than-K\"><a href=\"#713-Subarray-Product-Less-Than-K\" class=\"headerlink\" title=\"713. Subarray Product Less Than K\"></a>713. Subarray Product Less Than K</h3><p>这道题甚至是上一道题的简略版本，要求出所有符合条件的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        prod = <span class=\"number\">1</span></span><br><span class=\"line\">        ans = left = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> right, val <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            prod *= val</span><br><span class=\"line\">            <span class=\"keyword\">while</span> prod &gt;= k:</span><br><span class=\"line\">                prod /= nums[left]</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">            ans += right - left + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"763-Partition-Labels\"><a href=\"#763-Partition-Labels\" class=\"headerlink\" title=\"763. Partition Labels\"></a>763. Partition Labels</h3><p>简化版本的windows题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partitionLabels</span><span class=\"params\">(self, S)</span>:</span></span><br><span class=\"line\">        last = &#123;c: i <span class=\"keyword\">for</span> i, c <span class=\"keyword\">in</span> enumerate(S)&#125;</span><br><span class=\"line\">        j = anchor = <span class=\"number\">0</span></span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, c <span class=\"keyword\">in</span> enumerate(S):</span><br><span class=\"line\">            <span class=\"comment\"># update j like a sliding window</span></span><br><span class=\"line\">            j = max(j, last[c])</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:</span><br><span class=\"line\">                ans.append(i - anchor + <span class=\"number\">1</span>)</span><br><span class=\"line\">                anchor = i + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"424-Longest-Repeating-Character-Replacement\"><a href=\"#424-Longest-Repeating-Character-Replacement\" class=\"headerlink\" title=\"424. Longest Repeating Character Replacement\"></a>424. Longest Repeating Character Replacement</h3><p>这道题的关键是最多可以替换k个字母，所以维护窗口的size是max出现字母的次数，剩下的都要替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#from collections import defaultdict</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">characterReplacement</span><span class=\"params\">(self, s, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count = &#123;&#125;</span><br><span class=\"line\">        max_count = start = result = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> end <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            count[s[end]] = count.get(s[end], <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            max_count = max(max_count, count[s[end]])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end - start + <span class=\"number\">1</span> - max_count &gt; k:</span><br><span class=\"line\">                count[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            result = max(result, end - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"567-Permutation-in-String\"><a href=\"#567-Permutation-in-String\" class=\"headerlink\" title=\"567. Permutation in String\"></a>567. Permutation in String</h3><p>这道题是找Permutation in String，所以窗口size永远是end-start + 1,只要比较两个dict是否相同就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkInclusion</span><span class=\"params\">(self, s1, s2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type s2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        dic1, dic2 = dict(), dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> s1:</span><br><span class=\"line\">            dic1[s] = dic1.get(s,<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        start, end = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> end &lt; len(s2):</span><br><span class=\"line\">            dic2[s2[end]] = dic2.get(s2[end],<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dic1 == dic2:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            end += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end -start + <span class=\"number\">1</span> &gt; len(s1):</span><br><span class=\"line\">                dic2[s2[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic2[s2[start]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(dic2[s2[start]])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438. Find All Anagrams in a String\"></a>438. Find All Anagrams in a String</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAnagrams</span><span class=\"params\">(self, s, p)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type p: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dic1, dic2 = dict(), dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">            dic1[each] = dic1.get(each,<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        start, end = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> end &lt; len(s):</span><br><span class=\"line\">            dic2[s[end]] = dic2.get(s[end],<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dic1 == dic2:</span><br><span class=\"line\">                res.append(start)</span><br><span class=\"line\">            </span><br><span class=\"line\">            end += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end -start + <span class=\"number\">1</span> &gt; len(p):</span><br><span class=\"line\">                dic2[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic2[s[start]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(dic2[s[start]])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"239-Sliding-Window-Maximum\"><a href=\"#239-Sliding-Window-Maximum\" class=\"headerlink\" title=\"239. Sliding Window Maximum\"></a>239. Sliding Window Maximum</h3><p>这道题是Two Pointer的升级版，我们不仅需要维护一个window size，还要判断最大值出现的位置，以便能节省空间；所以这道题我们用deque来进行解决</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSlidingWindow</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dq = deque()</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"comment\"># limit range</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dq <span class=\"keyword\">and</span> dq[<span class=\"number\">0</span>] == i-k:</span><br><span class=\"line\">                dq.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">while</span> dq <span class=\"keyword\">and</span> nums[i] &gt;= nums[dq[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                <span class=\"comment\"># no meaning</span></span><br><span class=\"line\">                dq.pop()</span><br><span class=\"line\">            dq.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                res.append(nums[dq[<span class=\"number\">0</span>]])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"76-Minimum-Window-Substring\"><a href=\"#76-Minimum-Window-Substring\" class=\"headerlink\" title=\"76. Minimum Window Substring\"></a>76. Minimum Window Substring</h3><p>这道题记录出现字母次数，然后知道windows里满足substring的时候再移动<code>duplicate-- dic value maybe &lt; 0</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minWindow</span><span class=\"params\">(self, s, t)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding windows</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"comment\"># init</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            dic[char] = dic.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        l,r = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        minLength = len(s)</span><br><span class=\"line\">        <span class=\"comment\"># windows</span></span><br><span class=\"line\">        size = len(t)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> r &lt; len(s):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[r] <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"comment\"># duplicate-- dic value maybe &lt; 0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic[s[r]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    size -= <span class=\"number\">1</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">                dic[s[r]] -= <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># windos</span></span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> minLength &gt;= r-l:</span><br><span class=\"line\">                    minLength = r-l</span><br><span class=\"line\">                    res = s[l:r]</span><br><span class=\"line\">                    <span class=\"comment\">#t = [l :r]</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">                <span class=\"comment\"># left bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[l] <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    dic[s[l]] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dic[s[l]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                        size += <span class=\"number\">1</span></span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"209-Minimum-Size-Subarray-Sum\"><a href=\"#209-Minimum-Size-Subarray-Sum\" class=\"headerlink\" title=\"209. Minimum Size Subarray Sum\"></a>209. Minimum Size Subarray Sum</h3><p>这道题没有那么多复杂的计算size方法，只是和大于k后，左移一位</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(self, s, nums)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: int</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding widows</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        l, r = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        minLength = len(nums)+<span class=\"number\">1</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> r &lt; len(nums):</span><br><span class=\"line\">            res += nums[r]</span><br><span class=\"line\">            </span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> res &gt;= s:</span><br><span class=\"line\">                minLength = min(minLength, r - l)</span><br><span class=\"line\">                res -= nums[l]</span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">if</span> minLength == len(nums)+<span class=\"number\">1</span> <span class=\"keyword\">else</span> minLength</span><br></pre></td></tr></table></figure>\n<h3 id=\"713-Subarray-Product-Less-Than-K\"><a href=\"#713-Subarray-Product-Less-Than-K\" class=\"headerlink\" title=\"713. Subarray Product Less Than K\"></a>713. Subarray Product Less Than K</h3><p>这道题甚至是上一道题的简略版本，要求出所有符合条件的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        prod = <span class=\"number\">1</span></span><br><span class=\"line\">        ans = left = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> right, val <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            prod *= val</span><br><span class=\"line\">            <span class=\"keyword\">while</span> prod &gt;= k:</span><br><span class=\"line\">                prod /= nums[left]</span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">            ans += right - left + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n<h3 id=\"763-Partition-Labels\"><a href=\"#763-Partition-Labels\" class=\"headerlink\" title=\"763. Partition Labels\"></a>763. Partition Labels</h3><p>简化版本的windows题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partitionLabels</span><span class=\"params\">(self, S)</span>:</span></span><br><span class=\"line\">        last = &#123;c: i <span class=\"keyword\">for</span> i, c <span class=\"keyword\">in</span> enumerate(S)&#125;</span><br><span class=\"line\">        j = anchor = <span class=\"number\">0</span></span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, c <span class=\"keyword\">in</span> enumerate(S):</span><br><span class=\"line\">            <span class=\"comment\"># update j like a sliding window</span></span><br><span class=\"line\">            j = max(j, last[c])</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == j:</span><br><span class=\"line\">                ans.append(i - anchor + <span class=\"number\">1</span>)</span><br><span class=\"line\">                anchor = i + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"424-Longest-Repeating-Character-Replacement\"><a href=\"#424-Longest-Repeating-Character-Replacement\" class=\"headerlink\" title=\"424. Longest Repeating Character Replacement\"></a>424. Longest Repeating Character Replacement</h3><p>这道题的关键是最多可以替换k个字母，所以维护窗口的size是max出现字母的次数，剩下的都要替换</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#from collections import defaultdict</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">characterReplacement</span><span class=\"params\">(self, s, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count = &#123;&#125;</span><br><span class=\"line\">        max_count = start = result = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> end <span class=\"keyword\">in</span> range(len(s)):</span><br><span class=\"line\">            count[s[end]] = count.get(s[end], <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            max_count = max(max_count, count[s[end]])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> end - start + <span class=\"number\">1</span> - max_count &gt; k:</span><br><span class=\"line\">                count[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">            result = max(result, end - start + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"567-Permutation-in-String\"><a href=\"#567-Permutation-in-String\" class=\"headerlink\" title=\"567. Permutation in String\"></a>567. Permutation in String</h3><p>这道题是找Permutation in String，所以窗口size永远是end-start + 1,只要比较两个dict是否相同就可以了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkInclusion</span><span class=\"params\">(self, s1, s2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s1: str</span></span><br><span class=\"line\"><span class=\"string\">        :type s2: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># O(n)</span></span><br><span class=\"line\">        dic1, dic2 = dict(), dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> s1:</span><br><span class=\"line\">            dic1[s] = dic1.get(s,<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        start, end = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> end &lt; len(s2):</span><br><span class=\"line\">            dic2[s2[end]] = dic2.get(s2[end],<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dic1 == dic2:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            end += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end -start + <span class=\"number\">1</span> &gt; len(s1):</span><br><span class=\"line\">                dic2[s2[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic2[s2[start]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(dic2[s2[start]])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"438-Find-All-Anagrams-in-a-String\"><a href=\"#438-Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"438. Find All Anagrams in a String\"></a>438. Find All Anagrams in a String</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findAnagrams</span><span class=\"params\">(self, s, p)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type p: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dic1, dic2 = dict(), dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> each <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">            dic1[each] = dic1.get(each,<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        start, end = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> end &lt; len(s):</span><br><span class=\"line\">            dic2[s[end]] = dic2.get(s[end],<span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dic1 == dic2:</span><br><span class=\"line\">                res.append(start)</span><br><span class=\"line\">            </span><br><span class=\"line\">            end += <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> end -start + <span class=\"number\">1</span> &gt; len(p):</span><br><span class=\"line\">                dic2[s[start]] -= <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic2[s[start]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">del</span>(dic2[s[start]])</span><br><span class=\"line\">                start += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"239-Sliding-Window-Maximum\"><a href=\"#239-Sliding-Window-Maximum\" class=\"headerlink\" title=\"239. Sliding Window Maximum\"></a>239. Sliding Window Maximum</h3><p>这道题是Two Pointer的升级版，我们不仅需要维护一个window size，还要判断最大值出现的位置，以便能节省空间；所以这道题我们用deque来进行解决</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxSlidingWindow</span><span class=\"params\">(self, nums, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        dq = deque()</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"comment\"># limit range</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dq <span class=\"keyword\">and</span> dq[<span class=\"number\">0</span>] == i-k:</span><br><span class=\"line\">                dq.popleft()</span><br><span class=\"line\">            <span class=\"keyword\">while</span> dq <span class=\"keyword\">and</span> nums[i] &gt;= nums[dq[<span class=\"number\">-1</span>]]:</span><br><span class=\"line\">                <span class=\"comment\"># no meaning</span></span><br><span class=\"line\">                dq.pop()</span><br><span class=\"line\">            dq.append(i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i - k + <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                res.append(nums[dq[<span class=\"number\">0</span>]])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"76-Minimum-Window-Substring\"><a href=\"#76-Minimum-Window-Substring\" class=\"headerlink\" title=\"76. Minimum Window Substring\"></a>76. Minimum Window Substring</h3><p>这道题记录出现字母次数，然后知道windows里满足substring的时候再移动<code>duplicate-- dic value maybe &lt; 0</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minWindow</span><span class=\"params\">(self, s, t)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type s: str</span></span><br><span class=\"line\"><span class=\"string\">        :type t: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># sliding windows</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> s <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> t:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"comment\"># init</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">            dic[char] = dic.get(char, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">        l,r = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        minLength = len(s)</span><br><span class=\"line\">        <span class=\"comment\"># windows</span></span><br><span class=\"line\">        size = len(t)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> r &lt; len(s):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> s[r] <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                <span class=\"comment\"># duplicate-- dic value maybe &lt; 0</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> dic[s[r]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    size -= <span class=\"number\">1</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">                dic[s[r]] -= <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># windos</span></span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span> size == <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> minLength &gt;= r-l:</span><br><span class=\"line\">                    minLength = r-l</span><br><span class=\"line\">                    res = s[l:r]</span><br><span class=\"line\">                    <span class=\"comment\">#t = [l :r]</span></span><br><span class=\"line\">                    </span><br><span class=\"line\">                <span class=\"comment\"># left bound</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> s[l] <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                    dic[s[l]] += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> dic[s[l]] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                        size += <span class=\"number\">1</span></span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>"},{"title":"USC生活小技巧-持续更新","comments":1,"date":"2017-04-22T23:20:43.000Z","updated":"2017-04-22T23:20:43.000Z","_content":"# 绪\n> 体验过\n\n# 衣\n## Bookstore\n由于是授权关系，带有USC标志的衣服普遍价格不低，适合自身入手一件，至于其他的适合送人以及收藏，毕竟outlets也不远。\n## Career Fair\n不像国内，这边的 Career Fair经常免费发衣服，基于洛杉矶炎热的气候倒也适合夏天以及居家服的供应\n# 食\n## 热门选项\n### TCC\n年少无知时期的第一选择，选择不多除了汉堡就是Panda Express；高热量而且并不是很好吃，唯一的优点是快。  \n### 餐车\n广大人民群众的热门选择，分布于五号门左手边的巷口处。菜系以川菜为主均价为8刀左右，缺点是油太大不适合连续吃  \n## 冷门选项\n### 商学院的Fertitta Hall的新食堂\n主做亚洲风味并兼有凤城甜品...但实际上主食并不正宗而且符合商学院整体的身价\n### 学校的自助食堂\n人均12刀，并不像国内的奢华自助，但是甜品沙拉整体不错，适合当下午茶\n## Figueroa Street\n### Trio\n学校周围宴请首选场所，品味中等偏上，环境简约风。\n### Subway\n实惠三明治，营养健康，但可能不适合国人的饮食习惯\n# 行\n## Enterprise\n>- Open Mon-Fri 8:30 am to 6:00 pm, Sat 9:00 am to Noon\n- Discounted rates with USC ID\n- All makes and models available: Exotic, hybrids, 15 passenger vans\n- Now open on campus, we’re located at the PSX offices with USC Transportation and Housing\n- We rent to 18-25 year olds with no underage fees\n\n价格比市面上的任何租车行都有优惠而且方便提车，需使用专有链接。  \n[http://transnet.usc.edu/index.php/getting-around/](http://transnet.usc.edu/index.php/getting-around/)\n# 番外\n## 交学费\nUSC的少有的几家可以用信用卡交学费的学校并且没有手续费，所以...很多人包括我都用来完成开卡消费了。\n## 日历\n可以登录my.usc.edu进入到我的USC，然后点击倒出日历，并在本地导入，这样的话再也不用担心忘记课程时间和地点了。\n","source":"_posts/USC生活小技巧.md","raw":"---\ntitle: USC生活小技巧-持续更新\ncomments: true\ndate: 2017-04-22 16:20:43\nupdated: 2017-04-22 16:20:43\ncategories: Living\ntags: [USC, Rental]\n---\n# 绪\n> 体验过\n\n# 衣\n## Bookstore\n由于是授权关系，带有USC标志的衣服普遍价格不低，适合自身入手一件，至于其他的适合送人以及收藏，毕竟outlets也不远。\n## Career Fair\n不像国内，这边的 Career Fair经常免费发衣服，基于洛杉矶炎热的气候倒也适合夏天以及居家服的供应\n# 食\n## 热门选项\n### TCC\n年少无知时期的第一选择，选择不多除了汉堡就是Panda Express；高热量而且并不是很好吃，唯一的优点是快。  \n### 餐车\n广大人民群众的热门选择，分布于五号门左手边的巷口处。菜系以川菜为主均价为8刀左右，缺点是油太大不适合连续吃  \n## 冷门选项\n### 商学院的Fertitta Hall的新食堂\n主做亚洲风味并兼有凤城甜品...但实际上主食并不正宗而且符合商学院整体的身价\n### 学校的自助食堂\n人均12刀，并不像国内的奢华自助，但是甜品沙拉整体不错，适合当下午茶\n## Figueroa Street\n### Trio\n学校周围宴请首选场所，品味中等偏上，环境简约风。\n### Subway\n实惠三明治，营养健康，但可能不适合国人的饮食习惯\n# 行\n## Enterprise\n>- Open Mon-Fri 8:30 am to 6:00 pm, Sat 9:00 am to Noon\n- Discounted rates with USC ID\n- All makes and models available: Exotic, hybrids, 15 passenger vans\n- Now open on campus, we’re located at the PSX offices with USC Transportation and Housing\n- We rent to 18-25 year olds with no underage fees\n\n价格比市面上的任何租车行都有优惠而且方便提车，需使用专有链接。  \n[http://transnet.usc.edu/index.php/getting-around/](http://transnet.usc.edu/index.php/getting-around/)\n# 番外\n## 交学费\nUSC的少有的几家可以用信用卡交学费的学校并且没有手续费，所以...很多人包括我都用来完成开卡消费了。\n## 日历\n可以登录my.usc.edu进入到我的USC，然后点击倒出日历，并在本地导入，这样的话再也不用担心忘记课程时间和地点了。\n","slug":"USC生活小技巧","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfg001zm2cavagoxmvu","content":"<h1 id=\"绪\"><a href=\"#绪\" class=\"headerlink\" title=\"绪\"></a>绪</h1><blockquote>\n<p>体验过</p>\n</blockquote>\n<h1 id=\"衣\"><a href=\"#衣\" class=\"headerlink\" title=\"衣\"></a>衣</h1><h2 id=\"Bookstore\"><a href=\"#Bookstore\" class=\"headerlink\" title=\"Bookstore\"></a>Bookstore</h2><p>由于是授权关系，带有USC标志的衣服普遍价格不低，适合自身入手一件，至于其他的适合送人以及收藏，毕竟outlets也不远。</p>\n<h2 id=\"Career-Fair\"><a href=\"#Career-Fair\" class=\"headerlink\" title=\"Career Fair\"></a>Career Fair</h2><p>不像国内，这边的 Career Fair经常免费发衣服，基于洛杉矶炎热的气候倒也适合夏天以及居家服的供应</p>\n<h1 id=\"食\"><a href=\"#食\" class=\"headerlink\" title=\"食\"></a>食</h1><h2 id=\"热门选项\"><a href=\"#热门选项\" class=\"headerlink\" title=\"热门选项\"></a>热门选项</h2><h3 id=\"TCC\"><a href=\"#TCC\" class=\"headerlink\" title=\"TCC\"></a>TCC</h3><p>年少无知时期的第一选择，选择不多除了汉堡就是Panda Express；高热量而且并不是很好吃，唯一的优点是快。  </p>\n<h3 id=\"餐车\"><a href=\"#餐车\" class=\"headerlink\" title=\"餐车\"></a>餐车</h3><p>广大人民群众的热门选择，分布于五号门左手边的巷口处。菜系以川菜为主均价为8刀左右，缺点是油太大不适合连续吃  </p>\n<h2 id=\"冷门选项\"><a href=\"#冷门选项\" class=\"headerlink\" title=\"冷门选项\"></a>冷门选项</h2><h3 id=\"商学院的Fertitta-Hall的新食堂\"><a href=\"#商学院的Fertitta-Hall的新食堂\" class=\"headerlink\" title=\"商学院的Fertitta Hall的新食堂\"></a>商学院的Fertitta Hall的新食堂</h3><p>主做亚洲风味并兼有凤城甜品…但实际上主食并不正宗而且符合商学院整体的身价</p>\n<h3 id=\"学校的自助食堂\"><a href=\"#学校的自助食堂\" class=\"headerlink\" title=\"学校的自助食堂\"></a>学校的自助食堂</h3><p>人均12刀，并不像国内的奢华自助，但是甜品沙拉整体不错，适合当下午茶</p>\n<h2 id=\"Figueroa-Street\"><a href=\"#Figueroa-Street\" class=\"headerlink\" title=\"Figueroa Street\"></a>Figueroa Street</h2><h3 id=\"Trio\"><a href=\"#Trio\" class=\"headerlink\" title=\"Trio\"></a>Trio</h3><p>学校周围宴请首选场所，品味中等偏上，环境简约风。</p>\n<h3 id=\"Subway\"><a href=\"#Subway\" class=\"headerlink\" title=\"Subway\"></a>Subway</h3><p>实惠三明治，营养健康，但可能不适合国人的饮食习惯</p>\n<h1 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h1><h2 id=\"Enterprise\"><a href=\"#Enterprise\" class=\"headerlink\" title=\"Enterprise\"></a>Enterprise</h2><blockquote>\n<ul>\n<li>Open Mon-Fri 8:30 am to 6:00 pm, Sat 9:00 am to Noon</li>\n<li>Discounted rates with USC ID</li>\n<li>All makes and models available: Exotic, hybrids, 15 passenger vans</li>\n<li>Now open on campus, we’re located at the PSX offices with USC Transportation and Housing</li>\n<li>We rent to 18-25 year olds with no underage fees</li>\n</ul>\n</blockquote>\n<p>价格比市面上的任何租车行都有优惠而且方便提车，需使用专有链接。<br><a href=\"http://transnet.usc.edu/index.php/getting-around/\" target=\"_blank\" rel=\"noopener\">http://transnet.usc.edu/index.php/getting-around/</a></p>\n<h1 id=\"番外\"><a href=\"#番外\" class=\"headerlink\" title=\"番外\"></a>番外</h1><h2 id=\"交学费\"><a href=\"#交学费\" class=\"headerlink\" title=\"交学费\"></a>交学费</h2><p>USC的少有的几家可以用信用卡交学费的学校并且没有手续费，所以…很多人包括我都用来完成开卡消费了。</p>\n<h2 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h2><p>可以登录my.usc.edu进入到我的USC，然后点击倒出日历，并在本地导入，这样的话再也不用担心忘记课程时间和地点了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"绪\"><a href=\"#绪\" class=\"headerlink\" title=\"绪\"></a>绪</h1><blockquote>\n<p>体验过</p>\n</blockquote>\n<h1 id=\"衣\"><a href=\"#衣\" class=\"headerlink\" title=\"衣\"></a>衣</h1><h2 id=\"Bookstore\"><a href=\"#Bookstore\" class=\"headerlink\" title=\"Bookstore\"></a>Bookstore</h2><p>由于是授权关系，带有USC标志的衣服普遍价格不低，适合自身入手一件，至于其他的适合送人以及收藏，毕竟outlets也不远。</p>\n<h2 id=\"Career-Fair\"><a href=\"#Career-Fair\" class=\"headerlink\" title=\"Career Fair\"></a>Career Fair</h2><p>不像国内，这边的 Career Fair经常免费发衣服，基于洛杉矶炎热的气候倒也适合夏天以及居家服的供应</p>\n<h1 id=\"食\"><a href=\"#食\" class=\"headerlink\" title=\"食\"></a>食</h1><h2 id=\"热门选项\"><a href=\"#热门选项\" class=\"headerlink\" title=\"热门选项\"></a>热门选项</h2><h3 id=\"TCC\"><a href=\"#TCC\" class=\"headerlink\" title=\"TCC\"></a>TCC</h3><p>年少无知时期的第一选择，选择不多除了汉堡就是Panda Express；高热量而且并不是很好吃，唯一的优点是快。  </p>\n<h3 id=\"餐车\"><a href=\"#餐车\" class=\"headerlink\" title=\"餐车\"></a>餐车</h3><p>广大人民群众的热门选择，分布于五号门左手边的巷口处。菜系以川菜为主均价为8刀左右，缺点是油太大不适合连续吃  </p>\n<h2 id=\"冷门选项\"><a href=\"#冷门选项\" class=\"headerlink\" title=\"冷门选项\"></a>冷门选项</h2><h3 id=\"商学院的Fertitta-Hall的新食堂\"><a href=\"#商学院的Fertitta-Hall的新食堂\" class=\"headerlink\" title=\"商学院的Fertitta Hall的新食堂\"></a>商学院的Fertitta Hall的新食堂</h3><p>主做亚洲风味并兼有凤城甜品…但实际上主食并不正宗而且符合商学院整体的身价</p>\n<h3 id=\"学校的自助食堂\"><a href=\"#学校的自助食堂\" class=\"headerlink\" title=\"学校的自助食堂\"></a>学校的自助食堂</h3><p>人均12刀，并不像国内的奢华自助，但是甜品沙拉整体不错，适合当下午茶</p>\n<h2 id=\"Figueroa-Street\"><a href=\"#Figueroa-Street\" class=\"headerlink\" title=\"Figueroa Street\"></a>Figueroa Street</h2><h3 id=\"Trio\"><a href=\"#Trio\" class=\"headerlink\" title=\"Trio\"></a>Trio</h3><p>学校周围宴请首选场所，品味中等偏上，环境简约风。</p>\n<h3 id=\"Subway\"><a href=\"#Subway\" class=\"headerlink\" title=\"Subway\"></a>Subway</h3><p>实惠三明治，营养健康，但可能不适合国人的饮食习惯</p>\n<h1 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h1><h2 id=\"Enterprise\"><a href=\"#Enterprise\" class=\"headerlink\" title=\"Enterprise\"></a>Enterprise</h2><blockquote>\n<ul>\n<li>Open Mon-Fri 8:30 am to 6:00 pm, Sat 9:00 am to Noon</li>\n<li>Discounted rates with USC ID</li>\n<li>All makes and models available: Exotic, hybrids, 15 passenger vans</li>\n<li>Now open on campus, we’re located at the PSX offices with USC Transportation and Housing</li>\n<li>We rent to 18-25 year olds with no underage fees</li>\n</ul>\n</blockquote>\n<p>价格比市面上的任何租车行都有优惠而且方便提车，需使用专有链接。<br><a href=\"http://transnet.usc.edu/index.php/getting-around/\" target=\"_blank\" rel=\"noopener\">http://transnet.usc.edu/index.php/getting-around/</a></p>\n<h1 id=\"番外\"><a href=\"#番外\" class=\"headerlink\" title=\"番外\"></a>番外</h1><h2 id=\"交学费\"><a href=\"#交学费\" class=\"headerlink\" title=\"交学费\"></a>交学费</h2><p>USC的少有的几家可以用信用卡交学费的学校并且没有手续费，所以…很多人包括我都用来完成开卡消费了。</p>\n<h2 id=\"日历\"><a href=\"#日历\" class=\"headerlink\" title=\"日历\"></a>日历</h2><p>可以登录my.usc.edu进入到我的USC，然后点击倒出日历，并在本地导入，这样的话再也不用担心忘记课程时间和地点了。</p>\n"},{"title":"Trie 类型总结","comments":1,"date":"2018-04-22T23:32:32.000Z","updated":"2018-04-22T23:32:32.000Z","_content":"# Introduce to Trie\n## What is Trie\nA Trie is a special form of a Nary tree. Typically, a trie is used to store strings. Each Trie node represents a string (a prefix). Each node might have several children nodes while the paths to different children nodes represent different characters. And the strings the child nodes represent will be the origin string represented by the node itself plus the character on the path.\n\n## How to represent\n### Dict\nIn Python we can use Dictionary to represent it, key is the char and value is the dict. It can save some space but slower because we need to calculate the hashcode every time.  \n\n```python\nclass Trie(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = dict()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr:\n                curr[char] = dict()\n            curr = curr[char]\n        curr['#'] = '#'\n```\n用defalutdict会更加方便\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\n        \nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n```\n<!--more-->\n### Array\nWe use array can save time but need to create length at least 26 to 256. Key is everytime we need to calculate index `ord(char)-97`\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = [0 for _ in range(26)]   # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            index = ord(char) - 97\n            if curr.nodes[index] == 0:\n                temp = TrieNode()\n                curr.nodes[index] = temp\n                curr = temp\n            else:\n                curr = curr.nodes[index]\n        curr.isword = True\n```\n\n# Basic operation\n## Insert\npseudo-code\n\n```\n1. Initialize: cur = root\n2. for each char c in target string S:\n3.      if cur does not have a child c:\n4.          cur.children[c] = new Trie node\n5.      cur = cur.children[c]\n6. cur is the node which represents the string S\n```\n\n## Search\npseudo-code\n\n```\n1. Initialize: cur = root\n2. for each char c in target string S:\n3.      if cur does not have a child c:\n4.          search fails\n5.      cur = cur.children[c]\n6. search successes\n```\n\n## 208 Implement a Trie\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return curr.isword\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)\n```\n\n# Question\n## 677. Map Sum Pairs\nUsing Trie to Srote each char and the count of that\n\n```python\nclass TrieNode():\n    def __init__(self, count = 0):\n        self.count = count\n        self.children = {}\n                \nclass MapSum(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        self.keys = {}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n        # Time: O(k)\n        curr = self.root\n        delta = val - self.keys.get(key, 0)\n        self.keys[key] = val\n        \n        curr = self.root\n        curr.count += delta\n        for char in key:\n            if char not in curr.children:\n                curr.children[char] = TrieNode()\n            curr = curr.children[char]\n            curr.count += delta\n        \n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        # Time: O(k)\n        curr = self.root\n        for char in prefix:\n            if char not in curr.children:\n                return 0\n            curr = curr.children[char]\n        return curr.count\n```\n## 648. Replace Words\n本质思想是构建一个Trie，然后查询的时候如果对应char没有发现，直接返回word，如果查到了prefix 直接返回prefix，都不满足返回word本身\n\n```python\nclass TrieNode:\n    \n    def __init__(self):\n        self.root = dict()\n    \n    def insert(self, root):\n        node = self.root\n        \n        for char in root:\n            if char not in node:\n                node[char] = dict()\n            node = node[char]\n        node['#'] = root\n            \n    def replace(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return word\n            node = node[char]\n            if node.get('#'):\n                return node['#']\n        return word\n\n\nclass Solution(object):\n    def replaceWords(self, dict, sentence):\n        \"\"\"\n        :type dict: List[str]\n        :type sentence: str\n        :rtype: str\n        \"\"\"\n\n        trie = TrieNode()\n        for root in dict:\n            trie.insert(root)\n            \n        strs = sentence.split()\n        for i,v in enumerate(strs):\n            strs[i] = trie.replace(v)\n        return \" \".join(strs)\n        \n```\n\n## 211. Add and Search Word - Data structure design\n在基础的Trie上，查询的时候利用DFS，如果当前的char == ‘.' 那么继续dfs查询之后的一个char，只要有一个满足即可；else则是判断当前char是否在prefix树中\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        self.node = defaultdict(TrieNode)\n        self.isWord = False\n\n    def __repr__(self):\n        return repr(self.node)\n        \nclass WordDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.node[char]\n        curr.isWord = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return self.find(self.root, word)\n    \n    def find(self, trie, word):\n        if word == '':\n            return trie.isWord\n        \n        if word[0] == '.':\n            for i in trie.node:\n                if self.find(trie.node[i], word[1:]):\n                    return True\n        else:\n            child = trie.node.get(word[0])\n            if child:\n                return self.find(child, word[1:])\n        return False\n```\n## 212. Word Search II\n对于words中的每一个词建立Trie，然后DFS查询在board中能否找到\n访问前存储该字母，之后再还原\n\n```python\ntmp = board[i][j]\nboard[i][j] =\"@\"\nboard[i][j] = tmp\n```\n\n```python\nclass Solution(object):\n    def findWords(self, board, words):\n        trie = {}\n        for w in words:\n            t = trie\n            for c in w:\n                if c not in t:\n                    t[c] = {}\n                t = t[c]\n            t['#'] = '#'\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.find(board, i, j, trie, '', res)\n        return list(set(res))\n\n    def find(self, board, i, j, trie, path, res):\n        # we find\n        if '#' in trie:\n            res.append(path)\n        # not legal\n        if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or board[i][j] not in trie:\n            return\n        tmp = board[i][j]\n        board[i][j] =\"@\"\n        self.find(board, i+1, j, trie[tmp], path+tmp, res)\n        self.find(board, i, j+1, trie[tmp], path+tmp, res)\n        self.find(board, i-1, j, trie[tmp], path+tmp, res)\n        self.find(board, i, j-1, trie[tmp], path+tmp, res)\n        board[i][j] = tmp\n```\n## 425. Word Squares\nHard题目，抄了答案，但本质上还是Trie\n\n```python\n'''\nInput:\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n\nOutput:\n[\n  [ \"wall\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ],\n  [ \"ball\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ]\n]\n\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\nO(n), O(n) Trie\n'''\nfrom collections import defaultdict\n\n\nclass TrieNode(object):\n\tdef __init__(self):\n\t\t# index\n\t\tself.indices = []\n\t\tself.children = defaultdict(TrieNode)\n\n\tdef insert(self, words, i):\n\t\tcur = self\n\t\tfor c in words[i]:\n\t\t\tif not cur.children[c]:\n\t\t\t\tcur.children[c] = TrieNode()\n\t\t\tcur = cur.children[c]\n\t\t\tcur.indices.append(i)\n\n\nclass Solution(object):\n\tdef wordSquares(self, words):\n\t\t\"\"\"\n\t\t:type words: List[str]\n\t\t:rtype: List[List[str]]\n\t\t\"\"\"\n\t\tresult = []\n\n\t\ttrie = TrieNode()\n\t\t#init\n\n\t\tfor index, word in enumerate(words):\n\t\t\ttrie.insert(words,index)\n\n\t\tcurr = []\n\t\t#dfs\n\t\tfor s in words:\n\t\t\tcurr.append(s)\n\t\t\tself.wordSquaresHelper(words, trie, curr, result)\n\t\t\tcurr.pop()\n\n\t\treturn result\n\n\tdef wordSquaresHelper(self, words, trie, curr, result):\n\t\tif len(curr) >= len(words[0]):\n\t\t\t#print (curr)\n\t\t\treturn result.append(list(curr))\n\n\t\tnode = trie\n\t\t# check\n\t\tfor s in curr:\n\t\t\tnode = node.children[s[len(curr)]]\n\t\t\tif not node:\n\t\t\t\treturn\n\n\t\tfor i in node.indices:\n\t\t\tcurr.append(words[i])\n\t\t\tself.wordSquaresHelper(words, trie, curr, result)\n\t\t\tcurr.pop()\n```","source":"_posts/Trie-类型总结.md","raw":"---\ntitle: Trie 类型总结\ncomments: true\ndate: 2018-04-22 16:32:32\nupdated: 2018-04-22 16:32:32\ncategories: Trie\ntags: Leetcode\n---\n# Introduce to Trie\n## What is Trie\nA Trie is a special form of a Nary tree. Typically, a trie is used to store strings. Each Trie node represents a string (a prefix). Each node might have several children nodes while the paths to different children nodes represent different characters. And the strings the child nodes represent will be the origin string represented by the node itself plus the character on the path.\n\n## How to represent\n### Dict\nIn Python we can use Dictionary to represent it, key is the char and value is the dict. It can save some space but slower because we need to calculate the hashcode every time.  \n\n```python\nclass Trie(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = dict()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr:\n                curr[char] = dict()\n            curr = curr[char]\n        curr['#'] = '#'\n```\n用defalutdict会更加方便\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\n        \nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n```\n<!--more-->\n### Array\nWe use array can save time but need to create length at least 26 to 256. Key is everytime we need to calculate index `ord(char)-97`\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = [0 for _ in range(26)]   # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            index = ord(char) - 97\n            if curr.nodes[index] == 0:\n                temp = TrieNode()\n                curr.nodes[index] = temp\n                curr = temp\n            else:\n                curr = curr.nodes[index]\n        curr.isword = True\n```\n\n# Basic operation\n## Insert\npseudo-code\n\n```\n1. Initialize: cur = root\n2. for each char c in target string S:\n3.      if cur does not have a child c:\n4.          cur.children[c] = new Trie node\n5.      cur = cur.children[c]\n6. cur is the node which represents the string S\n```\n\n## Search\npseudo-code\n\n```\n1. Initialize: cur = root\n2. for each char c in target string S:\n3.      if cur does not have a child c:\n4.          search fails\n5.      cur = cur.children[c]\n6. search successes\n```\n\n## 208 Implement a Trie\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\n        self.isword = False  # True for the end of the trie.\nclass Trie(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.nodes[char]\n        curr.isword = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in word:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return curr.isword\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        curr = self.root\n        for char in prefix:\n            if char not in curr.nodes:\n                return False\n            else:\n                curr = curr.nodes[char]\n        return True\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)\n```\n\n# Question\n## 677. Map Sum Pairs\nUsing Trie to Srote each char and the count of that\n\n```python\nclass TrieNode():\n    def __init__(self, count = 0):\n        self.count = count\n        self.children = {}\n                \nclass MapSum(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        self.keys = {}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: void\n        \"\"\"\n        # Time: O(k)\n        curr = self.root\n        delta = val - self.keys.get(key, 0)\n        self.keys[key] = val\n        \n        curr = self.root\n        curr.count += delta\n        for char in key:\n            if char not in curr.children:\n                curr.children[char] = TrieNode()\n            curr = curr.children[char]\n            curr.count += delta\n        \n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        # Time: O(k)\n        curr = self.root\n        for char in prefix:\n            if char not in curr.children:\n                return 0\n            curr = curr.children[char]\n        return curr.count\n```\n## 648. Replace Words\n本质思想是构建一个Trie，然后查询的时候如果对应char没有发现，直接返回word，如果查到了prefix 直接返回prefix，都不满足返回word本身\n\n```python\nclass TrieNode:\n    \n    def __init__(self):\n        self.root = dict()\n    \n    def insert(self, root):\n        node = self.root\n        \n        for char in root:\n            if char not in node:\n                node[char] = dict()\n            node = node[char]\n        node['#'] = root\n            \n    def replace(self, word):\n        node = self.root\n        for char in word:\n            if char not in node:\n                return word\n            node = node[char]\n            if node.get('#'):\n                return node['#']\n        return word\n\n\nclass Solution(object):\n    def replaceWords(self, dict, sentence):\n        \"\"\"\n        :type dict: List[str]\n        :type sentence: str\n        :rtype: str\n        \"\"\"\n\n        trie = TrieNode()\n        for root in dict:\n            trie.insert(root)\n            \n        strs = sentence.split()\n        for i,v in enumerate(strs):\n            strs[i] = trie.replace(v)\n        return \" \".join(strs)\n        \n```\n\n## 211. Add and Search Word - Data structure design\n在基础的Trie上，查询的时候利用DFS，如果当前的char == ‘.' 那么继续dfs查询之后的一个char，只要有一个满足即可；else则是判断当前char是否在prefix树中\n\n```python\nfrom collections import defaultdict\nclass TrieNode(object):\n    def __init__(self):\n        self.node = defaultdict(TrieNode)\n        self.isWord = False\n\n    def __repr__(self):\n        return repr(self.node)\n        \nclass WordDictionary(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n        \n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.root\n        for char in word:\n            curr = curr.node[char]\n        curr.isWord = True\n        \n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        return self.find(self.root, word)\n    \n    def find(self, trie, word):\n        if word == '':\n            return trie.isWord\n        \n        if word[0] == '.':\n            for i in trie.node:\n                if self.find(trie.node[i], word[1:]):\n                    return True\n        else:\n            child = trie.node.get(word[0])\n            if child:\n                return self.find(child, word[1:])\n        return False\n```\n## 212. Word Search II\n对于words中的每一个词建立Trie，然后DFS查询在board中能否找到\n访问前存储该字母，之后再还原\n\n```python\ntmp = board[i][j]\nboard[i][j] =\"@\"\nboard[i][j] = tmp\n```\n\n```python\nclass Solution(object):\n    def findWords(self, board, words):\n        trie = {}\n        for w in words:\n            t = trie\n            for c in w:\n                if c not in t:\n                    t[c] = {}\n                t = t[c]\n            t['#'] = '#'\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.find(board, i, j, trie, '', res)\n        return list(set(res))\n\n    def find(self, board, i, j, trie, path, res):\n        # we find\n        if '#' in trie:\n            res.append(path)\n        # not legal\n        if i<0 or i>=len(board) or j<0 or j>=len(board[0]) or board[i][j] not in trie:\n            return\n        tmp = board[i][j]\n        board[i][j] =\"@\"\n        self.find(board, i+1, j, trie[tmp], path+tmp, res)\n        self.find(board, i, j+1, trie[tmp], path+tmp, res)\n        self.find(board, i-1, j, trie[tmp], path+tmp, res)\n        self.find(board, i, j-1, trie[tmp], path+tmp, res)\n        board[i][j] = tmp\n```\n## 425. Word Squares\nHard题目，抄了答案，但本质上还是Trie\n\n```python\n'''\nInput:\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n\nOutput:\n[\n  [ \"wall\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ],\n  [ \"ball\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ]\n]\n\nExplanation:\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\nO(n), O(n) Trie\n'''\nfrom collections import defaultdict\n\n\nclass TrieNode(object):\n\tdef __init__(self):\n\t\t# index\n\t\tself.indices = []\n\t\tself.children = defaultdict(TrieNode)\n\n\tdef insert(self, words, i):\n\t\tcur = self\n\t\tfor c in words[i]:\n\t\t\tif not cur.children[c]:\n\t\t\t\tcur.children[c] = TrieNode()\n\t\t\tcur = cur.children[c]\n\t\t\tcur.indices.append(i)\n\n\nclass Solution(object):\n\tdef wordSquares(self, words):\n\t\t\"\"\"\n\t\t:type words: List[str]\n\t\t:rtype: List[List[str]]\n\t\t\"\"\"\n\t\tresult = []\n\n\t\ttrie = TrieNode()\n\t\t#init\n\n\t\tfor index, word in enumerate(words):\n\t\t\ttrie.insert(words,index)\n\n\t\tcurr = []\n\t\t#dfs\n\t\tfor s in words:\n\t\t\tcurr.append(s)\n\t\t\tself.wordSquaresHelper(words, trie, curr, result)\n\t\t\tcurr.pop()\n\n\t\treturn result\n\n\tdef wordSquaresHelper(self, words, trie, curr, result):\n\t\tif len(curr) >= len(words[0]):\n\t\t\t#print (curr)\n\t\t\treturn result.append(list(curr))\n\n\t\tnode = trie\n\t\t# check\n\t\tfor s in curr:\n\t\t\tnode = node.children[s[len(curr)]]\n\t\t\tif not node:\n\t\t\t\treturn\n\n\t\tfor i in node.indices:\n\t\t\tcurr.append(words[i])\n\t\t\tself.wordSquaresHelper(words, trie, curr, result)\n\t\t\tcurr.pop()\n```","slug":"Trie-类型总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfh0022m2caq3yo1aut","content":"<h1 id=\"Introduce-to-Trie\"><a href=\"#Introduce-to-Trie\" class=\"headerlink\" title=\"Introduce to Trie\"></a>Introduce to Trie</h1><h2 id=\"What-is-Trie\"><a href=\"#What-is-Trie\" class=\"headerlink\" title=\"What is Trie\"></a>What is Trie</h2><p>A Trie is a special form of a Nary tree. Typically, a trie is used to store strings. Each Trie node represents a string (a prefix). Each node might have several children nodes while the paths to different children nodes represent different characters. And the strings the child nodes represent will be the origin string represented by the node itself plus the character on the path.</p>\n<h2 id=\"How-to-represent\"><a href=\"#How-to-represent\" class=\"headerlink\" title=\"How to represent\"></a>How to represent</h2><h3 id=\"Dict\"><a href=\"#Dict\" class=\"headerlink\" title=\"Dict\"></a>Dict</h3><p>In Python we can use Dictionary to represent it, key is the char and value is the dict. It can save some space but slower because we need to calculate the hashcode every time.  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = dict()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr:</span><br><span class=\"line\">                curr[char] = dict()</span><br><span class=\"line\">            curr = curr[char]</span><br><span class=\"line\">        curr[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br></pre></td></tr></table></figure>\n<p>用defalutdict会更加方便</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>We use array can save time but need to create length at least 26 to 256. Key is everytime we need to calculate index <code>ord(char)-97</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">26</span>)]   <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            index = ord(char) - <span class=\"number\">97</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr.nodes[index] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                temp = TrieNode()</span><br><span class=\"line\">                curr.nodes[index] = temp</span><br><span class=\"line\">                curr = temp</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[index]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Basic-operation\"><a href=\"#Basic-operation\" class=\"headerlink\" title=\"Basic operation\"></a>Basic operation</h1><h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>pseudo-code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Initialize: cur = root</span><br><span class=\"line\">2. for each char c in target string S:</span><br><span class=\"line\">3.      if cur does not have a child c:</span><br><span class=\"line\">4.          cur.children[c] = new Trie node</span><br><span class=\"line\">5.      cur = cur.children[c]</span><br><span class=\"line\">6. cur is the node which represents the string S</span><br></pre></td></tr></table></figure>\n<h2 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h2><p>pseudo-code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Initialize: cur = root</span><br><span class=\"line\">2. for each char c in target string S:</span><br><span class=\"line\">3.      if cur does not have a child c:</span><br><span class=\"line\">4.          search fails</span><br><span class=\"line\">5.      cur = cur.children[c]</span><br><span class=\"line\">6. search successes</span><br></pre></td></tr></table></figure>\n<h2 id=\"208-Implement-a-Trie\"><a href=\"#208-Implement-a-Trie\" class=\"headerlink\" title=\"208 Implement a Trie\"></a>208 Implement a Trie</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.isword</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Trie object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Trie()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.insert(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.search(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><h2 id=\"677-Map-Sum-Pairs\"><a href=\"#677-Map-Sum-Pairs\" class=\"headerlink\" title=\"677. Map Sum Pairs\"></a>677. Map Sum Pairs</h2><p>Using Trie to Srote each char and the count of that</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count = <span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.count = count</span><br><span class=\"line\">        self.children = &#123;&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        self.keys = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, key, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: str</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Time: O(k)</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        delta = val - self.keys.get(key, <span class=\"number\">0</span>)</span><br><span class=\"line\">        self.keys[key] = val</span><br><span class=\"line\">        </span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        curr.count += delta</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.children:</span><br><span class=\"line\">                curr.children[char] = TrieNode()</span><br><span class=\"line\">            curr = curr.children[char]</span><br><span class=\"line\">            curr.count += delta</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Time: O(k)</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.children:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            curr = curr.children[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.count</span><br></pre></td></tr></table></figure>\n<h2 id=\"648-Replace-Words\"><a href=\"#648-Replace-Words\" class=\"headerlink\" title=\"648. Replace Words\"></a>648. Replace Words</h2><p>本质思想是构建一个Trie，然后查询的时候如果对应char没有发现，直接返回word，如果查到了prefix 直接返回prefix，都不满足返回word本身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.root = dict()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                node[char] = dict()</span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        node[<span class=\"string\">'#'</span>] = root</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replace</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> word</span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.get(<span class=\"string\">'#'</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> node[<span class=\"string\">'#'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replaceWords</span><span class=\"params\">(self, dict, sentence)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type dict: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type sentence: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        trie = TrieNode()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> root <span class=\"keyword\">in</span> dict:</span><br><span class=\"line\">            trie.insert(root)</span><br><span class=\"line\">            </span><br><span class=\"line\">        strs = sentence.split()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> enumerate(strs):</span><br><span class=\"line\">            strs[i] = trie.replace(v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\" \"</span>.join(strs)</span><br></pre></td></tr></table></figure>\n<h2 id=\"211-Add-and-Search-Word-Data-structure-design\"><a href=\"#211-Add-and-Search-Word-Data-structure-design\" class=\"headerlink\" title=\"211. Add and Search Word - Data structure design\"></a>211. Add and Search Word - Data structure design</h2><p>在基础的Trie上，查询的时候利用DFS，如果当前的char == ‘.’ 那么继续dfs查询之后的一个char，只要有一个满足即可；else则是判断当前char是否在prefix树中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.node = defaultdict(TrieNode)</span><br><span class=\"line\">        self.isWord = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repr(self.node)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDictionary</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addWord</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Adds a word into the data structure.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.node[char]</span><br><span class=\"line\">        curr.isWord = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(self.root, word)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, trie, word)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> word == <span class=\"string\">''</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> trie.isWord</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> word[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trie.node:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.find(trie.node[i], word[<span class=\"number\">1</span>:]):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            child = trie.node.get(word[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.find(child, word[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"212-Word-Search-II\"><a href=\"#212-Word-Search-II\" class=\"headerlink\" title=\"212. Word Search II\"></a>212. Word Search II</h2><p>对于words中的每一个词建立Trie，然后DFS查询在board中能否找到<br>访问前存储该字母，之后再还原</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = board[i][j]</span><br><span class=\"line\">board[i][j] =<span class=\"string\">\"@\"</span></span><br><span class=\"line\">board[i][j] = tmp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findWords</span><span class=\"params\">(self, board, words)</span>:</span></span><br><span class=\"line\">        trie = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            t = trie</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> w:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">                    t[c] = &#123;&#125;</span><br><span class=\"line\">                t = t[c]</span><br><span class=\"line\">            t[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(board)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(board[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                self.find(board, i, j, trie, <span class=\"string\">''</span>, res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list(set(res))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, board, i, j, trie, path, res)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># we find</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'#'</span> <span class=\"keyword\">in</span> trie:</span><br><span class=\"line\">            res.append(path)</span><br><span class=\"line\">        <span class=\"comment\"># not legal</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> i&gt;=len(board) <span class=\"keyword\">or</span> j&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> j&gt;=len(board[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> board[i][j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> trie:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        tmp = board[i][j]</span><br><span class=\"line\">        board[i][j] =<span class=\"string\">\"@\"</span></span><br><span class=\"line\">        self.find(board, i+<span class=\"number\">1</span>, j, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i, j+<span class=\"number\">1</span>, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i<span class=\"number\">-1</span>, j, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i, j<span class=\"number\">-1</span>, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        board[i][j] = tmp</span><br></pre></td></tr></table></figure>\n<h2 id=\"425-Word-Squares\"><a href=\"#425-Word-Squares\" class=\"headerlink\" title=\"425. Word Squares\"></a>425. Word Squares</h2><p>Hard题目，抄了答案，但本质上还是Trie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Input:</span></span><br><span class=\"line\"><span class=\"string\">[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Output:</span></span><br><span class=\"line\"><span class=\"string\">[</span></span><br><span class=\"line\"><span class=\"string\">  [ \"wall\",</span></span><br><span class=\"line\"><span class=\"string\">    \"area\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lead\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lady\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  [ \"ball\",</span></span><br><span class=\"line\"><span class=\"string\">    \"area\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lead\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lady\"</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Explanation:</span></span><br><span class=\"line\"><span class=\"string\">The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).</span></span><br><span class=\"line\"><span class=\"string\">O(n), O(n) Trie</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># index</span></span><br><span class=\"line\">\t\tself.indices = []</span><br><span class=\"line\">\t\tself.children = defaultdict(TrieNode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, words, i)</span>:</span></span><br><span class=\"line\">\t\tcur = self</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> words[i]:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cur.children[c]:</span><br><span class=\"line\">\t\t\t\tcur.children[c] = TrieNode()</span><br><span class=\"line\">\t\t\tcur = cur.children[c]</span><br><span class=\"line\">\t\t\tcur.indices.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordSquares</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t:type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">\t\t:rtype: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"\"\"</span></span><br><span class=\"line\">\t\tresult = []</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttrie = TrieNode()</span><br><span class=\"line\">\t\t<span class=\"comment\">#init</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> index, word <span class=\"keyword\">in</span> enumerate(words):</span><br><span class=\"line\">\t\t\ttrie.insert(words,index)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcurr = []</span><br><span class=\"line\">\t\t<span class=\"comment\">#dfs</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tcurr.append(s)</span><br><span class=\"line\">\t\t\tself.wordSquaresHelper(words, trie, curr, result)</span><br><span class=\"line\">\t\t\tcurr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordSquaresHelper</span><span class=\"params\">(self, words, trie, curr, result)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(curr) &gt;= len(words[<span class=\"number\">0</span>]):</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print (curr)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result.append(list(curr))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnode = trie</span><br><span class=\"line\">\t\t<span class=\"comment\"># check</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> curr:</span><br><span class=\"line\">\t\t\tnode = node.children[s[len(curr)]]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> node.indices:</span><br><span class=\"line\">\t\t\tcurr.append(words[i])</span><br><span class=\"line\">\t\t\tself.wordSquaresHelper(words, trie, curr, result)</span><br><span class=\"line\">\t\t\tcurr.pop()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Introduce-to-Trie\"><a href=\"#Introduce-to-Trie\" class=\"headerlink\" title=\"Introduce to Trie\"></a>Introduce to Trie</h1><h2 id=\"What-is-Trie\"><a href=\"#What-is-Trie\" class=\"headerlink\" title=\"What is Trie\"></a>What is Trie</h2><p>A Trie is a special form of a Nary tree. Typically, a trie is used to store strings. Each Trie node represents a string (a prefix). Each node might have several children nodes while the paths to different children nodes represent different characters. And the strings the child nodes represent will be the origin string represented by the node itself plus the character on the path.</p>\n<h2 id=\"How-to-represent\"><a href=\"#How-to-represent\" class=\"headerlink\" title=\"How to represent\"></a>How to represent</h2><h3 id=\"Dict\"><a href=\"#Dict\" class=\"headerlink\" title=\"Dict\"></a>Dict</h3><p>In Python we can use Dictionary to represent it, key is the char and value is the dict. It can save some space but slower because we need to calculate the hashcode every time.  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = dict()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr:</span><br><span class=\"line\">                curr[char] = dict()</span><br><span class=\"line\">            curr = curr[char]</span><br><span class=\"line\">        curr[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br></pre></td></tr></table></figure>\n<p>用defalutdict会更加方便</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>We use array can save time but need to create length at least 26 to 256. Key is everytime we need to calculate index <code>ord(char)-97</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">26</span>)]   <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            index = ord(char) - <span class=\"number\">97</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr.nodes[index] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                temp = TrieNode()</span><br><span class=\"line\">                curr.nodes[index] = temp</span><br><span class=\"line\">                curr = temp</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[index]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Basic-operation\"><a href=\"#Basic-operation\" class=\"headerlink\" title=\"Basic operation\"></a>Basic operation</h1><h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>pseudo-code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Initialize: cur = root</span><br><span class=\"line\">2. for each char c in target string S:</span><br><span class=\"line\">3.      if cur does not have a child c:</span><br><span class=\"line\">4.          cur.children[c] = new Trie node</span><br><span class=\"line\">5.      cur = cur.children[c]</span><br><span class=\"line\">6. cur is the node which represents the string S</span><br></pre></td></tr></table></figure>\n<h2 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h2><p>pseudo-code</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Initialize: cur = root</span><br><span class=\"line\">2. for each char c in target string S:</span><br><span class=\"line\">3.      if cur does not have a child c:</span><br><span class=\"line\">4.          search fails</span><br><span class=\"line\">5.      cur = cur.children[c]</span><br><span class=\"line\">6. search successes</span><br></pre></td></tr></table></figure>\n<h2 id=\"208-Implement-a-Trie\"><a href=\"#208-Implement-a-Trie\" class=\"headerlink\" title=\"208 Implement a Trie\"></a>208 Implement a Trie</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.nodes = defaultdict(TrieNode)  <span class=\"comment\"># Easy to insert new node.</span></span><br><span class=\"line\">        self.isword = <span class=\"keyword\">False</span>  <span class=\"comment\"># True for the end of the trie.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.nodes[char]</span><br><span class=\"line\">        curr.isword = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.isword</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.nodes:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr = curr.nodes[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Your Trie object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"># obj = Trie()</span></span><br><span class=\"line\"><span class=\"comment\"># obj.insert(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_2 = obj.search(word)</span></span><br><span class=\"line\"><span class=\"comment\"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><h2 id=\"677-Map-Sum-Pairs\"><a href=\"#677-Map-Sum-Pairs\" class=\"headerlink\" title=\"677. Map Sum Pairs\"></a>677. Map Sum Pairs</h2><p>Using Trie to Srote each char and the count of that</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, count = <span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.count = count</span><br><span class=\"line\">        self.children = &#123;&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapSum</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        self.keys = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, key, val)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type key: str</span></span><br><span class=\"line\"><span class=\"string\">        :type val: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Time: O(k)</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        delta = val - self.keys.get(key, <span class=\"number\">0</span>)</span><br><span class=\"line\">        self.keys[key] = val</span><br><span class=\"line\">        </span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        curr.count += delta</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> key:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.children:</span><br><span class=\"line\">                curr.children[char] = TrieNode()</span><br><span class=\"line\">            curr = curr.children[char]</span><br><span class=\"line\">            curr.count += delta</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">(self, prefix)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type prefix: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># Time: O(k)</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> curr.children:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            curr = curr.children[char]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.count</span><br></pre></td></tr></table></figure>\n<h2 id=\"648-Replace-Words\"><a href=\"#648-Replace-Words\" class=\"headerlink\" title=\"648. Replace Words\"></a>648. Replace Words</h2><p>本质思想是构建一个Trie，然后查询的时候如果对应char没有发现，直接返回word，如果查到了prefix 直接返回prefix，都不满足返回word本身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.root = dict()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                node[char] = dict()</span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">        node[<span class=\"string\">'#'</span>] = root</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replace</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        node = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> char <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> word</span><br><span class=\"line\">            node = node[char]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.get(<span class=\"string\">'#'</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> node[<span class=\"string\">'#'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> word</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">replaceWords</span><span class=\"params\">(self, dict, sentence)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type dict: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        :type sentence: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: str</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">        trie = TrieNode()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> root <span class=\"keyword\">in</span> dict:</span><br><span class=\"line\">            trie.insert(root)</span><br><span class=\"line\">            </span><br><span class=\"line\">        strs = sentence.split()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> enumerate(strs):</span><br><span class=\"line\">            strs[i] = trie.replace(v)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\" \"</span>.join(strs)</span><br></pre></td></tr></table></figure>\n<h2 id=\"211-Add-and-Search-Word-Data-structure-design\"><a href=\"#211-Add-and-Search-Word-Data-structure-design\" class=\"headerlink\" title=\"211. Add and Search Word - Data structure design\"></a>211. Add and Search Word - Data structure design</h2><p>在基础的Trie上，查询的时候利用DFS，如果当前的char == ‘.’ 那么继续dfs查询之后的一个char，只要有一个满足即可；else则是判断当前char是否在prefix树中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.node = defaultdict(TrieNode)</span><br><span class=\"line\">        self.isWord = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repr(self.node)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDictionary</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        self.root = TrieNode()</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addWord</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Adds a word into the data structure.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: void</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        curr = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            curr = curr.node[char]</span><br><span class=\"line\">        curr.isWord = <span class=\"keyword\">True</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span><span class=\"params\">(self, word)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class=\"line\"><span class=\"string\">        :type word: str</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(self.root, word)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, trie, word)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> word == <span class=\"string\">''</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> trie.isWord</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> word[<span class=\"number\">0</span>] == <span class=\"string\">'.'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trie.node:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.find(trie.node[i], word[<span class=\"number\">1</span>:]):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            child = trie.node.get(word[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.find(child, word[<span class=\"number\">1</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"212-Word-Search-II\"><a href=\"#212-Word-Search-II\" class=\"headerlink\" title=\"212. Word Search II\"></a>212. Word Search II</h2><p>对于words中的每一个词建立Trie，然后DFS查询在board中能否找到<br>访问前存储该字母，之后再还原</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = board[i][j]</span><br><span class=\"line\">board[i][j] =<span class=\"string\">\"@\"</span></span><br><span class=\"line\">board[i][j] = tmp</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findWords</span><span class=\"params\">(self, board, words)</span>:</span></span><br><span class=\"line\">        trie = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">            t = trie</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> w:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">                    t[c] = &#123;&#125;</span><br><span class=\"line\">                t = t[c]</span><br><span class=\"line\">            t[<span class=\"string\">'#'</span>] = <span class=\"string\">'#'</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(board)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(board[<span class=\"number\">0</span>])):</span><br><span class=\"line\">                self.find(board, i, j, trie, <span class=\"string\">''</span>, res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list(set(res))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, board, i, j, trie, path, res)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># we find</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'#'</span> <span class=\"keyword\">in</span> trie:</span><br><span class=\"line\">            res.append(path)</span><br><span class=\"line\">        <span class=\"comment\"># not legal</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> i&gt;=len(board) <span class=\"keyword\">or</span> j&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> j&gt;=len(board[<span class=\"number\">0</span>]) <span class=\"keyword\">or</span> board[i][j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> trie:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        tmp = board[i][j]</span><br><span class=\"line\">        board[i][j] =<span class=\"string\">\"@\"</span></span><br><span class=\"line\">        self.find(board, i+<span class=\"number\">1</span>, j, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i, j+<span class=\"number\">1</span>, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i<span class=\"number\">-1</span>, j, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        self.find(board, i, j<span class=\"number\">-1</span>, trie[tmp], path+tmp, res)</span><br><span class=\"line\">        board[i][j] = tmp</span><br></pre></td></tr></table></figure>\n<h2 id=\"425-Word-Squares\"><a href=\"#425-Word-Squares\" class=\"headerlink\" title=\"425. Word Squares\"></a>425. Word Squares</h2><p>Hard题目，抄了答案，但本质上还是Trie</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Input:</span></span><br><span class=\"line\"><span class=\"string\">[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Output:</span></span><br><span class=\"line\"><span class=\"string\">[</span></span><br><span class=\"line\"><span class=\"string\">  [ \"wall\",</span></span><br><span class=\"line\"><span class=\"string\">    \"area\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lead\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lady\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  [ \"ball\",</span></span><br><span class=\"line\"><span class=\"string\">    \"area\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lead\",</span></span><br><span class=\"line\"><span class=\"string\">    \"lady\"</span></span><br><span class=\"line\"><span class=\"string\">  ]</span></span><br><span class=\"line\"><span class=\"string\">]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Explanation:</span></span><br><span class=\"line\"><span class=\"string\">The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).</span></span><br><span class=\"line\"><span class=\"string\">O(n), O(n) Trie</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># index</span></span><br><span class=\"line\">\t\tself.indices = []</span><br><span class=\"line\">\t\tself.children = defaultdict(TrieNode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span><span class=\"params\">(self, words, i)</span>:</span></span><br><span class=\"line\">\t\tcur = self</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> words[i]:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cur.children[c]:</span><br><span class=\"line\">\t\t\t\tcur.children[c] = TrieNode()</span><br><span class=\"line\">\t\t\tcur = cur.children[c]</span><br><span class=\"line\">\t\t\tcur.indices.append(i)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordSquares</span><span class=\"params\">(self, words)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t:type words: List[str]</span></span><br><span class=\"line\"><span class=\"string\">\t\t:rtype: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">\t\t\"\"\"</span></span><br><span class=\"line\">\t\tresult = []</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttrie = TrieNode()</span><br><span class=\"line\">\t\t<span class=\"comment\">#init</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> index, word <span class=\"keyword\">in</span> enumerate(words):</span><br><span class=\"line\">\t\t\ttrie.insert(words,index)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcurr = []</span><br><span class=\"line\">\t\t<span class=\"comment\">#dfs</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">\t\t\tcurr.append(s)</span><br><span class=\"line\">\t\t\tself.wordSquaresHelper(words, trie, curr, result)</span><br><span class=\"line\">\t\t\tcurr.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wordSquaresHelper</span><span class=\"params\">(self, words, trie, curr, result)</span>:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(curr) &gt;= len(words[<span class=\"number\">0</span>]):</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#print (curr)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result.append(list(curr))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnode = trie</span><br><span class=\"line\">\t\t<span class=\"comment\"># check</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> curr:</span><br><span class=\"line\">\t\t\tnode = node.children[s[len(curr)]]</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> node.indices:</span><br><span class=\"line\">\t\t\tcurr.append(words[i])</span><br><span class=\"line\">\t\t\tself.wordSquaresHelper(words, trie, curr, result)</span><br><span class=\"line\">\t\t\tcurr.pop()</span><br></pre></td></tr></table></figure>"},{"title":"Tree总结","comments":1,"date":"2017-09-24T21:50:36.000Z","updated":"2018-04-24T21:50:36.000Z","_content":"# Tree的性质\n\n## Divide and Conquer模版\n```python\ndef traversal(root):\n\t# none or leaf\n\tif not root:\n\t\t# do sth\n\t\n\t# divide\n\tleft = traversal(root.left)\n\tright = traversal(root.right)\n\t\n\t# Conquer\n\tres = # merge \n\treturn res\n\n```\n## 小技巧\nT O(n) 一般是遍历所有点\nS O(h) 用堆栈来做的话是遍历所有点\n  O(n) 用队列实现遍历所有点\n  \n<!--more-->\n### 104. Maximum Depth of Binary Tree\n深度等于子树高度+1\nT O(n)\nS O(h)\n\n```python\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        return max(left,right) + 1\n```\n### 111. Minimum Depth of Binary Tree\n和上一道题相比，需要判断树的情况，如果一个node的左儿子为空 右儿子不空 从root 到左儿子的路径不算是minimum depth\n因为左儿子不算这个node的leaf node。  \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        left = self.minDepth(root.left)\n        right = self.minDepth(root.right)\n        if not left:\n            return right+1\n        if not right:\n            return left+1\n        return min(left,right) + 1\n```\n\n### 110. Balanced Binary Tree\n这道题和上面的类似，都是找深度，由于要返回一个boolean值，所以多用一个helper function\n\nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.check(root) == -1\n    def check(self, root):\n        if not root:\n            return -1\n        left = self.isBalanced(root.left)\n        right = self.isBalanced(root.right)\n        if left == -1 or right == -1 or abs(left-right) > 1:\n            return -1\n        else:\n            return max(left, right) + 1\n```\n\n### 100. Same Tree\n我们考虑一下结束条件，如果两个结点都是null，也就是到头了，那么返回true。如果其中一个是null，说明在一棵树上结点到头，另一棵树结点还没结束，即树不相同，或者两个结点都非空，并且结点值不相同，返回false。最后递归处理两个结点的左右子树，返回左右子树递归的与结果即可。  \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```\n\n### 101. Symmetric Tree\n本质上和上一题一样，区别就是从两棵树到左右孩子。   \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        return self.check(root.left, root.right)\n    def check(self, node1, node2):\n        if not node1 and not node2:\n            return True\n        if not node1 or not node2:\n            return False\n        if node1.val != node2.val:\n            return False\n        return self.check(node1.left, node2.right) and self.check(node1.right, node2.left)\n```\n\n## 三种遍历\n### recursion\nrecursion的方法很简单 Time O(n) Space O(1)  \n\n```python\nclass Solution(object):\n    def orderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n         \n        self.traverse(root, res)\n        return res\n    def traverse(self, root, res):\n        if not root:\n            return;\n        res.append(root.val) # preorder\n        self.traverse(root.left, res)\n        ## res.append(root.val) # inorder\n        self.traverse(root.right, res)\n        ## res.append(root.val) # postorder\n```\n\n### iterative\n因为不能使用recursion，所以我们要模拟构建栈。  \n#### 前序遍历(pre-order): \n根->左->右1. 对root异常处理 2.cur 指向root, 循环条件为node!=null || !stack.isEmpty() 3.当cur不为空，就压入stack,并将元素加入结果，cur继续往左边找 4.当cur为空，就cur就为pop出的栈顶元素,.cur继续往右边找. 5.返回最终结果集合.  \nT O(n)   \nS O(h)  \n\n```python\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        stack = []\n        res = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                res.append(node.val)\n                node = node.left\n            node = stack.pop()\n            node = node.right\n            \n        return res\n```\n\n#### 中序遍历\n本质上是一样的，先访问左孩子所以就一路到底\n\n```python\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        stack = []\n        res = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                \n                node = node.left\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n            \n        return res\n```\n\n#### 后序遍历\n这个需要一点技巧以及练习，因为根节点需要访问两次，所以就需要判断是否已经访问过右节点了\n\n```python\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        if not root:\n            return res\n        stack = []\n        pre = None\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            \n            peak = stack[-1]\n            if peak.right and peak.right != pre: # 如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点）就访问右结点 \n                root = peak.right\n            else: # 如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕 需要把栈顶元素加入结果并且回溯上一层\n\n                stack.pop()\n                res.append(peak.val)\n                pre = peak\n        return res\n```\n\n不过还有一种更加巧妙的办法，前序遍历和后续遍历能否直接颠倒呢？答案是否定的，我们来看看前序遍历：根-左子树-右子树\n后序遍历：左子树-右子树-根 把前序遍历倒过来：右子树-左子树-根 ！左右子树相反，不能直接倒！\n但是这题，哼哼哼，先左子树入栈，在右子树入栈！最后输出颠倒一下即可！\n\n```python\nclass Solution:\n    # @param root, a tree node\n    # @return a list of integers\n    def postorderTraversal(self, root):\n        if not root: return []\n        ans,q=[],[]\n        q.append(root)\n        while q:\n            cur=q.pop()          \n            if cur.left: q.append(cur.left)\n            if cur.right: q.append(cur.right)\n            ans.append(cur.val)\n        return ans[::-1]\n```\n### 116. Populating Next Right Pointers in Each Node\n前序遍历的性质的小变种题目\n```python\nclass Solution:\n    # @param root, a tree link node\n    # @return nothing\n    def connect(self, root):\n        if not root:\n            return\n        if root.left:\n            root.left.next = root.right\n        if root.right:\n            if root.next:\n                root.right.next = root.next.left\n            else:\n                root.right.next = None\n        self.connect(root.left)\n        self.connect(root.right)\n```\n## 层序遍历\n基本思想便是套用BFS模版，用queue实现，在Python中可以通过引入Deque\n\n### 102. Binary Tree Level Order Traversal\n这是基本题型，外层queue记录第几层，内层size记录当前层所存储的节点   \n  T O(V+E)  \n  S O(n)\n  \n```python\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        \n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            res.append(list(temp))\n        return res\n```\n\n### 107. Binary Tree Level Order Traversal II\n本质上和上一道题一样，只是在外层倒叙输出\n\n```python\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            **res.insert(0,list(temp))**\n        return res\n```\n\n### 103. Binary Tree Zigzag Level Order Traversal\n类似的题，在内层倒叙输出，设置flag记录奇偶\n\n```python\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        **count = 0**\n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n**                if count % 2 == 0:\n                    temp.append(node.val)\n                if count % 2 == 1:\n                    temp.insert(0,node.val)**\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            count += 1\n            res.append(list(temp))\n        return res\n```\n### 637.Average of Levels in Binary Tree\n层序遍历的基础上，每层的average\n\n```python\nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        if not root:\n            return [0]\n        queue = [root]\n        res = []\n       \n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            res.append(sum(temp)/float(len(temp)))\n        return res  \n```\n### 314. Binary Tree Vertical Order Traversal\n也是BFS traverse题，中间存贮index的值\n\n```python\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def verticalOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [(root,0)]\n        dic = dict()\n        while queue:\n            node, index = queue.pop(0)\n            if node.left:\n                queue.append((node.left, index-1))\n            if node.right:\n                queue.append((node.right, index + 1))\n            if index not in dic:\n                dic[index] = []\n            dic[index].append(node.val)\n        minx,maxx = float('inf'), float('-inf')\n        for key in dic.keys():\n            minx = min(minx, key)\n            maxx = max(maxx, key)\n            \n        res = [0] * (maxx - minx + 1)\n        \n        for key in dic:\n            res[key-minx] = dic[key]\n        \n        return res\n        \n```\n# Path系列问题\n## 技巧\n基本上是可以用递归和分治的方法来进行解决，存在解和所有解都是一样的操作\n### 257. Binary Tree Paths\n输出所有路径，DFS递归，然后到叶子结点的时候返回\n\n```python\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if not root:\n            return res\n        self.helper(root, res, str(root.val))\n        return res\n    def helper(self, root, res, temp):\n        if not root:\n            return \n        if not root.left and not root.right:\n            res.append(temp)\n            return\n        if root.left:\n            self.helper(root.left, res, temp + '->'+str(root.left.val))\n        if root.right:\n            self.helper(root.right, res , temp + '->'+str(root.right.val))\n```\n### 112. Path Sum\n```python\nT O(n)\nS O(h)\nclass Solution(object):\n    def hasPathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if not root.left and not root.right and root.val == sum:\n            return True\n        return self.hasPathSum(root.left, sum - root.val) or self.hasPathSum(root.right, sum - root.val)\n```\n\n### 113. Path Sum II\n发现解的时候需要list(temp)\n\n```python\nclass Solution(object):\n    def pathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.helper(root, sum, res, [])\n        return res\n    def helper(self, root, target, res, temp):\n        if not root:\n            return\n        if not root.left and not root.right and root.val == target:\n            res.append(list(temp+[root.val]))\n        return self.helper(root.left, target - root.val, res, temp+[root.val]) or self.helper(root.right, target - root.val, res, temp+[root.val])\n```\n\n### 129. Sum Root to Leaf Numbers\n每一条往下传的时候，根据题目要求`prev * 10 + root.val`,然后分治相加\n\n```python\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        return self.helper(root, 0)\n    def helper(self, root, total):\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return total * 10 + root.val\n        left = self.helper(root.left, total*10 + root.val)\n        right = self.helper(root.right, total*10 + root.val)\n        return left + right\n```\n\n### 124. Binary Tree Maximum Path Sum\n这道题相比上一道题区别在于每个结点的local max 不一样，这道题是不需经过根节点的，所以可以变成无向图，然后分成四种情况: `root.val, root.val+root.left.val, root.val+root.right.val` 这三种是可以继续向上传的，`root.val+root.left.val+root.right.val`这种是不可以往上传的，所以这些情况可以进行local比较，最终返回global max\n\n```python\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        maxSum = [float('-inf')]\n        self.helper(root, maxSum)\n        return maxSum[0]\n    def helper(self, root, maxSum):\n        if not root:\n            return 0\n        left = self.helper(root.left, maxSum)\n        right = self.helper(root.right, maxSum)\n        temp = max(root.val + left, root.val+right, root.val)\n        maxSum[0] = max(maxSum[0], temp, root.val+left+right)\n        return temp\n```\n\n### 563. Binary Tree Tilt\n这道题根据题设，每次结点的返回值是其左右孩子和本身的和，然后每次更新abs()\n\n```python\nclass Solution(object):\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        total = [0]\n        if not root:\n            return 0\n        self.helper(root,total)\n        return total[0]\n    def helper(self, root,total):\n        if not root:\n            return 0\n        left = self.helper(root.left,total)\n        right = self.helper(root.right,total)\n        total[0] += abs(left - right)\n        return left+right+root.val # sum\n```\n\n## Binary Search Tree性质\n这种题目是根据其性质，左孩子永远比根节点小，右孩子永远比根节点大\n\n### 235. Lowest Common Ancestor of a Binary Search Tree\n```python\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if p.val > q.val:\n            p,q = q,p\n        if p.val <= root.val and q.val >= root.val:\n            return root\n        if q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if p.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n```\n\n### 270. Closest Binary Search Tree Value\n```python\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :rtype: int\n        \"\"\"\n        r = root.val\n        while root:\n            if abs(root.val - target) < abs(r - target):\n                r = root.val # generate new node\n            root = root.left if target < root.val else root.right\n        return r\n```\n\n### 272. Closest Binary Search Tree Value II\n这道题要维持一个k长度的list，所以可以中序遍历，然后不断更新最后添加元素和队列首元素与target的差值\n\n```python\nclass Solution(object):\n    def closestKValues(self, root, target, k):\n        \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        self.helper(root, target, k ,res)\n        return res\n    def helper(self, root, target, k, res):\n        if not root:\n            return\n        self.helper(root.left, target, k, res)\n        if len(res) < k:\n            res.append(root.val)\n        else:\n            if abs(target - root.val) < abs(target - res[0]):\n                res.pop(0)\n                res.append(root.val)\n                \n        self.helper(root.right, target , k , res)\n```","source":"_posts/Tree总结.md","raw":"---\ntitle: Tree总结\ncomments: true\ndate: 2017-09-24 14:50:36\nupdated: 2018-04-24 14:50:36\ncategories: [Tree, DFS, BFS]\ntags: Leetcode\n---\n# Tree的性质\n\n## Divide and Conquer模版\n```python\ndef traversal(root):\n\t# none or leaf\n\tif not root:\n\t\t# do sth\n\t\n\t# divide\n\tleft = traversal(root.left)\n\tright = traversal(root.right)\n\t\n\t# Conquer\n\tres = # merge \n\treturn res\n\n```\n## 小技巧\nT O(n) 一般是遍历所有点\nS O(h) 用堆栈来做的话是遍历所有点\n  O(n) 用队列实现遍历所有点\n  \n<!--more-->\n### 104. Maximum Depth of Binary Tree\n深度等于子树高度+1\nT O(n)\nS O(h)\n\n```python\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        return max(left,right) + 1\n```\n### 111. Minimum Depth of Binary Tree\n和上一道题相比，需要判断树的情况，如果一个node的左儿子为空 右儿子不空 从root 到左儿子的路径不算是minimum depth\n因为左儿子不算这个node的leaf node。  \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        if not root:\n            return 0\n        left = self.minDepth(root.left)\n        right = self.minDepth(root.right)\n        if not left:\n            return right+1\n        if not right:\n            return left+1\n        return min(left,right) + 1\n```\n\n### 110. Balanced Binary Tree\n这道题和上面的类似，都是找深度，由于要返回一个boolean值，所以多用一个helper function\n\nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.check(root) == -1\n    def check(self, root):\n        if not root:\n            return -1\n        left = self.isBalanced(root.left)\n        right = self.isBalanced(root.right)\n        if left == -1 or right == -1 or abs(left-right) > 1:\n            return -1\n        else:\n            return max(left, right) + 1\n```\n\n### 100. Same Tree\n我们考虑一下结束条件，如果两个结点都是null，也就是到头了，那么返回true。如果其中一个是null，说明在一棵树上结点到头，另一棵树结点还没结束，即树不相同，或者两个结点都非空，并且结点值不相同，返回false。最后递归处理两个结点的左右子树，返回左右子树递归的与结果即可。  \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n```\n\n### 101. Symmetric Tree\n本质上和上一题一样，区别就是从两棵树到左右孩子。   \nT O(n)  \nS O(h)\n\n```python\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        return self.check(root.left, root.right)\n    def check(self, node1, node2):\n        if not node1 and not node2:\n            return True\n        if not node1 or not node2:\n            return False\n        if node1.val != node2.val:\n            return False\n        return self.check(node1.left, node2.right) and self.check(node1.right, node2.left)\n```\n\n## 三种遍历\n### recursion\nrecursion的方法很简单 Time O(n) Space O(1)  \n\n```python\nclass Solution(object):\n    def orderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n         \n        self.traverse(root, res)\n        return res\n    def traverse(self, root, res):\n        if not root:\n            return;\n        res.append(root.val) # preorder\n        self.traverse(root.left, res)\n        ## res.append(root.val) # inorder\n        self.traverse(root.right, res)\n        ## res.append(root.val) # postorder\n```\n\n### iterative\n因为不能使用recursion，所以我们要模拟构建栈。  \n#### 前序遍历(pre-order): \n根->左->右1. 对root异常处理 2.cur 指向root, 循环条件为node!=null || !stack.isEmpty() 3.当cur不为空，就压入stack,并将元素加入结果，cur继续往左边找 4.当cur为空，就cur就为pop出的栈顶元素,.cur继续往右边找. 5.返回最终结果集合.  \nT O(n)   \nS O(h)  \n\n```python\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        stack = []\n        res = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                res.append(node.val)\n                node = node.left\n            node = stack.pop()\n            node = node.right\n            \n        return res\n```\n\n#### 中序遍历\n本质上是一样的，先访问左孩子所以就一路到底\n\n```python\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        stack = []\n        res = []\n        node = root\n        while node or stack:\n            while node:\n                stack.append(node)\n                \n                node = node.left\n            node = stack.pop()\n            res.append(node.val)\n            node = node.right\n            \n        return res\n```\n\n#### 后序遍历\n这个需要一点技巧以及练习，因为根节点需要访问两次，所以就需要判断是否已经访问过右节点了\n\n```python\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        if not root:\n            return res\n        stack = []\n        pre = None\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            \n            peak = stack[-1]\n            if peak.right and peak.right != pre: # 如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点）就访问右结点 \n                root = peak.right\n            else: # 如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕 需要把栈顶元素加入结果并且回溯上一层\n\n                stack.pop()\n                res.append(peak.val)\n                pre = peak\n        return res\n```\n\n不过还有一种更加巧妙的办法，前序遍历和后续遍历能否直接颠倒呢？答案是否定的，我们来看看前序遍历：根-左子树-右子树\n后序遍历：左子树-右子树-根 把前序遍历倒过来：右子树-左子树-根 ！左右子树相反，不能直接倒！\n但是这题，哼哼哼，先左子树入栈，在右子树入栈！最后输出颠倒一下即可！\n\n```python\nclass Solution:\n    # @param root, a tree node\n    # @return a list of integers\n    def postorderTraversal(self, root):\n        if not root: return []\n        ans,q=[],[]\n        q.append(root)\n        while q:\n            cur=q.pop()          \n            if cur.left: q.append(cur.left)\n            if cur.right: q.append(cur.right)\n            ans.append(cur.val)\n        return ans[::-1]\n```\n### 116. Populating Next Right Pointers in Each Node\n前序遍历的性质的小变种题目\n```python\nclass Solution:\n    # @param root, a tree link node\n    # @return nothing\n    def connect(self, root):\n        if not root:\n            return\n        if root.left:\n            root.left.next = root.right\n        if root.right:\n            if root.next:\n                root.right.next = root.next.left\n            else:\n                root.right.next = None\n        self.connect(root.left)\n        self.connect(root.right)\n```\n## 层序遍历\n基本思想便是套用BFS模版，用queue实现，在Python中可以通过引入Deque\n\n### 102. Binary Tree Level Order Traversal\n这是基本题型，外层queue记录第几层，内层size记录当前层所存储的节点   \n  T O(V+E)  \n  S O(n)\n  \n```python\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        \n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            res.append(list(temp))\n        return res\n```\n\n### 107. Binary Tree Level Order Traversal II\n本质上和上一道题一样，只是在外层倒叙输出\n\n```python\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            **res.insert(0,list(temp))**\n        return res\n```\n\n### 103. Binary Tree Zigzag Level Order Traversal\n类似的题，在内层倒叙输出，设置flag记录奇偶\n\n```python\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        res = []\n        **count = 0**\n        queue = []\n        queue.append(root)\n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n**                if count % 2 == 0:\n                    temp.append(node.val)\n                if count % 2 == 1:\n                    temp.insert(0,node.val)**\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            count += 1\n            res.append(list(temp))\n        return res\n```\n### 637.Average of Levels in Binary Tree\n层序遍历的基础上，每层的average\n\n```python\nclass Solution(object):\n    def averageOfLevels(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[float]\n        \"\"\"\n        if not root:\n            return [0]\n        queue = [root]\n        res = []\n       \n        while queue:\n            size = len(queue)\n            temp = []\n            while size:\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                size -= 1\n            res.append(sum(temp)/float(len(temp)))\n        return res  \n```\n### 314. Binary Tree Vertical Order Traversal\n也是BFS traverse题，中间存贮index的值\n\n```python\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def verticalOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        if not root:\n            return []\n        queue = [(root,0)]\n        dic = dict()\n        while queue:\n            node, index = queue.pop(0)\n            if node.left:\n                queue.append((node.left, index-1))\n            if node.right:\n                queue.append((node.right, index + 1))\n            if index not in dic:\n                dic[index] = []\n            dic[index].append(node.val)\n        minx,maxx = float('inf'), float('-inf')\n        for key in dic.keys():\n            minx = min(minx, key)\n            maxx = max(maxx, key)\n            \n        res = [0] * (maxx - minx + 1)\n        \n        for key in dic:\n            res[key-minx] = dic[key]\n        \n        return res\n        \n```\n# Path系列问题\n## 技巧\n基本上是可以用递归和分治的方法来进行解决，存在解和所有解都是一样的操作\n### 257. Binary Tree Paths\n输出所有路径，DFS递归，然后到叶子结点的时候返回\n\n```python\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        if not root:\n            return res\n        self.helper(root, res, str(root.val))\n        return res\n    def helper(self, root, res, temp):\n        if not root:\n            return \n        if not root.left and not root.right:\n            res.append(temp)\n            return\n        if root.left:\n            self.helper(root.left, res, temp + '->'+str(root.left.val))\n        if root.right:\n            self.helper(root.right, res , temp + '->'+str(root.right.val))\n```\n### 112. Path Sum\n```python\nT O(n)\nS O(h)\nclass Solution(object):\n    def hasPathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return False\n        if not root.left and not root.right and root.val == sum:\n            return True\n        return self.hasPathSum(root.left, sum - root.val) or self.hasPathSum(root.right, sum - root.val)\n```\n\n### 113. Path Sum II\n发现解的时候需要list(temp)\n\n```python\nclass Solution(object):\n    def pathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        self.helper(root, sum, res, [])\n        return res\n    def helper(self, root, target, res, temp):\n        if not root:\n            return\n        if not root.left and not root.right and root.val == target:\n            res.append(list(temp+[root.val]))\n        return self.helper(root.left, target - root.val, res, temp+[root.val]) or self.helper(root.right, target - root.val, res, temp+[root.val])\n```\n\n### 129. Sum Root to Leaf Numbers\n每一条往下传的时候，根据题目要求`prev * 10 + root.val`,然后分治相加\n\n```python\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        return self.helper(root, 0)\n    def helper(self, root, total):\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return total * 10 + root.val\n        left = self.helper(root.left, total*10 + root.val)\n        right = self.helper(root.right, total*10 + root.val)\n        return left + right\n```\n\n### 124. Binary Tree Maximum Path Sum\n这道题相比上一道题区别在于每个结点的local max 不一样，这道题是不需经过根节点的，所以可以变成无向图，然后分成四种情况: `root.val, root.val+root.left.val, root.val+root.right.val` 这三种是可以继续向上传的，`root.val+root.left.val+root.right.val`这种是不可以往上传的，所以这些情况可以进行local比较，最终返回global max\n\n```python\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        maxSum = [float('-inf')]\n        self.helper(root, maxSum)\n        return maxSum[0]\n    def helper(self, root, maxSum):\n        if not root:\n            return 0\n        left = self.helper(root.left, maxSum)\n        right = self.helper(root.right, maxSum)\n        temp = max(root.val + left, root.val+right, root.val)\n        maxSum[0] = max(maxSum[0], temp, root.val+left+right)\n        return temp\n```\n\n### 563. Binary Tree Tilt\n这道题根据题设，每次结点的返回值是其左右孩子和本身的和，然后每次更新abs()\n\n```python\nclass Solution(object):\n    def findTilt(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        total = [0]\n        if not root:\n            return 0\n        self.helper(root,total)\n        return total[0]\n    def helper(self, root,total):\n        if not root:\n            return 0\n        left = self.helper(root.left,total)\n        right = self.helper(root.right,total)\n        total[0] += abs(left - right)\n        return left+right+root.val # sum\n```\n\n## Binary Search Tree性质\n这种题目是根据其性质，左孩子永远比根节点小，右孩子永远比根节点大\n\n### 235. Lowest Common Ancestor of a Binary Search Tree\n```python\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if p.val > q.val:\n            p,q = q,p\n        if p.val <= root.val and q.val >= root.val:\n            return root\n        if q.val < root.val:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if p.val > root.val:\n            return self.lowestCommonAncestor(root.right, p, q)\n```\n\n### 270. Closest Binary Search Tree Value\n```python\nclass Solution(object):\n    def closestValue(self, root, target):\n        \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :rtype: int\n        \"\"\"\n        r = root.val\n        while root:\n            if abs(root.val - target) < abs(r - target):\n                r = root.val # generate new node\n            root = root.left if target < root.val else root.right\n        return r\n```\n\n### 272. Closest Binary Search Tree Value II\n这道题要维持一个k长度的list，所以可以中序遍历，然后不断更新最后添加元素和队列首元素与target的差值\n\n```python\nclass Solution(object):\n    def closestKValues(self, root, target, k):\n        \"\"\"\n        :type root: TreeNode\n        :type target: float\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        self.helper(root, target, k ,res)\n        return res\n    def helper(self, root, target, k, res):\n        if not root:\n            return\n        self.helper(root.left, target, k, res)\n        if len(res) < k:\n            res.append(root.val)\n        else:\n            if abs(target - root.val) < abs(target - res[0]):\n                res.pop(0)\n                res.append(root.val)\n                \n        self.helper(root.right, target , k , res)\n```","slug":"Tree总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfi0026m2caoh92kjqk","content":"<h1 id=\"Tree的性质\"><a href=\"#Tree的性质\" class=\"headerlink\" title=\"Tree的性质\"></a>Tree的性质</h1><h2 id=\"Divide-and-Conquer模版\"><a href=\"#Divide-and-Conquer模版\" class=\"headerlink\" title=\"Divide and Conquer模版\"></a>Divide and Conquer模版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traversal</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># none or leaf</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">\t\t<span class=\"comment\"># do sth</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># divide</span></span><br><span class=\"line\">\tleft = traversal(root.left)</span><br><span class=\"line\">\tright = traversal(root.right)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># Conquer</span></span><br><span class=\"line\">\tres = <span class=\"comment\"># merge </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p>T O(n) 一般是遍历所有点<br>S O(h) 用堆栈来做的话是遍历所有点<br>  O(n) 用队列实现遍历所有点</p>\n<a id=\"more\"></a>\n<h3 id=\"104-Maximum-Depth-of-Binary-Tree\"><a href=\"#104-Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"104. Maximum Depth of Binary Tree\"></a>104. Maximum Depth of Binary Tree</h3><p>深度等于子树高度+1<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.maxDepth(root.left)</span><br><span class=\"line\">        right = self.maxDepth(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(left,right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111. Minimum Depth of Binary Tree\"></a>111. Minimum Depth of Binary Tree</h3><p>和上一道题相比，需要判断树的情况，如果一个node的左儿子为空 右儿子不空 从root 到左儿子的路径不算是minimum depth<br>因为左儿子不算这个node的leaf node。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.minDepth(root.left)</span><br><span class=\"line\">        right = self.minDepth(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> left:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> right+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(left,right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a>110. Balanced Binary Tree</h3><p>这道题和上面的类似，都是找深度，由于要返回一个boolean值，所以多用一个helper function</p>\n<p>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isBalanced</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(root) == <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        left = self.isBalanced(root.left)</span><br><span class=\"line\">        right = self.isBalanced(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left == <span class=\"number\">-1</span> <span class=\"keyword\">or</span> right == <span class=\"number\">-1</span> <span class=\"keyword\">or</span> abs(left-right) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(left, right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"100-Same-Tree\"><a href=\"#100-Same-Tree\" class=\"headerlink\" title=\"100. Same Tree\"></a>100. Same Tree</h3><p>我们考虑一下结束条件，如果两个结点都是null，也就是到头了，那么返回true。如果其中一个是null，说明在一棵树上结点到头，另一棵树结点还没结束，即树不相同，或者两个结点都非空，并且结点值不相同，返回false。最后递归处理两个结点的左右子树，返回左右子树递归的与结果即可。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSameTree</span><span class=\"params\">(self, p, q)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type p: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type q: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> q:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> q:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val != q.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.isSameTree(p.left, q.left) <span class=\"keyword\">and</span> self.isSameTree(p.right, q.right)</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101. Symmetric Tree\"></a>101. Symmetric Tree</h3><p>本质上和上一题一样，区别就是从两棵树到左右孩子。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(root.left, root.right)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self, node1, node2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node1.val != node2.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(node1.left, node2.right) <span class=\"keyword\">and</span> self.check(node1.right, node2.left)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三种遍历\"><a href=\"#三种遍历\" class=\"headerlink\" title=\"三种遍历\"></a>三种遍历</h2><h3 id=\"recursion\"><a href=\"#recursion\" class=\"headerlink\" title=\"recursion\"></a>recursion</h3><p>recursion的方法很简单 Time O(n) Space O(1)  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">         </span><br><span class=\"line\">        self.traverse(root, res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traverse</span><span class=\"params\">(self, root, res)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        res.append(root.val) <span class=\"comment\"># preorder</span></span><br><span class=\"line\">        self.traverse(root.left, res)</span><br><span class=\"line\">        <span class=\"comment\">## res.append(root.val) # inorder</span></span><br><span class=\"line\">        self.traverse(root.right, res)</span><br><span class=\"line\">        <span class=\"comment\">## res.append(root.val) # postorder</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"iterative\"><a href=\"#iterative\" class=\"headerlink\" title=\"iterative\"></a>iterative</h3><p>因为不能使用recursion，所以我们要模拟构建栈。  </p>\n<h4 id=\"前序遍历-pre-order\"><a href=\"#前序遍历-pre-order\" class=\"headerlink\" title=\"前序遍历(pre-order):\"></a>前序遍历(pre-order):</h4><p>根-&gt;左-&gt;右1. 对root异常处理 2.cur 指向root, 循环条件为node!=null || !stack.isEmpty() 3.当cur不为空，就压入stack,并将元素加入结果，cur继续往左边找 4.当cur为空，就cur就为pop出的栈顶元素,.cur继续往右边找. 5.返回最终结果集合.<br>T O(n)<br>S O(h)  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">                stack.append(node)</span><br><span class=\"line\">                res.append(node.val)</span><br><span class=\"line\">                node = node.left</span><br><span class=\"line\">            node = stack.pop()</span><br><span class=\"line\">            node = node.right</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>本质上是一样的，先访问左孩子所以就一路到底</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">                stack.append(node)</span><br><span class=\"line\">                </span><br><span class=\"line\">                node = node.left</span><br><span class=\"line\">            node = stack.pop()</span><br><span class=\"line\">            res.append(node.val)</span><br><span class=\"line\">            node = node.right</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>这个需要一点技巧以及练习，因为根节点需要访问两次，所以就需要判断是否已经访问过右节点了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        pre = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> root <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">                stack.append(root)</span><br><span class=\"line\">                root = root.left</span><br><span class=\"line\">            </span><br><span class=\"line\">            peak = stack[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> peak.right <span class=\"keyword\">and</span> peak.right != pre: <span class=\"comment\"># 如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点）就访问右结点 </span></span><br><span class=\"line\">                root = peak.right</span><br><span class=\"line\">            <span class=\"keyword\">else</span>: <span class=\"comment\"># 如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕 需要把栈顶元素加入结果并且回溯上一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">                res.append(peak.val)</span><br><span class=\"line\">                pre = peak</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p>不过还有一种更加巧妙的办法，前序遍历和后续遍历能否直接颠倒呢？答案是否定的，我们来看看前序遍历：根-左子树-右子树<br>后序遍历：左子树-右子树-根 把前序遍历倒过来：右子树-左子树-根 ！左右子树相反，不能直接倒！<br>但是这题，哼哼哼，先左子树入栈，在右子树入栈！最后输出颠倒一下即可！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># @param root, a tree node</span></span><br><span class=\"line\">    <span class=\"comment\"># @return a list of integers</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        ans,q=[],[]</span><br><span class=\"line\">        q.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> q:</span><br><span class=\"line\">            cur=q.pop()          </span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left: q.append(cur.left)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right: q.append(cur.right)</span><br><span class=\"line\">            ans.append(cur.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"116-Populating-Next-Right-Pointers-in-Each-Node\"><a href=\"#116-Populating-Next-Right-Pointers-in-Each-Node\" class=\"headerlink\" title=\"116. Populating Next Right Pointers in Each Node\"></a>116. Populating Next Right Pointers in Each Node</h3><p>前序遍历的性质的小变种题目<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># @param root, a tree link node</span></span><br><span class=\"line\">    <span class=\"comment\"># @return nothing</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            root.left.next = root.right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root.next:</span><br><span class=\"line\">                root.right.next = root.next.left</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                root.right.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.connect(root.left)</span><br><span class=\"line\">        self.connect(root.right)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h2><p>基本思想便是套用BFS模版，用queue实现，在Python中可以通过引入Deque</p>\n<h3 id=\"102-Binary-Tree-Level-Order-Traversal\"><a href=\"#102-Binary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"102. Binary Tree Level Order Traversal\"></a>102. Binary Tree Level Order Traversal</h3><p>这是基本题型，外层queue记录第几层，内层size记录当前层所存储的节点<br>  T O(V+E)<br>  S O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">levelOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107. Binary Tree Level Order Traversal II\"></a>107. Binary Tree Level Order Traversal II</h3><p>本质上和上一道题一样，只是在外层倒叙输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">levelOrderBottom</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            **res.insert(<span class=\"number\">0</span>,list(temp))**</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"103-Binary-Tree-Zigzag-Level-Order-Traversal\"><a href=\"#103-Binary-Tree-Zigzag-Level-Order-Traversal\" class=\"headerlink\" title=\"103. Binary Tree Zigzag Level Order Traversal\"></a>103. Binary Tree Zigzag Level Order Traversal</h3><p>类似的题，在内层倒叙输出，设置flag记录奇偶</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zigzagLevelOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        **count = <span class=\"number\">0</span>**</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">**                <span class=\"keyword\">if</span> count % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> count % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    temp.insert(<span class=\"number\">0</span>,node.val)**</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"637-Average-of-Levels-in-Binary-Tree\"><a href=\"#637-Average-of-Levels-in-Binary-Tree\" class=\"headerlink\" title=\"637.Average of Levels in Binary Tree\"></a>637.Average of Levels in Binary Tree</h3><p>层序遍历的基础上，每层的average</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averageOfLevels</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[float]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">0</span>]</span><br><span class=\"line\">        queue = [root]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(sum(temp)/float(len(temp)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"314-Binary-Tree-Vertical-Order-Traversal\"><a href=\"#314-Binary-Tree-Vertical-Order-Traversal\" class=\"headerlink\" title=\"314. Binary Tree Vertical Order Traversal\"></a>314. Binary Tree Vertical Order Traversal</h3><p>也是BFS traverse题，中间存贮index的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verticalOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        queue = [(root,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node, index = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                queue.append((node.left, index<span class=\"number\">-1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                queue.append((node.right, index + <span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                dic[index] = []</span><br><span class=\"line\">            dic[index].append(node.val)</span><br><span class=\"line\">        minx,maxx = float(<span class=\"string\">'inf'</span>), float(<span class=\"string\">'-inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> dic.keys():</span><br><span class=\"line\">            minx = min(minx, key)</span><br><span class=\"line\">            maxx = max(maxx, key)</span><br><span class=\"line\">            </span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * (maxx - minx + <span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">            res[key-minx] = dic[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h1 id=\"Path系列问题\"><a href=\"#Path系列问题\" class=\"headerlink\" title=\"Path系列问题\"></a>Path系列问题</h1><h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>基本上是可以用递归和分治的方法来进行解决，存在解和所有解都是一样的操作</p>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257. Binary Tree Paths\"></a>257. Binary Tree Paths</h3><p>输出所有路径，DFS递归，然后到叶子结点的时候返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binaryTreePaths</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        self.helper(root, res, str(root.val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, res, temp)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            res.append(temp)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            self.helper(root.left, res, temp + <span class=\"string\">'-&gt;'</span>+str(root.left.val))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            self.helper(root.right, res , temp + <span class=\"string\">'-&gt;'</span>+str(root.right.val))</span><br></pre></td></tr></table></figure>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112. Path Sum\"></a>112. Path Sum</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n)</span><br><span class=\"line\">S O(h)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(self, root, sum)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type sum: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right <span class=\"keyword\">and</span> root.val == sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.hasPathSum(root.left, sum - root.val) <span class=\"keyword\">or</span> self.hasPathSum(root.right, sum - root.val)</span><br></pre></td></tr></table></figure>\n<h3 id=\"113-Path-Sum-II\"><a href=\"#113-Path-Sum-II\" class=\"headerlink\" title=\"113. Path Sum II\"></a>113. Path Sum II</h3><p>发现解的时候需要list(temp)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pathSum</span><span class=\"params\">(self, root, sum)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type sum: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.helper(root, sum, res, [])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, target, res, temp)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right <span class=\"keyword\">and</span> root.val == target:</span><br><span class=\"line\">            res.append(list(temp+[root.val]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.helper(root.left, target - root.val, res, temp+[root.val]) <span class=\"keyword\">or</span> self.helper(root.right, target - root.val, res, temp+[root.val])</span><br></pre></td></tr></table></figure>\n<h3 id=\"129-Sum-Root-to-Leaf-Numbers\"><a href=\"#129-Sum-Root-to-Leaf-Numbers\" class=\"headerlink\" title=\"129. Sum Root to Leaf Numbers\"></a>129. Sum Root to Leaf Numbers</h3><p>每一条往下传的时候，根据题目要求<code>prev * 10 + root.val</code>,然后分治相加</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumNumbers</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.helper(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, total)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> total * <span class=\"number\">10</span> + root.val</span><br><span class=\"line\">        left = self.helper(root.left, total*<span class=\"number\">10</span> + root.val)</span><br><span class=\"line\">        right = self.helper(root.right, total*<span class=\"number\">10</span> + root.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left + right</span><br></pre></td></tr></table></figure>\n<h3 id=\"124-Binary-Tree-Maximum-Path-Sum\"><a href=\"#124-Binary-Tree-Maximum-Path-Sum\" class=\"headerlink\" title=\"124. Binary Tree Maximum Path Sum\"></a>124. Binary Tree Maximum Path Sum</h3><p>这道题相比上一道题区别在于每个结点的local max 不一样，这道题是不需经过根节点的，所以可以变成无向图，然后分成四种情况: <code>root.val, root.val+root.left.val, root.val+root.right.val</code> 这三种是可以继续向上传的，<code>root.val+root.left.val+root.right.val</code>这种是不可以往上传的，所以这些情况可以进行local比较，最终返回global max</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        maxSum = [float(<span class=\"string\">'-inf'</span>)]</span><br><span class=\"line\">        self.helper(root, maxSum)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, maxSum)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.helper(root.left, maxSum)</span><br><span class=\"line\">        right = self.helper(root.right, maxSum)</span><br><span class=\"line\">        temp = max(root.val + left, root.val+right, root.val)</span><br><span class=\"line\">        maxSum[<span class=\"number\">0</span>] = max(maxSum[<span class=\"number\">0</span>], temp, root.val+left+right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br></pre></td></tr></table></figure>\n<h3 id=\"563-Binary-Tree-Tilt\"><a href=\"#563-Binary-Tree-Tilt\" class=\"headerlink\" title=\"563. Binary Tree Tilt\"></a>563. Binary Tree Tilt</h3><p>这道题根据题设，每次结点的返回值是其左右孩子和本身的和，然后每次更新abs()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTilt</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        total = [<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        self.helper(root,total)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root,total)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.helper(root.left,total)</span><br><span class=\"line\">        right = self.helper(root.right,total)</span><br><span class=\"line\">        total[<span class=\"number\">0</span>] += abs(left - right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left+right+root.val <span class=\"comment\"># sum</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Binary-Search-Tree性质\"><a href=\"#Binary-Search-Tree性质\" class=\"headerlink\" title=\"Binary Search Tree性质\"></a>Binary Search Tree性质</h2><p>这种题目是根据其性质，左孩子永远比根节点小，右孩子永远比根节点大</p>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235. Lowest Common Ancestor of a Binary Search Tree\"></a>235. Lowest Common Ancestor of a Binary Search Tree</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(self, root, p, q)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type p: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type q: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &gt; q.val:</span><br><span class=\"line\">            p,q = q,p</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &lt;= root.val <span class=\"keyword\">and</span> q.val &gt;= root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> q.val &lt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &gt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br></pre></td></tr></table></figure>\n<h3 id=\"270-Closest-Binary-Search-Tree-Value\"><a href=\"#270-Closest-Binary-Search-Tree-Value\" class=\"headerlink\" title=\"270. Closest Binary Search Tree Value\"></a>270. Closest Binary Search Tree Value</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closestValue</span><span class=\"params\">(self, root, target)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type target: float</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        r = root.val</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> abs(root.val - target) &lt; abs(r - target):</span><br><span class=\"line\">                r = root.val <span class=\"comment\"># generate new node</span></span><br><span class=\"line\">            root = root.left <span class=\"keyword\">if</span> target &lt; root.val <span class=\"keyword\">else</span> root.right</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<h3 id=\"272-Closest-Binary-Search-Tree-Value-II\"><a href=\"#272-Closest-Binary-Search-Tree-Value-II\" class=\"headerlink\" title=\"272. Closest Binary Search Tree Value II\"></a>272. Closest Binary Search Tree Value II</h3><p>这道题要维持一个k长度的list，所以可以中序遍历，然后不断更新最后添加元素和队列首元素与target的差值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closestKValues</span><span class=\"params\">(self, root, target, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type target: float</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.helper(root, target, k ,res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, target, k, res)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.helper(root.left, target, k, res)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(res) &lt; k:</span><br><span class=\"line\">            res.append(root.val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> abs(target - root.val) &lt; abs(target - res[<span class=\"number\">0</span>]):</span><br><span class=\"line\">                res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                res.append(root.val)</span><br><span class=\"line\">                </span><br><span class=\"line\">        self.helper(root.right, target , k , res)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Tree的性质\"><a href=\"#Tree的性质\" class=\"headerlink\" title=\"Tree的性质\"></a>Tree的性质</h1><h2 id=\"Divide-and-Conquer模版\"><a href=\"#Divide-and-Conquer模版\" class=\"headerlink\" title=\"Divide and Conquer模版\"></a>Divide and Conquer模版</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traversal</span><span class=\"params\">(root)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># none or leaf</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">\t\t<span class=\"comment\"># do sth</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># divide</span></span><br><span class=\"line\">\tleft = traversal(root.left)</span><br><span class=\"line\">\tright = traversal(root.right)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># Conquer</span></span><br><span class=\"line\">\tres = <span class=\"comment\"># merge </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p>T O(n) 一般是遍历所有点<br>S O(h) 用堆栈来做的话是遍历所有点<br>  O(n) 用队列实现遍历所有点</p>","more":"<h3 id=\"104-Maximum-Depth-of-Binary-Tree\"><a href=\"#104-Maximum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"104. Maximum Depth of Binary Tree\"></a>104. Maximum Depth of Binary Tree</h3><p>深度等于子树高度+1<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.maxDepth(root.left)</span><br><span class=\"line\">        right = self.maxDepth(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max(left,right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"111-Minimum-Depth-of-Binary-Tree\"><a href=\"#111-Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"111. Minimum Depth of Binary Tree\"></a>111. Minimum Depth of Binary Tree</h3><p>和上一道题相比，需要判断树的情况，如果一个node的左儿子为空 右儿子不空 从root 到左儿子的路径不算是minimum depth<br>因为左儿子不算这个node的leaf node。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minDepth</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.minDepth(root.left)</span><br><span class=\"line\">        right = self.minDepth(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> left:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> right+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(left,right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"110-Balanced-Binary-Tree\"><a href=\"#110-Balanced-Binary-Tree\" class=\"headerlink\" title=\"110. Balanced Binary Tree\"></a>110. Balanced Binary Tree</h3><p>这道题和上面的类似，都是找深度，由于要返回一个boolean值，所以多用一个helper function</p>\n<p>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isBalanced</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(root) == <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        left = self.isBalanced(root.left)</span><br><span class=\"line\">        right = self.isBalanced(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> left == <span class=\"number\">-1</span> <span class=\"keyword\">or</span> right == <span class=\"number\">-1</span> <span class=\"keyword\">or</span> abs(left-right) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> max(left, right) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"100-Same-Tree\"><a href=\"#100-Same-Tree\" class=\"headerlink\" title=\"100. Same Tree\"></a>100. Same Tree</h3><p>我们考虑一下结束条件，如果两个结点都是null，也就是到头了，那么返回true。如果其中一个是null，说明在一棵树上结点到头，另一棵树结点还没结束，即树不相同，或者两个结点都非空，并且结点值不相同，返回false。最后递归处理两个结点的左右子树，返回左右子树递归的与结果即可。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSameTree</span><span class=\"params\">(self, p, q)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type p: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type q: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> q:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> p <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> q:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val != q.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.isSameTree(p.left, q.left) <span class=\"keyword\">and</span> self.isSameTree(p.right, q.right)</span><br></pre></td></tr></table></figure>\n<h3 id=\"101-Symmetric-Tree\"><a href=\"#101-Symmetric-Tree\" class=\"headerlink\" title=\"101. Symmetric Tree\"></a>101. Symmetric Tree</h3><p>本质上和上一题一样，区别就是从两棵树到左右孩子。<br>T O(n)<br>S O(h)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(root.left, root.right)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(self, node1, node2)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node1 <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> node2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node1.val != node2.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.check(node1.left, node2.right) <span class=\"keyword\">and</span> self.check(node1.right, node2.left)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三种遍历\"><a href=\"#三种遍历\" class=\"headerlink\" title=\"三种遍历\"></a>三种遍历</h2><h3 id=\"recursion\"><a href=\"#recursion\" class=\"headerlink\" title=\"recursion\"></a>recursion</h3><p>recursion的方法很简单 Time O(n) Space O(1)  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">orderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">         </span><br><span class=\"line\">        self.traverse(root, res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">traverse</span><span class=\"params\">(self, root, res)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        res.append(root.val) <span class=\"comment\"># preorder</span></span><br><span class=\"line\">        self.traverse(root.left, res)</span><br><span class=\"line\">        <span class=\"comment\">## res.append(root.val) # inorder</span></span><br><span class=\"line\">        self.traverse(root.right, res)</span><br><span class=\"line\">        <span class=\"comment\">## res.append(root.val) # postorder</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"iterative\"><a href=\"#iterative\" class=\"headerlink\" title=\"iterative\"></a>iterative</h3><p>因为不能使用recursion，所以我们要模拟构建栈。  </p>\n<h4 id=\"前序遍历-pre-order\"><a href=\"#前序遍历-pre-order\" class=\"headerlink\" title=\"前序遍历(pre-order):\"></a>前序遍历(pre-order):</h4><p>根-&gt;左-&gt;右1. 对root异常处理 2.cur 指向root, 循环条件为node!=null || !stack.isEmpty() 3.当cur不为空，就压入stack,并将元素加入结果，cur继续往左边找 4.当cur为空，就cur就为pop出的栈顶元素,.cur继续往右边找. 5.返回最终结果集合.<br>T O(n)<br>S O(h)  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">preorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">                stack.append(node)</span><br><span class=\"line\">                res.append(node.val)</span><br><span class=\"line\">                node = node.left</span><br><span class=\"line\">            node = stack.pop()</span><br><span class=\"line\">            node = node.right</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h4 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h4><p>本质上是一样的，先访问左孩子所以就一路到底</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        node = root</span><br><span class=\"line\">        <span class=\"keyword\">while</span> node <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> node:</span><br><span class=\"line\">                stack.append(node)</span><br><span class=\"line\">                </span><br><span class=\"line\">                node = node.left</span><br><span class=\"line\">            node = stack.pop()</span><br><span class=\"line\">            res.append(node.val)</span><br><span class=\"line\">            node = node.right</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h4 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h4><p>这个需要一点技巧以及练习，因为根节点需要访问两次，所以就需要判断是否已经访问过右节点了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        stack = []</span><br><span class=\"line\">        pre = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> root <span class=\"keyword\">or</span> stack:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">                stack.append(root)</span><br><span class=\"line\">                root = root.left</span><br><span class=\"line\">            </span><br><span class=\"line\">            peak = stack[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> peak.right <span class=\"keyword\">and</span> peak.right != pre: <span class=\"comment\"># 如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点）就访问右结点 </span></span><br><span class=\"line\">                root = peak.right</span><br><span class=\"line\">            <span class=\"keyword\">else</span>: <span class=\"comment\"># 如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕 需要把栈顶元素加入结果并且回溯上一层</span></span><br><span class=\"line\"></span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">                res.append(peak.val)</span><br><span class=\"line\">                pre = peak</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<p>不过还有一种更加巧妙的办法，前序遍历和后续遍历能否直接颠倒呢？答案是否定的，我们来看看前序遍历：根-左子树-右子树<br>后序遍历：左子树-右子树-根 把前序遍历倒过来：右子树-左子树-根 ！左右子树相反，不能直接倒！<br>但是这题，哼哼哼，先左子树入栈，在右子树入栈！最后输出颠倒一下即可！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># @param root, a tree node</span></span><br><span class=\"line\">    <span class=\"comment\"># @return a list of integers</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">postorderTraversal</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        ans,q=[],[]</span><br><span class=\"line\">        q.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> q:</span><br><span class=\"line\">            cur=q.pop()          </span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.left: q.append(cur.left)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur.right: q.append(cur.right)</span><br><span class=\"line\">            ans.append(cur.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans[::<span class=\"number\">-1</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"116-Populating-Next-Right-Pointers-in-Each-Node\"><a href=\"#116-Populating-Next-Right-Pointers-in-Each-Node\" class=\"headerlink\" title=\"116. Populating Next Right Pointers in Each Node\"></a>116. Populating Next Right Pointers in Each Node</h3><p>前序遍历的性质的小变种题目<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># @param root, a tree link node</span></span><br><span class=\"line\">    <span class=\"comment\"># @return nothing</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            root.left.next = root.right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root.next:</span><br><span class=\"line\">                root.right.next = root.next.left</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                root.right.next = <span class=\"keyword\">None</span></span><br><span class=\"line\">        self.connect(root.left)</span><br><span class=\"line\">        self.connect(root.right)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"层序遍历\"><a href=\"#层序遍历\" class=\"headerlink\" title=\"层序遍历\"></a>层序遍历</h2><p>基本思想便是套用BFS模版，用queue实现，在Python中可以通过引入Deque</p>\n<h3 id=\"102-Binary-Tree-Level-Order-Traversal\"><a href=\"#102-Binary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"102. Binary Tree Level Order Traversal\"></a>102. Binary Tree Level Order Traversal</h3><p>这是基本题型，外层queue记录第几层，内层size记录当前层所存储的节点<br>  T O(V+E)<br>  S O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">levelOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"107-Binary-Tree-Level-Order-Traversal-II\"><a href=\"#107-Binary-Tree-Level-Order-Traversal-II\" class=\"headerlink\" title=\"107. Binary Tree Level Order Traversal II\"></a>107. Binary Tree Level Order Traversal II</h3><p>本质上和上一道题一样，只是在外层倒叙输出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">levelOrderBottom</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            **res.insert(<span class=\"number\">0</span>,list(temp))**</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"103-Binary-Tree-Zigzag-Level-Order-Traversal\"><a href=\"#103-Binary-Tree-Zigzag-Level-Order-Traversal\" class=\"headerlink\" title=\"103. Binary Tree Zigzag Level Order Traversal\"></a>103. Binary Tree Zigzag Level Order Traversal</h3><p>类似的题，在内层倒叙输出，设置flag记录奇偶</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zigzagLevelOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        **count = <span class=\"number\">0</span>**</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(root)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">**                <span class=\"keyword\">if</span> count % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                    temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> count % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    temp.insert(<span class=\"number\">0</span>,node.val)**</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(list(temp))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"637-Average-of-Levels-in-Binary-Tree\"><a href=\"#637-Average-of-Levels-in-Binary-Tree\" class=\"headerlink\" title=\"637.Average of Levels in Binary Tree\"></a>637.Average of Levels in Binary Tree</h3><p>层序遍历的基础上，每层的average</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">averageOfLevels</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[float]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [<span class=\"number\">0</span>]</span><br><span class=\"line\">        queue = [root]</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            size = len(queue)</span><br><span class=\"line\">            temp = []</span><br><span class=\"line\">            <span class=\"keyword\">while</span> size:</span><br><span class=\"line\">                node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                temp.append(node.val)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                    queue.append(node.left)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                    queue.append(node.right)</span><br><span class=\"line\">                size -= <span class=\"number\">1</span></span><br><span class=\"line\">            res.append(sum(temp)/float(len(temp)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h3 id=\"314-Binary-Tree-Vertical-Order-Traversal\"><a href=\"#314-Binary-Tree-Vertical-Order-Traversal\" class=\"headerlink\" title=\"314. Binary Tree Vertical Order Traversal\"></a>314. Binary Tree Vertical Order Traversal</h3><p>也是BFS traverse题，中间存贮index的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = None</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verticalOrder</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        queue = [(root,<span class=\"number\">0</span>)]</span><br><span class=\"line\">        dic = dict()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">            node, index = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.left:</span><br><span class=\"line\">                queue.append((node.left, index<span class=\"number\">-1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node.right:</span><br><span class=\"line\">                queue.append((node.right, index + <span class=\"number\">1</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">                dic[index] = []</span><br><span class=\"line\">            dic[index].append(node.val)</span><br><span class=\"line\">        minx,maxx = float(<span class=\"string\">'inf'</span>), float(<span class=\"string\">'-inf'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> dic.keys():</span><br><span class=\"line\">            minx = min(minx, key)</span><br><span class=\"line\">            maxx = max(maxx, key)</span><br><span class=\"line\">            </span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * (maxx - minx + <span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">            res[key-minx] = dic[key]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n<h1 id=\"Path系列问题\"><a href=\"#Path系列问题\" class=\"headerlink\" title=\"Path系列问题\"></a>Path系列问题</h1><h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><p>基本上是可以用递归和分治的方法来进行解决，存在解和所有解都是一样的操作</p>\n<h3 id=\"257-Binary-Tree-Paths\"><a href=\"#257-Binary-Tree-Paths\" class=\"headerlink\" title=\"257. Binary Tree Paths\"></a>257. Binary Tree Paths</h3><p>输出所有路径，DFS递归，然后到叶子结点的时候返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binaryTreePaths</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[str]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        self.helper(root, res, str(root.val))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, res, temp)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            res.append(temp)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.left:</span><br><span class=\"line\">            self.helper(root.left, res, temp + <span class=\"string\">'-&gt;'</span>+str(root.left.val))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.right:</span><br><span class=\"line\">            self.helper(root.right, res , temp + <span class=\"string\">'-&gt;'</span>+str(root.right.val))</span><br></pre></td></tr></table></figure>\n<h3 id=\"112-Path-Sum\"><a href=\"#112-Path-Sum\" class=\"headerlink\" title=\"112. Path Sum\"></a>112. Path Sum</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n)</span><br><span class=\"line\">S O(h)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasPathSum</span><span class=\"params\">(self, root, sum)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type sum: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right <span class=\"keyword\">and</span> root.val == sum:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.hasPathSum(root.left, sum - root.val) <span class=\"keyword\">or</span> self.hasPathSum(root.right, sum - root.val)</span><br></pre></td></tr></table></figure>\n<h3 id=\"113-Path-Sum-II\"><a href=\"#113-Path-Sum-II\" class=\"headerlink\" title=\"113. Path Sum II\"></a>113. Path Sum II</h3><p>发现解的时候需要list(temp)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pathSum</span><span class=\"params\">(self, root, sum)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type sum: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.helper(root, sum, res, [])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, target, res, temp)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right <span class=\"keyword\">and</span> root.val == target:</span><br><span class=\"line\">            res.append(list(temp+[root.val]))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.helper(root.left, target - root.val, res, temp+[root.val]) <span class=\"keyword\">or</span> self.helper(root.right, target - root.val, res, temp+[root.val])</span><br></pre></td></tr></table></figure>\n<h3 id=\"129-Sum-Root-to-Leaf-Numbers\"><a href=\"#129-Sum-Root-to-Leaf-Numbers\" class=\"headerlink\" title=\"129. Sum Root to Leaf Numbers\"></a>129. Sum Root to Leaf Numbers</h3><p>每一条往下传的时候，根据题目要求<code>prev * 10 + root.val</code>,然后分治相加</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sumNumbers</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.helper(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, total)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root.left <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> root.right:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> total * <span class=\"number\">10</span> + root.val</span><br><span class=\"line\">        left = self.helper(root.left, total*<span class=\"number\">10</span> + root.val)</span><br><span class=\"line\">        right = self.helper(root.right, total*<span class=\"number\">10</span> + root.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left + right</span><br></pre></td></tr></table></figure>\n<h3 id=\"124-Binary-Tree-Maximum-Path-Sum\"><a href=\"#124-Binary-Tree-Maximum-Path-Sum\" class=\"headerlink\" title=\"124. Binary Tree Maximum Path Sum\"></a>124. Binary Tree Maximum Path Sum</h3><p>这道题相比上一道题区别在于每个结点的local max 不一样，这道题是不需经过根节点的，所以可以变成无向图，然后分成四种情况: <code>root.val, root.val+root.left.val, root.val+root.right.val</code> 这三种是可以继续向上传的，<code>root.val+root.left.val+root.right.val</code>这种是不可以往上传的，所以这些情况可以进行local比较，最终返回global max</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxPathSum</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        maxSum = [float(<span class=\"string\">'-inf'</span>)]</span><br><span class=\"line\">        self.helper(root, maxSum)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSum[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, maxSum)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.helper(root.left, maxSum)</span><br><span class=\"line\">        right = self.helper(root.right, maxSum)</span><br><span class=\"line\">        temp = max(root.val + left, root.val+right, root.val)</span><br><span class=\"line\">        maxSum[<span class=\"number\">0</span>] = max(maxSum[<span class=\"number\">0</span>], temp, root.val+left+right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp</span><br></pre></td></tr></table></figure>\n<h3 id=\"563-Binary-Tree-Tilt\"><a href=\"#563-Binary-Tree-Tilt\" class=\"headerlink\" title=\"563. Binary Tree Tilt\"></a>563. Binary Tree Tilt</h3><p>这道题根据题设，每次结点的返回值是其左右孩子和本身的和，然后每次更新abs()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findTilt</span><span class=\"params\">(self, root)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        total = [<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        self.helper(root,total)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root,total)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        left = self.helper(root.left,total)</span><br><span class=\"line\">        right = self.helper(root.right,total)</span><br><span class=\"line\">        total[<span class=\"number\">0</span>] += abs(left - right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left+right+root.val <span class=\"comment\"># sum</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Binary-Search-Tree性质\"><a href=\"#Binary-Search-Tree性质\" class=\"headerlink\" title=\"Binary Search Tree性质\"></a>Binary Search Tree性质</h2><p>这种题目是根据其性质，左孩子永远比根节点小，右孩子永远比根节点大</p>\n<h3 id=\"235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\"><a href=\"#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree\" class=\"headerlink\" title=\"235. Lowest Common Ancestor of a Binary Search Tree\"></a>235. Lowest Common Ancestor of a Binary Search Tree</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(self, root, p, q)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type p: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type q: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &gt; q.val:</span><br><span class=\"line\">            p,q = q,p</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &lt;= root.val <span class=\"keyword\">and</span> q.val &gt;= root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        <span class=\"keyword\">if</span> q.val &lt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.val &gt; root.val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br></pre></td></tr></table></figure>\n<h3 id=\"270-Closest-Binary-Search-Tree-Value\"><a href=\"#270-Closest-Binary-Search-Tree-Value\" class=\"headerlink\" title=\"270. Closest Binary Search Tree Value\"></a>270. Closest Binary Search Tree Value</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closestValue</span><span class=\"params\">(self, root, target)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type target: float</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        r = root.val</span><br><span class=\"line\">        <span class=\"keyword\">while</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> abs(root.val - target) &lt; abs(r - target):</span><br><span class=\"line\">                r = root.val <span class=\"comment\"># generate new node</span></span><br><span class=\"line\">            root = root.left <span class=\"keyword\">if</span> target &lt; root.val <span class=\"keyword\">else</span> root.right</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r</span><br></pre></td></tr></table></figure>\n<h3 id=\"272-Closest-Binary-Search-Tree-Value-II\"><a href=\"#272-Closest-Binary-Search-Tree-Value-II\" class=\"headerlink\" title=\"272. Closest Binary Search Tree Value II\"></a>272. Closest Binary Search Tree Value II</h3><p>这道题要维持一个k长度的list，所以可以中序遍历，然后不断更新最后添加元素和队列首元素与target的差值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closestKValues</span><span class=\"params\">(self, root, target, k)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type root: TreeNode</span></span><br><span class=\"line\"><span class=\"string\">        :type target: float</span></span><br><span class=\"line\"><span class=\"string\">        :type k: int</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        self.helper(root, target, k ,res)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helper</span><span class=\"params\">(self, root, target, k, res)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        self.helper(root.left, target, k, res)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(res) &lt; k:</span><br><span class=\"line\">            res.append(root.val)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> abs(target - root.val) &lt; abs(target - res[<span class=\"number\">0</span>]):</span><br><span class=\"line\">                res.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                res.append(root.val)</span><br><span class=\"line\">                </span><br><span class=\"line\">        self.helper(root.right, target , k , res)</span><br></pre></td></tr></table></figure>"},{"title":"Union-Find总结","comments":1,"date":"2017-09-18T21:53:14.000Z","updated":"2017-09-18T21:53:14.000Z","_content":"# Union Find 总结\n## 介绍\n### 概念\n并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：  \nFind：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。  \nUnion：将两个子集合并成同一个集合。\n### 适用场景\n\n适合于判断，给出一组结点，判断他们是否联通。从判断是否为图（一个节点的两个边都会指向同一节点--构成三角形从而不再是树）到岛屿问题（如果节点不与其它节点联通，则会孤立成一个岛屿）\n\n### 实现思路\n建立n个分组，每个分组代表一堆可以互相联通的结点  \n遍历每对结点，找到他们各自所属的分组A, B  \n如果A != B，则将A, B分组union起来，表示A, B分组联通了  \n如果A == B，则跳过  （说明A，B已经在一个组里）\n<!--more-->\n初始化，每一个点都设置为单独的一个组，标记为index\n\n```python\ngroupTag = [i for i in range(n)]\n```\nFind操作是为每一个节点找到它的最远祖先，如果节点对应的数值为初始的index的话，证明其仍然为isolate，如果不是的话，存储的index为其祖先的index，这样就能find其最远祖先\n\n```python\ndef find(self, e, groupTag):\n    # isolate\n    if groupTag[e] == e:\n        return e\n    # group\n    else:\n        return self.find(groupTag[e], groupTag)\n```\nUnion操作,进来的这两个节点是联通的，union函数是将这两个节点合并为一个组。通过调用Find操作，对两个节点找到其祖先，然后如果祖先相同的话，证明这两个节点已经在一个组里，跳过；如果不是的话，将第二个节点的祖先设置为第一个节点。\n\n```python\ndef union(self, i, j, x, y, groupTag, n):\n    index1 = i*n+j\n    index2 = x*n+y\n    root1 = self.find(index1, groupTag)\n    root2 = self.find(index2, groupTag)\n    # already unioned\n    if root1 == root2:\n        return\n    else:\n        groupTag[root2] = root1\n```\n\n### 复杂度\nNearly to O（1）  \n参考 [Union-Find算法 动态连通性概念介绍](https://neo1218.github.io/unionfind/)\n\n## 题目\n200\tNumber of Islands\t34.8%\tMedium\t\n128\tLongest Consecutive Sequence\t37.0%\tHard\n130\tSurrounded Regions\t18.6%\tMedium\t\n547\tFriend Circles\t49.1%\tMedium\t\n305\tNumber of Islands II \t39.0%\tHard\t\n261\tGraph Valid Tree \t37.9%\tMedium\t\n323\tNumber of Connected Components in an Undirected Graph \n\n### 261. Graph Valid Tree\n判断一张图是否是一颗树的两个关键点：  \n不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)  \n满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)\n\n所以可以套用最简单的Union-Find模版来解这道题，判断条件为一个顶点的两个祖先为同一个组的话，False，因为这两个祖先顶点既然在一个组里，肯定已经联成一条线，这样这三个点就会成为环\n\n```python\nT O(n) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def validTree(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        group = [i for i in range(n)]\n        for e1, e2 in edges:\n            root1 = self.find(e1, group)\n            root2 = self.find(e2, group)\n            if root1 == root2:\n                return False\n            else:\n                group[root2] = root1\n        return len(edges) == n - 1\n    \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)\n        \n```\n\n### 323. Number of Connected Components in an Undirected Graph\n在上一题的基础上，算出有几个unconnected components，还是利用性质 不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)  \n满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)，每一次成功union操作后，孤立顶点数减1\n\n```python\nT O(n) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def countComponents(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        count = n\n        group = [i for i in range(n)]\n        for e1, e2 in edges:\n            root1 = self.find(e1, group)\n            root2 = self.find(e2, group)\n            if root1 == root2:\n                pass\n            else:\n                count -= 1\n                group[root2] = root1\n        return count\n    \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)\n```\n\n### 547. Friend Circles\n```\nInput: \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\nOutput: 1\nExplanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, \nso the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n```\n这道题和上一道题类似，算出孤立的朋友就好... trick的地方就是我们只用算一半的矩阵就好，因为If M[i][j] = 1, then M[j][i] = 1. 而且对角线一定为1\n\n```python\nT O(n^2) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def findCircleNum(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not M or not M[0]:\n            return 0\n        m = len(M)\n        group = [i for i in range(m)]\n        count = m\n        # init\n        \n        for i in range(m):\n            for j in range(i+1,m):\n                if M[i][j] == 1:\n                    p1 = self.find(i, group)\n                    p2 = self.find(j, group)\n                    if p1 != p2:\n                        count -= 1\n                        group[p2] = p1\n        return count\n                      \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)      \n```\n\n### 200. Number of Islands\n本质上和上面的策略相同，不过可以把二维的矩阵变为一维，联通条件为上下左右的方向需要为1\n\n```python\nclass Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        # TIME O(MN)\n        # SPACE O(MN)\n    \n        if not grid or not len(grid) or not grid[0]:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        # two dimension to one\n        groupTag = [0 for i in range(m*n)]\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    groupTag[i*n+j] = i*n + j\n                else:\n                    groupTag[i*n+j] = -1\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '0':\n                    continue\n                if j+1 < n and grid[i][j+1] == '1':\n                    self.union(i,j,i,j+1,groupTag,n)\n                if i+1 < m and grid[i+1][j] == '1':\n                    self.union(i,j,i+1,j,groupTag,n)\n        \n        count = 0\n        for i in range(len(groupTag)):\n            if groupTag[i] == i:\n                count += 1\n        return count\n        \n    def find(self, e, groupTag):\n        # isolate\n        if groupTag[e] == e:\n            return e\n        # group\n        else:\n            return self.find(groupTag[e], groupTag)\n    \n    def union(self, i, j, x, y, groupTag, n):\n        index1 = i*n+j\n        index2 = x*n+y\n        root1 = self.find(index1, groupTag)\n        root2 = self.find(index2, groupTag)\n        # already unioned\n        if root1 == root2:\n            return\n        else:\n            groupTag[root2] = root1\n```\n\n### 305. Number of Islands II\n在上一题的基础上，需要满足操作add，然后得出isolate的岛屿。  \n这道题需要建一个Union的类，这样每次调用类的操作能更好的减少时间空间复杂度，这次因为是需要在每次Add操作（isolate岛屿数量预先 count+1）的时候算出isolate的数量，所以可以对于每个新加入的点，向四周move一步，判断是否和已知岛屿联通，从而count-1\n\n```python\nclass Solution(object):\n    def numIslands2(self, m, n, positions):\n        ans = []\n        islands = Union()\n        for p in map(tuple, positions):\n            islands.add(p)\n            for dp in (0, 1), (0, -1), (1, 0), (-1, 0):\n                q = (p[0] + dp[0], p[1] + dp[1])\n                if q in islands.group:\n                    islands.union(p, q)\n            ans += [islands.count]\n        return ans\n\nclass Union(object):\n    def __init__(self):\n        self.group = {}\n        self.island = {}\n        self.count = 0\n\n    def add(self, p):\n        self.group[p] = p\n        self.island[p] = 1\n        self.count += 1\n\n    def find(self, i):\n        if i == self.group[i]:\n            return i\n        else:\n            return self.find(self.group[i])\n\n    def union(self, p, q):\n        root1, root2 = self.find(p), self.find(q)\n        if root1 == root2:\n            return\n        if self.island[root1] > self.island[root2]:\n            root1, root2 = root2, root1\n        self.group[root1] = root2\n        self.island[root2] += self.island[root1]\n        self.count -= 1\n```","source":"_posts/Union-Find总结.md","raw":"---\ntitle: Union-Find总结\ncomments: true\ndate: 2017-09-18 14:53:14\nupdated: 2017-09-18 14:53:14\ncategories: [Union-Find, DFS]\ntags: Leetcode\n---\n# Union Find 总结\n## 介绍\n### 概念\n并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：  \nFind：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。  \nUnion：将两个子集合并成同一个集合。\n### 适用场景\n\n适合于判断，给出一组结点，判断他们是否联通。从判断是否为图（一个节点的两个边都会指向同一节点--构成三角形从而不再是树）到岛屿问题（如果节点不与其它节点联通，则会孤立成一个岛屿）\n\n### 实现思路\n建立n个分组，每个分组代表一堆可以互相联通的结点  \n遍历每对结点，找到他们各自所属的分组A, B  \n如果A != B，则将A, B分组union起来，表示A, B分组联通了  \n如果A == B，则跳过  （说明A，B已经在一个组里）\n<!--more-->\n初始化，每一个点都设置为单独的一个组，标记为index\n\n```python\ngroupTag = [i for i in range(n)]\n```\nFind操作是为每一个节点找到它的最远祖先，如果节点对应的数值为初始的index的话，证明其仍然为isolate，如果不是的话，存储的index为其祖先的index，这样就能find其最远祖先\n\n```python\ndef find(self, e, groupTag):\n    # isolate\n    if groupTag[e] == e:\n        return e\n    # group\n    else:\n        return self.find(groupTag[e], groupTag)\n```\nUnion操作,进来的这两个节点是联通的，union函数是将这两个节点合并为一个组。通过调用Find操作，对两个节点找到其祖先，然后如果祖先相同的话，证明这两个节点已经在一个组里，跳过；如果不是的话，将第二个节点的祖先设置为第一个节点。\n\n```python\ndef union(self, i, j, x, y, groupTag, n):\n    index1 = i*n+j\n    index2 = x*n+y\n    root1 = self.find(index1, groupTag)\n    root2 = self.find(index2, groupTag)\n    # already unioned\n    if root1 == root2:\n        return\n    else:\n        groupTag[root2] = root1\n```\n\n### 复杂度\nNearly to O（1）  \n参考 [Union-Find算法 动态连通性概念介绍](https://neo1218.github.io/unionfind/)\n\n## 题目\n200\tNumber of Islands\t34.8%\tMedium\t\n128\tLongest Consecutive Sequence\t37.0%\tHard\n130\tSurrounded Regions\t18.6%\tMedium\t\n547\tFriend Circles\t49.1%\tMedium\t\n305\tNumber of Islands II \t39.0%\tHard\t\n261\tGraph Valid Tree \t37.9%\tMedium\t\n323\tNumber of Connected Components in an Undirected Graph \n\n### 261. Graph Valid Tree\n判断一张图是否是一颗树的两个关键点：  \n不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)  \n满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)\n\n所以可以套用最简单的Union-Find模版来解这道题，判断条件为一个顶点的两个祖先为同一个组的话，False，因为这两个祖先顶点既然在一个组里，肯定已经联成一条线，这样这三个点就会成为环\n\n```python\nT O(n) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def validTree(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        group = [i for i in range(n)]\n        for e1, e2 in edges:\n            root1 = self.find(e1, group)\n            root2 = self.find(e2, group)\n            if root1 == root2:\n                return False\n            else:\n                group[root2] = root1\n        return len(edges) == n - 1\n    \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)\n        \n```\n\n### 323. Number of Connected Components in an Undirected Graph\n在上一题的基础上，算出有几个unconnected components，还是利用性质 不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)  \n满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)，每一次成功union操作后，孤立顶点数减1\n\n```python\nT O(n) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def countComponents(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        count = n\n        group = [i for i in range(n)]\n        for e1, e2 in edges:\n            root1 = self.find(e1, group)\n            root2 = self.find(e2, group)\n            if root1 == root2:\n                pass\n            else:\n                count -= 1\n                group[root2] = root1\n        return count\n    \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)\n```\n\n### 547. Friend Circles\n```\nInput: \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\nOutput: 1\nExplanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, \nso the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.\n```\n这道题和上一道题类似，算出孤立的朋友就好... trick的地方就是我们只用算一半的矩阵就好，因为If M[i][j] = 1, then M[j][i] = 1. 而且对角线一定为1\n\n```python\nT O(n^2) union-find nearly o(1)\nS O(n)\nclass Solution(object):\n    def findCircleNum(self, M):\n        \"\"\"\n        :type M: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not M or not M[0]:\n            return 0\n        m = len(M)\n        group = [i for i in range(m)]\n        count = m\n        # init\n        \n        for i in range(m):\n            for j in range(i+1,m):\n                if M[i][j] == 1:\n                    p1 = self.find(i, group)\n                    p2 = self.find(j, group)\n                    if p1 != p2:\n                        count -= 1\n                        group[p2] = p1\n        return count\n                      \n    def find(self, e, group):\n        if e == group[e]:\n            return e\n        else:\n            return self.find(group[e], group)      \n```\n\n### 200. Number of Islands\n本质上和上面的策略相同，不过可以把二维的矩阵变为一维，联通条件为上下左右的方向需要为1\n\n```python\nclass Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        # TIME O(MN)\n        # SPACE O(MN)\n    \n        if not grid or not len(grid) or not grid[0]:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        # two dimension to one\n        groupTag = [0 for i in range(m*n)]\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '1':\n                    groupTag[i*n+j] = i*n + j\n                else:\n                    groupTag[i*n+j] = -1\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '0':\n                    continue\n                if j+1 < n and grid[i][j+1] == '1':\n                    self.union(i,j,i,j+1,groupTag,n)\n                if i+1 < m and grid[i+1][j] == '1':\n                    self.union(i,j,i+1,j,groupTag,n)\n        \n        count = 0\n        for i in range(len(groupTag)):\n            if groupTag[i] == i:\n                count += 1\n        return count\n        \n    def find(self, e, groupTag):\n        # isolate\n        if groupTag[e] == e:\n            return e\n        # group\n        else:\n            return self.find(groupTag[e], groupTag)\n    \n    def union(self, i, j, x, y, groupTag, n):\n        index1 = i*n+j\n        index2 = x*n+y\n        root1 = self.find(index1, groupTag)\n        root2 = self.find(index2, groupTag)\n        # already unioned\n        if root1 == root2:\n            return\n        else:\n            groupTag[root2] = root1\n```\n\n### 305. Number of Islands II\n在上一题的基础上，需要满足操作add，然后得出isolate的岛屿。  \n这道题需要建一个Union的类，这样每次调用类的操作能更好的减少时间空间复杂度，这次因为是需要在每次Add操作（isolate岛屿数量预先 count+1）的时候算出isolate的数量，所以可以对于每个新加入的点，向四周move一步，判断是否和已知岛屿联通，从而count-1\n\n```python\nclass Solution(object):\n    def numIslands2(self, m, n, positions):\n        ans = []\n        islands = Union()\n        for p in map(tuple, positions):\n            islands.add(p)\n            for dp in (0, 1), (0, -1), (1, 0), (-1, 0):\n                q = (p[0] + dp[0], p[1] + dp[1])\n                if q in islands.group:\n                    islands.union(p, q)\n            ans += [islands.count]\n        return ans\n\nclass Union(object):\n    def __init__(self):\n        self.group = {}\n        self.island = {}\n        self.count = 0\n\n    def add(self, p):\n        self.group[p] = p\n        self.island[p] = 1\n        self.count += 1\n\n    def find(self, i):\n        if i == self.group[i]:\n            return i\n        else:\n            return self.find(self.group[i])\n\n    def union(self, p, q):\n        root1, root2 = self.find(p), self.find(q)\n        if root1 == root2:\n            return\n        if self.island[root1] > self.island[root2]:\n            root1, root2 = root2, root1\n        self.group[root1] = root2\n        self.island[root2] += self.island[root1]\n        self.count -= 1\n```","slug":"Union-Find总结","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfk0029m2ca1xrnsnk8","content":"<h1 id=\"Union-Find-总结\"><a href=\"#Union-Find-总结\" class=\"headerlink\" title=\"Union Find 总结\"></a>Union Find 总结</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：<br>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。<br>Union：将两个子集合并成同一个集合。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适合于判断，给出一组结点，判断他们是否联通。从判断是否为图（一个节点的两个边都会指向同一节点–构成三角形从而不再是树）到岛屿问题（如果节点不与其它节点联通，则会孤立成一个岛屿）</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>建立n个分组，每个分组代表一堆可以互相联通的结点<br>遍历每对结点，找到他们各自所属的分组A, B<br>如果A != B，则将A, B分组union起来，表示A, B分组联通了<br>如果A == B，则跳过  （说明A，B已经在一个组里）<br><a id=\"more\"></a><br>初始化，每一个点都设置为单独的一个组，标记为index</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupTag = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br></pre></td></tr></table></figure>\n<p>Find操作是为每一个节点找到它的最远祖先，如果节点对应的数值为初始的index的话，证明其仍然为isolate，如果不是的话，存储的index为其祖先的index，这样就能find其最远祖先</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, groupTag)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># isolate</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> groupTag[e] == e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e</span><br><span class=\"line\">    <span class=\"comment\"># group</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(groupTag[e], groupTag)</span><br></pre></td></tr></table></figure>\n<p>Union操作,进来的这两个节点是联通的，union函数是将这两个节点合并为一个组。通过调用Find操作，对两个节点找到其祖先，然后如果祖先相同的话，证明这两个节点已经在一个组里，跳过；如果不是的话，将第二个节点的祖先设置为第一个节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class=\"line\">    index1 = i*n+j</span><br><span class=\"line\">    index2 = x*n+y</span><br><span class=\"line\">    root1 = self.find(index1, groupTag)</span><br><span class=\"line\">    root2 = self.find(index2, groupTag)</span><br><span class=\"line\">    <span class=\"comment\"># already unioned</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        groupTag[root2] = root1</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><p>Nearly to O（1）<br>参考 <a href=\"https://neo1218.github.io/unionfind/\" target=\"_blank\" rel=\"noopener\">Union-Find算法 动态连通性概念介绍</a></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>200    Number of Islands    34.8%    Medium<br>128    Longest Consecutive Sequence    37.0%    Hard<br>130    Surrounded Regions    18.6%    Medium<br>547    Friend Circles    49.1%    Medium<br>305    Number of Islands II     39.0%    Hard<br>261    Graph Valid Tree     37.9%    Medium<br>323    Number of Connected Components in an Undirected Graph </p>\n<h3 id=\"261-Graph-Valid-Tree\"><a href=\"#261-Graph-Valid-Tree\" class=\"headerlink\" title=\"261. Graph Valid Tree\"></a>261. Graph Valid Tree</h3><p>判断一张图是否是一颗树的两个关键点：<br>不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)</p>\n<p>所以可以套用最简单的Union-Find模版来解这道题，判断条件为一个顶点的两个祖先为同一个组的话，False，因为这两个祖先顶点既然在一个组里，肯定已经联成一条线，这样这三个点就会成为环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validTree</span><span class=\"params\">(self, n, edges)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type edges: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e1, e2 <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            root1 = self.find(e1, group)</span><br><span class=\"line\">            root2 = self.find(e2, group)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                group[root2] = root1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(edges) == n - <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"323-Number-of-Connected-Components-in-an-Undirected-Graph\"><a href=\"#323-Number-of-Connected-Components-in-an-Undirected-Graph\" class=\"headerlink\" title=\"323. Number of Connected Components in an Undirected Graph\"></a>323. Number of Connected Components in an Undirected Graph</h3><p>在上一题的基础上，算出有几个unconnected components，还是利用性质 不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)，每一次成功union操作后，孤立顶点数减1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countComponents</span><span class=\"params\">(self, n, edges)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type edges: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = n</span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e1, e2 <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            root1 = self.find(e1, group)</span><br><span class=\"line\">            root2 = self.find(e2, group)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                count -= <span class=\"number\">1</span></span><br><span class=\"line\">                group[root2] = root1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"547-Friend-Circles\"><a href=\"#547-Friend-Circles\" class=\"headerlink\" title=\"547. Friend Circles\"></a>547. Friend Circles</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: </span><br><span class=\"line\">[[1,1,0],</span><br><span class=\"line\"> [1,1,1],</span><br><span class=\"line\"> [0,1,1]]</span><br><span class=\"line\">Output: 1</span><br><span class=\"line\">Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, </span><br><span class=\"line\">so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.</span><br></pre></td></tr></table></figure>\n<p>这道题和上一道题类似，算出孤立的朋友就好… trick的地方就是我们只用算一半的矩阵就好，因为If M[i][j] = 1, then M[j][i] = 1. 而且对角线一定为1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n^<span class=\"number\">2</span>) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCircleNum</span><span class=\"params\">(self, M)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type M: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> M <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> M[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(M)</span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        count = m</span><br><span class=\"line\">        <span class=\"comment\"># init</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> M[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    p1 = self.find(i, group)</span><br><span class=\"line\">                    p2 = self.find(j, group)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> p1 != p2:</span><br><span class=\"line\">                        count -= <span class=\"number\">1</span></span><br><span class=\"line\">                        group[p2] = p1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">                      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"200-Number-of-Islands\"><a href=\"#200-Number-of-Islands\" class=\"headerlink\" title=\"200. Number of Islands\"></a>200. Number of Islands</h3><p>本质上和上面的策略相同，不过可以把二维的矩阵变为一维，联通条件为上下左右的方向需要为1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># TIME O(MN)</span></span><br><span class=\"line\">        <span class=\"comment\"># SPACE O(MN)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> grid <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> len(grid) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> grid[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># two dimension to one</span></span><br><span class=\"line\">        groupTag = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m*n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    groupTag[i*n+j] = i*n + j</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    groupTag[i*n+j] = <span class=\"number\">-1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'0'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> j+<span class=\"number\">1</span> &lt; n <span class=\"keyword\">and</span> grid[i][j+<span class=\"number\">1</span>] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    self.union(i,j,i,j+<span class=\"number\">1</span>,groupTag,n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> &lt; m <span class=\"keyword\">and</span> grid[i+<span class=\"number\">1</span>][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    self.union(i,j,i+<span class=\"number\">1</span>,j,groupTag,n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(groupTag)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> groupTag[i] == i:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, groupTag)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># isolate</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> groupTag[e] == e:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"comment\"># group</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(groupTag[e], groupTag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class=\"line\">        index1 = i*n+j</span><br><span class=\"line\">        index2 = x*n+y</span><br><span class=\"line\">        root1 = self.find(index1, groupTag)</span><br><span class=\"line\">        root2 = self.find(index2, groupTag)</span><br><span class=\"line\">        <span class=\"comment\"># already unioned</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            groupTag[root2] = root1</span><br></pre></td></tr></table></figure>\n<h3 id=\"305-Number-of-Islands-II\"><a href=\"#305-Number-of-Islands-II\" class=\"headerlink\" title=\"305. Number of Islands II\"></a>305. Number of Islands II</h3><p>在上一题的基础上，需要满足操作add，然后得出isolate的岛屿。<br>这道题需要建一个Union的类，这样每次调用类的操作能更好的减少时间空间复杂度，这次因为是需要在每次Add操作（isolate岛屿数量预先 count+1）的时候算出isolate的数量，所以可以对于每个新加入的点，向四周move一步，判断是否和已知岛屿联通，从而count-1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands2</span><span class=\"params\">(self, m, n, positions)</span>:</span></span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        islands = Union()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> map(tuple, positions):</span><br><span class=\"line\">            islands.add(p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> dp <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">-1</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">-1</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">                q = (p[<span class=\"number\">0</span>] + dp[<span class=\"number\">0</span>], p[<span class=\"number\">1</span>] + dp[<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> q <span class=\"keyword\">in</span> islands.group:</span><br><span class=\"line\">                    islands.union(p, q)</span><br><span class=\"line\">            ans += [islands.count]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Union</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.group = &#123;&#125;</span><br><span class=\"line\">        self.island = &#123;&#125;</span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, p)</span>:</span></span><br><span class=\"line\">        self.group[p] = p</span><br><span class=\"line\">        self.island[p] = <span class=\"number\">1</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == self.group[i]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(self.group[i])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, p, q)</span>:</span></span><br><span class=\"line\">        root1, root2 = self.find(p), self.find(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.island[root1] &gt; self.island[root2]:</span><br><span class=\"line\">            root1, root2 = root2, root1</span><br><span class=\"line\">        self.group[root1] = root2</span><br><span class=\"line\">        self.island[root2] += self.island[root1]</span><br><span class=\"line\">        self.count -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Union-Find-总结\"><a href=\"#Union-Find-总结\" class=\"headerlink\" title=\"Union Find 总结\"></a>Union Find 总结</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：<br>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。<br>Union：将两个子集合并成同一个集合。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>适合于判断，给出一组结点，判断他们是否联通。从判断是否为图（一个节点的两个边都会指向同一节点–构成三角形从而不再是树）到岛屿问题（如果节点不与其它节点联通，则会孤立成一个岛屿）</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>建立n个分组，每个分组代表一堆可以互相联通的结点<br>遍历每对结点，找到他们各自所属的分组A, B<br>如果A != B，则将A, B分组union起来，表示A, B分组联通了<br>如果A == B，则跳过  （说明A，B已经在一个组里）<br>","more":"<br>初始化，每一个点都设置为单独的一个组，标记为index</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupTag = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br></pre></td></tr></table></figure>\n<p>Find操作是为每一个节点找到它的最远祖先，如果节点对应的数值为初始的index的话，证明其仍然为isolate，如果不是的话，存储的index为其祖先的index，这样就能find其最远祖先</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, groupTag)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># isolate</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> groupTag[e] == e:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e</span><br><span class=\"line\">    <span class=\"comment\"># group</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(groupTag[e], groupTag)</span><br></pre></td></tr></table></figure>\n<p>Union操作,进来的这两个节点是联通的，union函数是将这两个节点合并为一个组。通过调用Find操作，对两个节点找到其祖先，然后如果祖先相同的话，证明这两个节点已经在一个组里，跳过；如果不是的话，将第二个节点的祖先设置为第一个节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class=\"line\">    index1 = i*n+j</span><br><span class=\"line\">    index2 = x*n+y</span><br><span class=\"line\">    root1 = self.find(index1, groupTag)</span><br><span class=\"line\">    root2 = self.find(index2, groupTag)</span><br><span class=\"line\">    <span class=\"comment\"># already unioned</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        groupTag[root2] = root1</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><p>Nearly to O（1）<br>参考 <a href=\"https://neo1218.github.io/unionfind/\" target=\"_blank\" rel=\"noopener\">Union-Find算法 动态连通性概念介绍</a></p>\n<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>200    Number of Islands    34.8%    Medium<br>128    Longest Consecutive Sequence    37.0%    Hard<br>130    Surrounded Regions    18.6%    Medium<br>547    Friend Circles    49.1%    Medium<br>305    Number of Islands II     39.0%    Hard<br>261    Graph Valid Tree     37.9%    Medium<br>323    Number of Connected Components in an Undirected Graph </p>\n<h3 id=\"261-Graph-Valid-Tree\"><a href=\"#261-Graph-Valid-Tree\" class=\"headerlink\" title=\"261. Graph Valid Tree\"></a>261. Graph Valid Tree</h3><p>判断一张图是否是一颗树的两个关键点：<br>不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)</p>\n<p>所以可以套用最简单的Union-Find模版来解这道题，判断条件为一个顶点的两个祖先为同一个组的话，False，因为这两个祖先顶点既然在一个组里，肯定已经联成一条线，这样这三个点就会成为环</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validTree</span><span class=\"params\">(self, n, edges)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type edges: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: bool</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e1, e2 <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            root1 = self.find(e1, group)</span><br><span class=\"line\">            root2 = self.find(e2, group)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                group[root2] = root1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(edges) == n - <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"323-Number-of-Connected-Components-in-an-Undirected-Graph\"><a href=\"#323-Number-of-Connected-Components-in-an-Undirected-Graph\" class=\"headerlink\" title=\"323. Number of Connected Components in an Undirected Graph\"></a>323. Number of Connected Components in an Undirected Graph</h3><p>在上一题的基础上，算出有几个unconnected components，还是利用性质 不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)，每一次成功union操作后，孤立顶点数减1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countComponents</span><span class=\"params\">(self, n, edges)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type n: int</span></span><br><span class=\"line\"><span class=\"string\">        :type edges: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        count = n</span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e1, e2 <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">            root1 = self.find(e1, group)</span><br><span class=\"line\">            root2 = self.find(e2, group)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                count -= <span class=\"number\">1</span></span><br><span class=\"line\">                group[root2] = root1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"547-Friend-Circles\"><a href=\"#547-Friend-Circles\" class=\"headerlink\" title=\"547. Friend Circles\"></a>547. Friend Circles</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: </span><br><span class=\"line\">[[1,1,0],</span><br><span class=\"line\"> [1,1,1],</span><br><span class=\"line\"> [0,1,1]]</span><br><span class=\"line\">Output: 1</span><br><span class=\"line\">Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, </span><br><span class=\"line\">so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.</span><br></pre></td></tr></table></figure>\n<p>这道题和上一道题类似，算出孤立的朋友就好… trick的地方就是我们只用算一半的矩阵就好，因为If M[i][j] = 1, then M[j][i] = 1. 而且对角线一定为1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T O(n^<span class=\"number\">2</span>) union-find nearly o(<span class=\"number\">1</span>)</span><br><span class=\"line\">S O(n)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findCircleNum</span><span class=\"params\">(self, M)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type M: List[List[int]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> M <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> M[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(M)</span><br><span class=\"line\">        group = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m)]</span><br><span class=\"line\">        count = m</span><br><span class=\"line\">        <span class=\"comment\"># init</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>,m):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> M[i][j] == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    p1 = self.find(i, group)</span><br><span class=\"line\">                    p2 = self.find(j, group)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> p1 != p2:</span><br><span class=\"line\">                        count -= <span class=\"number\">1</span></span><br><span class=\"line\">                        group[p2] = p1</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">                      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, group)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e == group[e]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure>\n<h3 id=\"200-Number-of-Islands\"><a href=\"#200-Number-of-Islands\" class=\"headerlink\" title=\"200. Number of Islands\"></a>200. Number of Islands</h3><p>本质上和上面的策略相同，不过可以把二维的矩阵变为一维，联通条件为上下左右的方向需要为1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands</span><span class=\"params\">(self, grid)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type grid: List[List[str]]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># TIME O(MN)</span></span><br><span class=\"line\">        <span class=\"comment\"># SPACE O(MN)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> grid <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> len(grid) <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> grid[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        m = len(grid)</span><br><span class=\"line\">        n = len(grid[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># two dimension to one</span></span><br><span class=\"line\">        groupTag = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m*n)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    groupTag[i*n+j] = i*n + j</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    groupTag[i*n+j] = <span class=\"number\">-1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> grid[i][j] == <span class=\"string\">'0'</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> j+<span class=\"number\">1</span> &lt; n <span class=\"keyword\">and</span> grid[i][j+<span class=\"number\">1</span>] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    self.union(i,j,i,j+<span class=\"number\">1</span>,groupTag,n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> &lt; m <span class=\"keyword\">and</span> grid[i+<span class=\"number\">1</span>][j] == <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    self.union(i,j,i+<span class=\"number\">1</span>,j,groupTag,n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(groupTag)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> groupTag[i] == i:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, e, groupTag)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># isolate</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> groupTag[e] == e:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e</span><br><span class=\"line\">        <span class=\"comment\"># group</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(groupTag[e], groupTag)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class=\"line\">        index1 = i*n+j</span><br><span class=\"line\">        index2 = x*n+y</span><br><span class=\"line\">        root1 = self.find(index1, groupTag)</span><br><span class=\"line\">        root2 = self.find(index2, groupTag)</span><br><span class=\"line\">        <span class=\"comment\"># already unioned</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            groupTag[root2] = root1</span><br></pre></td></tr></table></figure>\n<h3 id=\"305-Number-of-Islands-II\"><a href=\"#305-Number-of-Islands-II\" class=\"headerlink\" title=\"305. Number of Islands II\"></a>305. Number of Islands II</h3><p>在上一题的基础上，需要满足操作add，然后得出isolate的岛屿。<br>这道题需要建一个Union的类，这样每次调用类的操作能更好的减少时间空间复杂度，这次因为是需要在每次Add操作（isolate岛屿数量预先 count+1）的时候算出isolate的数量，所以可以对于每个新加入的点，向四周move一步，判断是否和已知岛屿联通，从而count-1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numIslands2</span><span class=\"params\">(self, m, n, positions)</span>:</span></span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        islands = Union()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> map(tuple, positions):</span><br><span class=\"line\">            islands.add(p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> dp <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">-1</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">-1</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">                q = (p[<span class=\"number\">0</span>] + dp[<span class=\"number\">0</span>], p[<span class=\"number\">1</span>] + dp[<span class=\"number\">1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> q <span class=\"keyword\">in</span> islands.group:</span><br><span class=\"line\">                    islands.union(p, q)</span><br><span class=\"line\">            ans += [islands.count]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Union</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.group = &#123;&#125;</span><br><span class=\"line\">        self.island = &#123;&#125;</span><br><span class=\"line\">        self.count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(self, p)</span>:</span></span><br><span class=\"line\">        self.group[p] = p</span><br><span class=\"line\">        self.island[p] = <span class=\"number\">1</span></span><br><span class=\"line\">        self.count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span><span class=\"params\">(self, i)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == self.group[i]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.find(self.group[i])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">union</span><span class=\"params\">(self, p, q)</span>:</span></span><br><span class=\"line\">        root1, root2 = self.find(p), self.find(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root1 == root2:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.island[root1] &gt; self.island[root2]:</span><br><span class=\"line\">            root1, root2 = root2, root1</span><br><span class=\"line\">        self.group[root1] = root2</span><br><span class=\"line\">        self.island[root2] += self.island[root1]</span><br><span class=\"line\">        self.count -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>"},{"title":"Hello World","updated":"2017-04-21T03:18:54.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\nupdated: 2017-04-20 20:18:54\n\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-04-21T02:39:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfl002dm2camxi07r2g","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"关厢村野间切割出的方正家园-新闻","comments":1,"date":"2017-04-21T04:07:03.000Z","updated":"2017-04-21T04:17:04.000Z","_content":"# 关厢村野间切割出的方正家园\n方庄曾是北京规模最大的社区，除高层住宅外，也在社区中预留了大片绿地。\n\n方庄社区公园，远处为方庄一带著名的烂尾楼——金汇中心。\n\n方庄餐饮街的繁荣很大程度上得益于方庄社区的兴起和发展。\n\n南二环左安门桥和桥下的理发摊。\n\n胡村是方庄边缘最后的平房区和保留着“村”的行政命名的地方。\n<!--More-->\n\n　　从南二环永定门往东，要接近玉蜓桥的时候，南侧比肩矗立的高楼，向东南方向蔓延开去。从玉蜓桥到左安门桥一段，如果从空中俯瞰，以二环和三环为纬，以蒲黄榆路和左安门外方庄路为经，可以切出一个颇为周正的“方形”。“说它叫‘方庄’，也很形象。”上世纪30年代末出生于胡村9号的杨贵春说。如果坐在京津城际列车上，在刚出发和将到达的一刻，也能快速浏览到这一带高密度的楼群。\n\n## 胡村：方庄边缘最后的“村庄”\n当然，方庄并不因被切割出的地形而得名。杨贵春的解释很有意思：“1957年，公交车17路开通的时候，由天桥到宋家庄，中间来到了如今三环路附近的一站，叫什么名字呢，刚好附近那个村子就是方家庄，结果就叫了‘方庄’站。”可以想象一下上世纪50年代末，17路公交车要经过很多村庄，方家庄、蒲庄、黄土坑、榆树村、焦家花园、西马回甸、东马回甸、胡村等等。\n\n　　　坟地、黄土道、农田、不怕大雨怕小雨的土坯房、墨一样黑的夜……这些共同组成了杨贵春对于那时的方庄的记忆，“方家庄是一个特别小的村子，只有几户人家”。如今南北方向的交通干道蒲黄榆路，正是当时蒲庄、黄土坑、榆树村的所在地，杨贵春觉得，“蒲黄榆这个名字算是做了一个纪念”。1985年修蒲黄榆路，“以前也有一条道，旁边两条沟，积水满了就流入大道，俗话说，‘多年的大道熬成河’。”也就是从1985年，这一地区开始发生变化，“蒲黄榆路修好了，安上了路灯，夏天晚上，这一带几乎所有的人家都去路上乘凉、看路灯，觉得特别新鲜”。\n\n　　　杨贵春居住的胡村，现在看来，更像是漂浮在方庄边缘的孤岛，游离于周正的方形一角，又或者像是方家庄一带留下的历史遗迹，现在进进出出地铁五号线刘家窑站的人们，几乎不会注意到东北出口外的那几排平房依然延续着“村”的行政命名。“上世纪80年代初，建设方庄社区的时候，主要以蒲庄、黄土坑、榆树村为基础，就到胡村的北面为止。”胡村，就此被遗弃在方庄社区的西南角。“当时觉得很遗憾啊，怎么方庄没有划到我们这里；上世纪八九十年代，方庄可是著名的模范社区，住了很多名人。可是，现在想想，还是接地气好。”\n\n## 左安门关厢：光阴渗漏的乡野诗情\n\n将如今的方庄看做一个四方体，在南二环左安门桥东南一侧，桥下有“左安门关厢”的地名。这也是一片等待改造的平房区，与胡村在二、三环之间形成东北、西南的呼应之势。\n\n　　　关厢，地处城市和乡野之间。《北京街巷图志》记载，同样是城市干道，在南城，右安门内的道路比左安门内的更加笔直、宽阔，原因在于右安门内的道路在辽金时代就是城市干道，而左安门一带则一直是村野。左安门内的道路在明嘉靖年间修筑外城时才开始成型，而且没有经过很好的规划，道路的形状依旧保存了乡野气息。但这也曾让瑞典学者喜仁龙陶醉：“世界上有几个古都可以提供如此开阔的无建筑地面，可以在其城区内看到如此纯粹的田园生活呢？”\n\n　　　如今，左安门一带依然保留着几分关厢气息：颓唐的平房、寿衣店、小水果摊，而另一家小店前天天都在播送“拆迁甩卖”的吆喝……金泰福寿老年公寓，左安门关厢131号，这个由煤场改造成的平房公寓，有一百个床位。工作人员说：“位置很好，一个月平均一千多，相对城里其他地段算是性价比较高的。”当春天降临这里，爬山虎沿着墙根爬上来，就又有了一些光阴渗漏的诗情画意。\n\n## 方庄的招牌和作为招牌的方庄\n与左安门关厢隔着一条马路，就是颇为周正的方庄。上世纪80年代，方庄是当时修建的北京最大规模的住宅区。“当时要修建一处大型住宅区，要求距离老城不远，方庄这一块区域就处于城市的边缘。”北京市建筑设计院原院长熊明称。而北京作为一个城市，在那以前，还没太越出老城的边界。曾经，杨贵春对城内城外的理解是这样的：“小红门的人羡慕我们是城里的，因为我们的口音和城里是一样的。可是我们和二环内的人又不一样，那会儿我们家打二两烧酒，还要去永定门呢。”\n\n　　　但也正是从那时开始，“方庄”这个琅琅上口的名字慢慢长大成一个区域地理名词，从城市边缘逐渐纳入城市的怀抱。方庄，作为小区专用名称，始于1984年。当时需要一个与首都形象相配的高层次住宅小区，提升首都乃至国家的形象，同时解决中央和国家机关干部的住房问题。方庄最终入选。“规划建设方庄，很重要的一个原因也是为了改善知识分子的生活居住环境。”熊明谈及了电影《人到中年》的场景：“当时社会反响强烈，对改善知识分子居住环境呼声很高。”\n\n　　　张国立、宋丹丹、那英……一个个文化娱乐界名人曾经是方庄的招牌。作为方庄住宅区里的第一批住户，他们的名声让方庄在楼市上曾经颇有分量，一度被称为中国首个“富人聚集区”。\n\n　　　方庄居民习惯上将方庄环岛北侧家乐福超市后面的几栋高档住宅楼称为“小楼”。芳城园一区居民王女士称，那里是农业部、原电力部、原矿产资源部、外交部、全国人大等中央八大部委以及中国社科院、市文物局的职工宿舍楼，住在里面的基本上都是中高层干部。\n\n　　　芳古园一区居民李英杰说：“方庄的居民最初就是两大块，一是部委工作人员、高级知识分子、文艺界人士，另一部分就是本地的回迁户。”方庄住宅区开发之时，遇到的第一个问题是对当地农民的占地补偿，“协商的结果是开发商将方庄环岛南侧两个住宅区的部分楼盘补偿给当地菜农居住，这就是今天的芳群园和芳星园。”因此，方庄居民的特点是，北区芳城园和芳古园居住的多是富人和名人，而南区居民则以回迁户为主。在芳城园一区居民王女士看来：“芳城园的秩序是最好的。”\n\n## 作为家园的方庄：“逃离”与“珍藏”\n方庄餐饮街的兴起，在很大程度上得益于方庄的兴起和发展。从原本只有几家餐厅、只为满足周边居民就餐的需要，到如今方庄环岛东西两侧的各色餐厅绵延几百米，全聚德、金鼎轩和郭佬大串串香比邻，生意都不错。不少食客都是专门从其他地方赶过来吃饭，每到就餐时间，方庄环岛附近都会形成一定的拥堵，食客们总是为停车和等位而烦恼，摁喇叭多。蒲黄榆地铁口的门前又形成了一定的夜市，方庄环岛地下通道也形成了常规的地摊。这一切，都是因为居住而形成的人流。\n\n　　　“方庄的设计实际上是一个‘十字方块’的形状，城市干道从方庄穿过。当时的规划是：沿方庄西路是城市主干道，路旁以公共建筑为主。四个方块的中心是绿地和体育场。这在当时来说，配套设施是完善的。”熊明介绍，“因为城市迅速扩张，社区内的交通道路现在也变成了穿城交通，交通压力就更大了。”在配套设施方面，“房产开发时，配套设施的建设往往会滞后，方庄建设初期还是计划经济，配套设施建设和住宅区建设同步进行，但是对于俱乐部等文化设施的规划建设后来没有跟上”。\n\n　　　上世纪90年代末，演艺界的大多数人先后搬离了方庄，他们的离开曾被渲染成“逃离”。芳城园一区居民王女士说，今天的方庄老年人多，吸引的主要是工薪阶层住户，无论从年龄结构还是从收入结构上说，方庄都已经不复当年的辉煌。但是，也有人依然将方庄珍藏为最后的家园，偶尔被人提及的就是，吴冠中先生一直居住在此，直到去世——看起来，他和在方庄体育公园打门球的那些老人，没有任何区别。\n\n\n","source":"_posts/关厢村野间切割出的方正家园.md","raw":"---\ntitle: 关厢村野间切割出的方正家园-新闻\ncomments: true\ndate: 2017-04-20 21:07:03\nupdated: 2017-04-20 21:17:04\ncategories: History\ntags: 方庄\n---\n# 关厢村野间切割出的方正家园\n方庄曾是北京规模最大的社区，除高层住宅外，也在社区中预留了大片绿地。\n\n方庄社区公园，远处为方庄一带著名的烂尾楼——金汇中心。\n\n方庄餐饮街的繁荣很大程度上得益于方庄社区的兴起和发展。\n\n南二环左安门桥和桥下的理发摊。\n\n胡村是方庄边缘最后的平房区和保留着“村”的行政命名的地方。\n<!--More-->\n\n　　从南二环永定门往东，要接近玉蜓桥的时候，南侧比肩矗立的高楼，向东南方向蔓延开去。从玉蜓桥到左安门桥一段，如果从空中俯瞰，以二环和三环为纬，以蒲黄榆路和左安门外方庄路为经，可以切出一个颇为周正的“方形”。“说它叫‘方庄’，也很形象。”上世纪30年代末出生于胡村9号的杨贵春说。如果坐在京津城际列车上，在刚出发和将到达的一刻，也能快速浏览到这一带高密度的楼群。\n\n## 胡村：方庄边缘最后的“村庄”\n当然，方庄并不因被切割出的地形而得名。杨贵春的解释很有意思：“1957年，公交车17路开通的时候，由天桥到宋家庄，中间来到了如今三环路附近的一站，叫什么名字呢，刚好附近那个村子就是方家庄，结果就叫了‘方庄’站。”可以想象一下上世纪50年代末，17路公交车要经过很多村庄，方家庄、蒲庄、黄土坑、榆树村、焦家花园、西马回甸、东马回甸、胡村等等。\n\n　　　坟地、黄土道、农田、不怕大雨怕小雨的土坯房、墨一样黑的夜……这些共同组成了杨贵春对于那时的方庄的记忆，“方家庄是一个特别小的村子，只有几户人家”。如今南北方向的交通干道蒲黄榆路，正是当时蒲庄、黄土坑、榆树村的所在地，杨贵春觉得，“蒲黄榆这个名字算是做了一个纪念”。1985年修蒲黄榆路，“以前也有一条道，旁边两条沟，积水满了就流入大道，俗话说，‘多年的大道熬成河’。”也就是从1985年，这一地区开始发生变化，“蒲黄榆路修好了，安上了路灯，夏天晚上，这一带几乎所有的人家都去路上乘凉、看路灯，觉得特别新鲜”。\n\n　　　杨贵春居住的胡村，现在看来，更像是漂浮在方庄边缘的孤岛，游离于周正的方形一角，又或者像是方家庄一带留下的历史遗迹，现在进进出出地铁五号线刘家窑站的人们，几乎不会注意到东北出口外的那几排平房依然延续着“村”的行政命名。“上世纪80年代初，建设方庄社区的时候，主要以蒲庄、黄土坑、榆树村为基础，就到胡村的北面为止。”胡村，就此被遗弃在方庄社区的西南角。“当时觉得很遗憾啊，怎么方庄没有划到我们这里；上世纪八九十年代，方庄可是著名的模范社区，住了很多名人。可是，现在想想，还是接地气好。”\n\n## 左安门关厢：光阴渗漏的乡野诗情\n\n将如今的方庄看做一个四方体，在南二环左安门桥东南一侧，桥下有“左安门关厢”的地名。这也是一片等待改造的平房区，与胡村在二、三环之间形成东北、西南的呼应之势。\n\n　　　关厢，地处城市和乡野之间。《北京街巷图志》记载，同样是城市干道，在南城，右安门内的道路比左安门内的更加笔直、宽阔，原因在于右安门内的道路在辽金时代就是城市干道，而左安门一带则一直是村野。左安门内的道路在明嘉靖年间修筑外城时才开始成型，而且没有经过很好的规划，道路的形状依旧保存了乡野气息。但这也曾让瑞典学者喜仁龙陶醉：“世界上有几个古都可以提供如此开阔的无建筑地面，可以在其城区内看到如此纯粹的田园生活呢？”\n\n　　　如今，左安门一带依然保留着几分关厢气息：颓唐的平房、寿衣店、小水果摊，而另一家小店前天天都在播送“拆迁甩卖”的吆喝……金泰福寿老年公寓，左安门关厢131号，这个由煤场改造成的平房公寓，有一百个床位。工作人员说：“位置很好，一个月平均一千多，相对城里其他地段算是性价比较高的。”当春天降临这里，爬山虎沿着墙根爬上来，就又有了一些光阴渗漏的诗情画意。\n\n## 方庄的招牌和作为招牌的方庄\n与左安门关厢隔着一条马路，就是颇为周正的方庄。上世纪80年代，方庄是当时修建的北京最大规模的住宅区。“当时要修建一处大型住宅区，要求距离老城不远，方庄这一块区域就处于城市的边缘。”北京市建筑设计院原院长熊明称。而北京作为一个城市，在那以前，还没太越出老城的边界。曾经，杨贵春对城内城外的理解是这样的：“小红门的人羡慕我们是城里的，因为我们的口音和城里是一样的。可是我们和二环内的人又不一样，那会儿我们家打二两烧酒，还要去永定门呢。”\n\n　　　但也正是从那时开始，“方庄”这个琅琅上口的名字慢慢长大成一个区域地理名词，从城市边缘逐渐纳入城市的怀抱。方庄，作为小区专用名称，始于1984年。当时需要一个与首都形象相配的高层次住宅小区，提升首都乃至国家的形象，同时解决中央和国家机关干部的住房问题。方庄最终入选。“规划建设方庄，很重要的一个原因也是为了改善知识分子的生活居住环境。”熊明谈及了电影《人到中年》的场景：“当时社会反响强烈，对改善知识分子居住环境呼声很高。”\n\n　　　张国立、宋丹丹、那英……一个个文化娱乐界名人曾经是方庄的招牌。作为方庄住宅区里的第一批住户，他们的名声让方庄在楼市上曾经颇有分量，一度被称为中国首个“富人聚集区”。\n\n　　　方庄居民习惯上将方庄环岛北侧家乐福超市后面的几栋高档住宅楼称为“小楼”。芳城园一区居民王女士称，那里是农业部、原电力部、原矿产资源部、外交部、全国人大等中央八大部委以及中国社科院、市文物局的职工宿舍楼，住在里面的基本上都是中高层干部。\n\n　　　芳古园一区居民李英杰说：“方庄的居民最初就是两大块，一是部委工作人员、高级知识分子、文艺界人士，另一部分就是本地的回迁户。”方庄住宅区开发之时，遇到的第一个问题是对当地农民的占地补偿，“协商的结果是开发商将方庄环岛南侧两个住宅区的部分楼盘补偿给当地菜农居住，这就是今天的芳群园和芳星园。”因此，方庄居民的特点是，北区芳城园和芳古园居住的多是富人和名人，而南区居民则以回迁户为主。在芳城园一区居民王女士看来：“芳城园的秩序是最好的。”\n\n## 作为家园的方庄：“逃离”与“珍藏”\n方庄餐饮街的兴起，在很大程度上得益于方庄的兴起和发展。从原本只有几家餐厅、只为满足周边居民就餐的需要，到如今方庄环岛东西两侧的各色餐厅绵延几百米，全聚德、金鼎轩和郭佬大串串香比邻，生意都不错。不少食客都是专门从其他地方赶过来吃饭，每到就餐时间，方庄环岛附近都会形成一定的拥堵，食客们总是为停车和等位而烦恼，摁喇叭多。蒲黄榆地铁口的门前又形成了一定的夜市，方庄环岛地下通道也形成了常规的地摊。这一切，都是因为居住而形成的人流。\n\n　　　“方庄的设计实际上是一个‘十字方块’的形状，城市干道从方庄穿过。当时的规划是：沿方庄西路是城市主干道，路旁以公共建筑为主。四个方块的中心是绿地和体育场。这在当时来说，配套设施是完善的。”熊明介绍，“因为城市迅速扩张，社区内的交通道路现在也变成了穿城交通，交通压力就更大了。”在配套设施方面，“房产开发时，配套设施的建设往往会滞后，方庄建设初期还是计划经济，配套设施建设和住宅区建设同步进行，但是对于俱乐部等文化设施的规划建设后来没有跟上”。\n\n　　　上世纪90年代末，演艺界的大多数人先后搬离了方庄，他们的离开曾被渲染成“逃离”。芳城园一区居民王女士说，今天的方庄老年人多，吸引的主要是工薪阶层住户，无论从年龄结构还是从收入结构上说，方庄都已经不复当年的辉煌。但是，也有人依然将方庄珍藏为最后的家园，偶尔被人提及的就是，吴冠中先生一直居住在此，直到去世——看起来，他和在方庄体育公园打门球的那些老人，没有任何区别。\n\n\n","slug":"关厢村野间切割出的方正家园","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfm002hm2caps7mh8gs","content":"<h1 id=\"关厢村野间切割出的方正家园\"><a href=\"#关厢村野间切割出的方正家园\" class=\"headerlink\" title=\"关厢村野间切割出的方正家园\"></a>关厢村野间切割出的方正家园</h1><p>方庄曾是北京规模最大的社区，除高层住宅外，也在社区中预留了大片绿地。</p>\n<p>方庄社区公园，远处为方庄一带著名的烂尾楼——金汇中心。</p>\n<p>方庄餐饮街的繁荣很大程度上得益于方庄社区的兴起和发展。</p>\n<p>南二环左安门桥和桥下的理发摊。</p>\n<p>胡村是方庄边缘最后的平房区和保留着“村”的行政命名的地方。<br><a id=\"more\"></a></p>\n<p>　　从南二环永定门往东，要接近玉蜓桥的时候，南侧比肩矗立的高楼，向东南方向蔓延开去。从玉蜓桥到左安门桥一段，如果从空中俯瞰，以二环和三环为纬，以蒲黄榆路和左安门外方庄路为经，可以切出一个颇为周正的“方形”。“说它叫‘方庄’，也很形象。”上世纪30年代末出生于胡村9号的杨贵春说。如果坐在京津城际列车上，在刚出发和将到达的一刻，也能快速浏览到这一带高密度的楼群。</p>\n<h2 id=\"胡村：方庄边缘最后的“村庄”\"><a href=\"#胡村：方庄边缘最后的“村庄”\" class=\"headerlink\" title=\"胡村：方庄边缘最后的“村庄”\"></a>胡村：方庄边缘最后的“村庄”</h2><p>当然，方庄并不因被切割出的地形而得名。杨贵春的解释很有意思：“1957年，公交车17路开通的时候，由天桥到宋家庄，中间来到了如今三环路附近的一站，叫什么名字呢，刚好附近那个村子就是方家庄，结果就叫了‘方庄’站。”可以想象一下上世纪50年代末，17路公交车要经过很多村庄，方家庄、蒲庄、黄土坑、榆树村、焦家花园、西马回甸、东马回甸、胡村等等。</p>\n<p>　　　坟地、黄土道、农田、不怕大雨怕小雨的土坯房、墨一样黑的夜……这些共同组成了杨贵春对于那时的方庄的记忆，“方家庄是一个特别小的村子，只有几户人家”。如今南北方向的交通干道蒲黄榆路，正是当时蒲庄、黄土坑、榆树村的所在地，杨贵春觉得，“蒲黄榆这个名字算是做了一个纪念”。1985年修蒲黄榆路，“以前也有一条道，旁边两条沟，积水满了就流入大道，俗话说，‘多年的大道熬成河’。”也就是从1985年，这一地区开始发生变化，“蒲黄榆路修好了，安上了路灯，夏天晚上，这一带几乎所有的人家都去路上乘凉、看路灯，觉得特别新鲜”。</p>\n<p>　　　杨贵春居住的胡村，现在看来，更像是漂浮在方庄边缘的孤岛，游离于周正的方形一角，又或者像是方家庄一带留下的历史遗迹，现在进进出出地铁五号线刘家窑站的人们，几乎不会注意到东北出口外的那几排平房依然延续着“村”的行政命名。“上世纪80年代初，建设方庄社区的时候，主要以蒲庄、黄土坑、榆树村为基础，就到胡村的北面为止。”胡村，就此被遗弃在方庄社区的西南角。“当时觉得很遗憾啊，怎么方庄没有划到我们这里；上世纪八九十年代，方庄可是著名的模范社区，住了很多名人。可是，现在想想，还是接地气好。”</p>\n<h2 id=\"左安门关厢：光阴渗漏的乡野诗情\"><a href=\"#左安门关厢：光阴渗漏的乡野诗情\" class=\"headerlink\" title=\"左安门关厢：光阴渗漏的乡野诗情\"></a>左安门关厢：光阴渗漏的乡野诗情</h2><p>将如今的方庄看做一个四方体，在南二环左安门桥东南一侧，桥下有“左安门关厢”的地名。这也是一片等待改造的平房区，与胡村在二、三环之间形成东北、西南的呼应之势。</p>\n<p>　　　关厢，地处城市和乡野之间。《北京街巷图志》记载，同样是城市干道，在南城，右安门内的道路比左安门内的更加笔直、宽阔，原因在于右安门内的道路在辽金时代就是城市干道，而左安门一带则一直是村野。左安门内的道路在明嘉靖年间修筑外城时才开始成型，而且没有经过很好的规划，道路的形状依旧保存了乡野气息。但这也曾让瑞典学者喜仁龙陶醉：“世界上有几个古都可以提供如此开阔的无建筑地面，可以在其城区内看到如此纯粹的田园生活呢？”</p>\n<p>　　　如今，左安门一带依然保留着几分关厢气息：颓唐的平房、寿衣店、小水果摊，而另一家小店前天天都在播送“拆迁甩卖”的吆喝……金泰福寿老年公寓，左安门关厢131号，这个由煤场改造成的平房公寓，有一百个床位。工作人员说：“位置很好，一个月平均一千多，相对城里其他地段算是性价比较高的。”当春天降临这里，爬山虎沿着墙根爬上来，就又有了一些光阴渗漏的诗情画意。</p>\n<h2 id=\"方庄的招牌和作为招牌的方庄\"><a href=\"#方庄的招牌和作为招牌的方庄\" class=\"headerlink\" title=\"方庄的招牌和作为招牌的方庄\"></a>方庄的招牌和作为招牌的方庄</h2><p>与左安门关厢隔着一条马路，就是颇为周正的方庄。上世纪80年代，方庄是当时修建的北京最大规模的住宅区。“当时要修建一处大型住宅区，要求距离老城不远，方庄这一块区域就处于城市的边缘。”北京市建筑设计院原院长熊明称。而北京作为一个城市，在那以前，还没太越出老城的边界。曾经，杨贵春对城内城外的理解是这样的：“小红门的人羡慕我们是城里的，因为我们的口音和城里是一样的。可是我们和二环内的人又不一样，那会儿我们家打二两烧酒，还要去永定门呢。”</p>\n<p>　　　但也正是从那时开始，“方庄”这个琅琅上口的名字慢慢长大成一个区域地理名词，从城市边缘逐渐纳入城市的怀抱。方庄，作为小区专用名称，始于1984年。当时需要一个与首都形象相配的高层次住宅小区，提升首都乃至国家的形象，同时解决中央和国家机关干部的住房问题。方庄最终入选。“规划建设方庄，很重要的一个原因也是为了改善知识分子的生活居住环境。”熊明谈及了电影《人到中年》的场景：“当时社会反响强烈，对改善知识分子居住环境呼声很高。”</p>\n<p>　　　张国立、宋丹丹、那英……一个个文化娱乐界名人曾经是方庄的招牌。作为方庄住宅区里的第一批住户，他们的名声让方庄在楼市上曾经颇有分量，一度被称为中国首个“富人聚集区”。</p>\n<p>　　　方庄居民习惯上将方庄环岛北侧家乐福超市后面的几栋高档住宅楼称为“小楼”。芳城园一区居民王女士称，那里是农业部、原电力部、原矿产资源部、外交部、全国人大等中央八大部委以及中国社科院、市文物局的职工宿舍楼，住在里面的基本上都是中高层干部。</p>\n<p>　　　芳古园一区居民李英杰说：“方庄的居民最初就是两大块，一是部委工作人员、高级知识分子、文艺界人士，另一部分就是本地的回迁户。”方庄住宅区开发之时，遇到的第一个问题是对当地农民的占地补偿，“协商的结果是开发商将方庄环岛南侧两个住宅区的部分楼盘补偿给当地菜农居住，这就是今天的芳群园和芳星园。”因此，方庄居民的特点是，北区芳城园和芳古园居住的多是富人和名人，而南区居民则以回迁户为主。在芳城园一区居民王女士看来：“芳城园的秩序是最好的。”</p>\n<h2 id=\"作为家园的方庄：“逃离”与“珍藏”\"><a href=\"#作为家园的方庄：“逃离”与“珍藏”\" class=\"headerlink\" title=\"作为家园的方庄：“逃离”与“珍藏”\"></a>作为家园的方庄：“逃离”与“珍藏”</h2><p>方庄餐饮街的兴起，在很大程度上得益于方庄的兴起和发展。从原本只有几家餐厅、只为满足周边居民就餐的需要，到如今方庄环岛东西两侧的各色餐厅绵延几百米，全聚德、金鼎轩和郭佬大串串香比邻，生意都不错。不少食客都是专门从其他地方赶过来吃饭，每到就餐时间，方庄环岛附近都会形成一定的拥堵，食客们总是为停车和等位而烦恼，摁喇叭多。蒲黄榆地铁口的门前又形成了一定的夜市，方庄环岛地下通道也形成了常规的地摊。这一切，都是因为居住而形成的人流。</p>\n<p>　　　“方庄的设计实际上是一个‘十字方块’的形状，城市干道从方庄穿过。当时的规划是：沿方庄西路是城市主干道，路旁以公共建筑为主。四个方块的中心是绿地和体育场。这在当时来说，配套设施是完善的。”熊明介绍，“因为城市迅速扩张，社区内的交通道路现在也变成了穿城交通，交通压力就更大了。”在配套设施方面，“房产开发时，配套设施的建设往往会滞后，方庄建设初期还是计划经济，配套设施建设和住宅区建设同步进行，但是对于俱乐部等文化设施的规划建设后来没有跟上”。</p>\n<p>　　　上世纪90年代末，演艺界的大多数人先后搬离了方庄，他们的离开曾被渲染成“逃离”。芳城园一区居民王女士说，今天的方庄老年人多，吸引的主要是工薪阶层住户，无论从年龄结构还是从收入结构上说，方庄都已经不复当年的辉煌。但是，也有人依然将方庄珍藏为最后的家园，偶尔被人提及的就是，吴冠中先生一直居住在此，直到去世——看起来，他和在方庄体育公园打门球的那些老人，没有任何区别。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"关厢村野间切割出的方正家园\"><a href=\"#关厢村野间切割出的方正家园\" class=\"headerlink\" title=\"关厢村野间切割出的方正家园\"></a>关厢村野间切割出的方正家园</h1><p>方庄曾是北京规模最大的社区，除高层住宅外，也在社区中预留了大片绿地。</p>\n<p>方庄社区公园，远处为方庄一带著名的烂尾楼——金汇中心。</p>\n<p>方庄餐饮街的繁荣很大程度上得益于方庄社区的兴起和发展。</p>\n<p>南二环左安门桥和桥下的理发摊。</p>\n<p>胡村是方庄边缘最后的平房区和保留着“村”的行政命名的地方。<br>","more":"</p>\n<p>　　从南二环永定门往东，要接近玉蜓桥的时候，南侧比肩矗立的高楼，向东南方向蔓延开去。从玉蜓桥到左安门桥一段，如果从空中俯瞰，以二环和三环为纬，以蒲黄榆路和左安门外方庄路为经，可以切出一个颇为周正的“方形”。“说它叫‘方庄’，也很形象。”上世纪30年代末出生于胡村9号的杨贵春说。如果坐在京津城际列车上，在刚出发和将到达的一刻，也能快速浏览到这一带高密度的楼群。</p>\n<h2 id=\"胡村：方庄边缘最后的“村庄”\"><a href=\"#胡村：方庄边缘最后的“村庄”\" class=\"headerlink\" title=\"胡村：方庄边缘最后的“村庄”\"></a>胡村：方庄边缘最后的“村庄”</h2><p>当然，方庄并不因被切割出的地形而得名。杨贵春的解释很有意思：“1957年，公交车17路开通的时候，由天桥到宋家庄，中间来到了如今三环路附近的一站，叫什么名字呢，刚好附近那个村子就是方家庄，结果就叫了‘方庄’站。”可以想象一下上世纪50年代末，17路公交车要经过很多村庄，方家庄、蒲庄、黄土坑、榆树村、焦家花园、西马回甸、东马回甸、胡村等等。</p>\n<p>　　　坟地、黄土道、农田、不怕大雨怕小雨的土坯房、墨一样黑的夜……这些共同组成了杨贵春对于那时的方庄的记忆，“方家庄是一个特别小的村子，只有几户人家”。如今南北方向的交通干道蒲黄榆路，正是当时蒲庄、黄土坑、榆树村的所在地，杨贵春觉得，“蒲黄榆这个名字算是做了一个纪念”。1985年修蒲黄榆路，“以前也有一条道，旁边两条沟，积水满了就流入大道，俗话说，‘多年的大道熬成河’。”也就是从1985年，这一地区开始发生变化，“蒲黄榆路修好了，安上了路灯，夏天晚上，这一带几乎所有的人家都去路上乘凉、看路灯，觉得特别新鲜”。</p>\n<p>　　　杨贵春居住的胡村，现在看来，更像是漂浮在方庄边缘的孤岛，游离于周正的方形一角，又或者像是方家庄一带留下的历史遗迹，现在进进出出地铁五号线刘家窑站的人们，几乎不会注意到东北出口外的那几排平房依然延续着“村”的行政命名。“上世纪80年代初，建设方庄社区的时候，主要以蒲庄、黄土坑、榆树村为基础，就到胡村的北面为止。”胡村，就此被遗弃在方庄社区的西南角。“当时觉得很遗憾啊，怎么方庄没有划到我们这里；上世纪八九十年代，方庄可是著名的模范社区，住了很多名人。可是，现在想想，还是接地气好。”</p>\n<h2 id=\"左安门关厢：光阴渗漏的乡野诗情\"><a href=\"#左安门关厢：光阴渗漏的乡野诗情\" class=\"headerlink\" title=\"左安门关厢：光阴渗漏的乡野诗情\"></a>左安门关厢：光阴渗漏的乡野诗情</h2><p>将如今的方庄看做一个四方体，在南二环左安门桥东南一侧，桥下有“左安门关厢”的地名。这也是一片等待改造的平房区，与胡村在二、三环之间形成东北、西南的呼应之势。</p>\n<p>　　　关厢，地处城市和乡野之间。《北京街巷图志》记载，同样是城市干道，在南城，右安门内的道路比左安门内的更加笔直、宽阔，原因在于右安门内的道路在辽金时代就是城市干道，而左安门一带则一直是村野。左安门内的道路在明嘉靖年间修筑外城时才开始成型，而且没有经过很好的规划，道路的形状依旧保存了乡野气息。但这也曾让瑞典学者喜仁龙陶醉：“世界上有几个古都可以提供如此开阔的无建筑地面，可以在其城区内看到如此纯粹的田园生活呢？”</p>\n<p>　　　如今，左安门一带依然保留着几分关厢气息：颓唐的平房、寿衣店、小水果摊，而另一家小店前天天都在播送“拆迁甩卖”的吆喝……金泰福寿老年公寓，左安门关厢131号，这个由煤场改造成的平房公寓，有一百个床位。工作人员说：“位置很好，一个月平均一千多，相对城里其他地段算是性价比较高的。”当春天降临这里，爬山虎沿着墙根爬上来，就又有了一些光阴渗漏的诗情画意。</p>\n<h2 id=\"方庄的招牌和作为招牌的方庄\"><a href=\"#方庄的招牌和作为招牌的方庄\" class=\"headerlink\" title=\"方庄的招牌和作为招牌的方庄\"></a>方庄的招牌和作为招牌的方庄</h2><p>与左安门关厢隔着一条马路，就是颇为周正的方庄。上世纪80年代，方庄是当时修建的北京最大规模的住宅区。“当时要修建一处大型住宅区，要求距离老城不远，方庄这一块区域就处于城市的边缘。”北京市建筑设计院原院长熊明称。而北京作为一个城市，在那以前，还没太越出老城的边界。曾经，杨贵春对城内城外的理解是这样的：“小红门的人羡慕我们是城里的，因为我们的口音和城里是一样的。可是我们和二环内的人又不一样，那会儿我们家打二两烧酒，还要去永定门呢。”</p>\n<p>　　　但也正是从那时开始，“方庄”这个琅琅上口的名字慢慢长大成一个区域地理名词，从城市边缘逐渐纳入城市的怀抱。方庄，作为小区专用名称，始于1984年。当时需要一个与首都形象相配的高层次住宅小区，提升首都乃至国家的形象，同时解决中央和国家机关干部的住房问题。方庄最终入选。“规划建设方庄，很重要的一个原因也是为了改善知识分子的生活居住环境。”熊明谈及了电影《人到中年》的场景：“当时社会反响强烈，对改善知识分子居住环境呼声很高。”</p>\n<p>　　　张国立、宋丹丹、那英……一个个文化娱乐界名人曾经是方庄的招牌。作为方庄住宅区里的第一批住户，他们的名声让方庄在楼市上曾经颇有分量，一度被称为中国首个“富人聚集区”。</p>\n<p>　　　方庄居民习惯上将方庄环岛北侧家乐福超市后面的几栋高档住宅楼称为“小楼”。芳城园一区居民王女士称，那里是农业部、原电力部、原矿产资源部、外交部、全国人大等中央八大部委以及中国社科院、市文物局的职工宿舍楼，住在里面的基本上都是中高层干部。</p>\n<p>　　　芳古园一区居民李英杰说：“方庄的居民最初就是两大块，一是部委工作人员、高级知识分子、文艺界人士，另一部分就是本地的回迁户。”方庄住宅区开发之时，遇到的第一个问题是对当地农民的占地补偿，“协商的结果是开发商将方庄环岛南侧两个住宅区的部分楼盘补偿给当地菜农居住，这就是今天的芳群园和芳星园。”因此，方庄居民的特点是，北区芳城园和芳古园居住的多是富人和名人，而南区居民则以回迁户为主。在芳城园一区居民王女士看来：“芳城园的秩序是最好的。”</p>\n<h2 id=\"作为家园的方庄：“逃离”与“珍藏”\"><a href=\"#作为家园的方庄：“逃离”与“珍藏”\" class=\"headerlink\" title=\"作为家园的方庄：“逃离”与“珍藏”\"></a>作为家园的方庄：“逃离”与“珍藏”</h2><p>方庄餐饮街的兴起，在很大程度上得益于方庄的兴起和发展。从原本只有几家餐厅、只为满足周边居民就餐的需要，到如今方庄环岛东西两侧的各色餐厅绵延几百米，全聚德、金鼎轩和郭佬大串串香比邻，生意都不错。不少食客都是专门从其他地方赶过来吃饭，每到就餐时间，方庄环岛附近都会形成一定的拥堵，食客们总是为停车和等位而烦恼，摁喇叭多。蒲黄榆地铁口的门前又形成了一定的夜市，方庄环岛地下通道也形成了常规的地摊。这一切，都是因为居住而形成的人流。</p>\n<p>　　　“方庄的设计实际上是一个‘十字方块’的形状，城市干道从方庄穿过。当时的规划是：沿方庄西路是城市主干道，路旁以公共建筑为主。四个方块的中心是绿地和体育场。这在当时来说，配套设施是完善的。”熊明介绍，“因为城市迅速扩张，社区内的交通道路现在也变成了穿城交通，交通压力就更大了。”在配套设施方面，“房产开发时，配套设施的建设往往会滞后，方庄建设初期还是计划经济，配套设施建设和住宅区建设同步进行，但是对于俱乐部等文化设施的规划建设后来没有跟上”。</p>\n<p>　　　上世纪90年代末，演艺界的大多数人先后搬离了方庄，他们的离开曾被渲染成“逃离”。芳城园一区居民王女士说，今天的方庄老年人多，吸引的主要是工薪阶层住户，无论从年龄结构还是从收入结构上说，方庄都已经不复当年的辉煌。但是，也有人依然将方庄珍藏为最后的家园，偶尔被人提及的就是，吴冠中先生一直居住在此，直到去世——看起来，他和在方庄体育公园打门球的那些老人，没有任何区别。</p>"},{"title":"曾经的签名","comments":1,"date":"2017-04-21T05:26:58.000Z","updated":"2017-04-21T05:27:59.000Z","_content":"> 爱熄灭了灯，心围一座城\n\n--\n\n## I About \n- 彼时在错落中敏感，消逝在光明中的黑暗  \n- 我带着一丝诡异的微笑，从你的身边呼啸而过  \n- 若有所思，若即若离  \n<!--More-->\n\n## II Affection\n- 彼时的安息与无奈,交织在我心头之中,久久不能散去  \n- 电子的冲撞，夯实了心的厚障壁  \n- 神秘的女生会让人产生一种莫名的好感  \n- 你的温存，我的迷醉  \n- 被旧道德困顿的新思想呵  \n- 却乎我们经历着西区红叶的落，只是不再有雅致和时间去欣赏留念，叶子掉了还会再红，可来年的你还会再来么？  \n\n## III Quote\nFrom Tokyo\n>* 你是看不见呢，还是看得开呢  \n>* 浅谈一下对爱情的看法。奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。\n\nThe death can only prove that I have lived.  \n\nFrom Chao Gao\n>眼底风物，心头忧乐\n\n\n","source":"_posts/曾经的签名.md","raw":"---\ntitle: 曾经的签名\ncomments: true\ndate: 2017-04-20 22:26:58\nupdated: 2017-04-20 22:27:59\ncategories: Thinking\ntags: [签名, 过往]\n---\n> 爱熄灭了灯，心围一座城\n\n--\n\n## I About \n- 彼时在错落中敏感，消逝在光明中的黑暗  \n- 我带着一丝诡异的微笑，从你的身边呼啸而过  \n- 若有所思，若即若离  \n<!--More-->\n\n## II Affection\n- 彼时的安息与无奈,交织在我心头之中,久久不能散去  \n- 电子的冲撞，夯实了心的厚障壁  \n- 神秘的女生会让人产生一种莫名的好感  \n- 你的温存，我的迷醉  \n- 被旧道德困顿的新思想呵  \n- 却乎我们经历着西区红叶的落，只是不再有雅致和时间去欣赏留念，叶子掉了还会再红，可来年的你还会再来么？  \n\n## III Quote\nFrom Tokyo\n>* 你是看不见呢，还是看得开呢  \n>* 浅谈一下对爱情的看法。奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。\n\nThe death can only prove that I have lived.  \n\nFrom Chao Gao\n>眼底风物，心头忧乐\n\n\n","slug":"曾经的签名","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfn002lm2caj8m9ckn4","content":"<blockquote>\n<p>爱熄灭了灯，心围一座城</p>\n</blockquote>\n<p>–</p>\n<h2 id=\"I-About\"><a href=\"#I-About\" class=\"headerlink\" title=\"I About\"></a>I About</h2><ul>\n<li>彼时在错落中敏感，消逝在光明中的黑暗  </li>\n<li>我带着一丝诡异的微笑，从你的身边呼啸而过  </li>\n<li>若有所思，若即若离  <a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"II-Affection\"><a href=\"#II-Affection\" class=\"headerlink\" title=\"II Affection\"></a>II Affection</h2><ul>\n<li>彼时的安息与无奈,交织在我心头之中,久久不能散去  </li>\n<li>电子的冲撞，夯实了心的厚障壁  </li>\n<li>神秘的女生会让人产生一种莫名的好感  </li>\n<li>你的温存，我的迷醉  </li>\n<li>被旧道德困顿的新思想呵  </li>\n<li>却乎我们经历着西区红叶的落，只是不再有雅致和时间去欣赏留念，叶子掉了还会再红，可来年的你还会再来么？  </li>\n</ul>\n<h2 id=\"III-Quote\"><a href=\"#III-Quote\" class=\"headerlink\" title=\"III Quote\"></a>III Quote</h2><p>From Tokyo</p>\n<blockquote>\n<ul>\n<li>你是看不见呢，还是看得开呢  </li>\n<li>浅谈一下对爱情的看法。奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。</li>\n</ul>\n</blockquote>\n<p>The death can only prove that I have lived.  </p>\n<p>From Chao Gao</p>\n<blockquote>\n<p>眼底风物，心头忧乐</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>爱熄灭了灯，心围一座城</p>\n</blockquote>\n<p>–</p>\n<h2 id=\"I-About\"><a href=\"#I-About\" class=\"headerlink\" title=\"I About\"></a>I About</h2><ul>\n<li>彼时在错落中敏感，消逝在光明中的黑暗  </li>\n<li>我带着一丝诡异的微笑，从你的身边呼啸而过  </li>\n<li>若有所思，若即若离","more":"</li>\n</ul>\n<h2 id=\"II-Affection\"><a href=\"#II-Affection\" class=\"headerlink\" title=\"II Affection\"></a>II Affection</h2><ul>\n<li>彼时的安息与无奈,交织在我心头之中,久久不能散去  </li>\n<li>电子的冲撞，夯实了心的厚障壁  </li>\n<li>神秘的女生会让人产生一种莫名的好感  </li>\n<li>你的温存，我的迷醉  </li>\n<li>被旧道德困顿的新思想呵  </li>\n<li>却乎我们经历着西区红叶的落，只是不再有雅致和时间去欣赏留念，叶子掉了还会再红，可来年的你还会再来么？  </li>\n</ul>\n<h2 id=\"III-Quote\"><a href=\"#III-Quote\" class=\"headerlink\" title=\"III Quote\"></a>III Quote</h2><p>From Tokyo</p>\n<blockquote>\n<ul>\n<li>你是看不见呢，还是看得开呢  </li>\n<li>浅谈一下对爱情的看法。奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。</li>\n</ul>\n</blockquote>\n<p>The death can only prove that I have lived.  </p>\n<p>From Chao Gao</p>\n<blockquote>\n<p>眼底风物，心头忧乐</p>\n</blockquote>"},{"title":"最初的自己要到哪里去找?-转载于豆瓣","comments":1,"date":"2017-04-21T04:14:21.000Z","updated":"2017-04-21T04:15:22.000Z","_content":"\n## EP01\n第一集里面绑架了公主的绑匪提出要首相和一头猪性交，进行全国直播，不然的话他就将公主撕票。当时看到这里我还一度觉得这部片子应该是部喜剧，想看看这出闹剧到底是怎样搞笑的收场，怀着一颗猎奇的心态继续看下去，可是剧情发展越来越偏离我预想的轨道。\n<!--More-->\n\n最终首相在舆论压力之下被迫向全国直播他和一头猪进行了长达一个多小时的性交，换回了被绑架公主的一条命。但是可笑的是，公主在首相开始录像半个小时之前就被放了出来，可是竟然没有人发现。因为全国上下几乎所有的人几乎都涌在电视机前等着看首相进行这一场丑陋猥琐恶作剧式的拯救。\n\n空无一人的伦敦街道对比着街头爆满的酒吧，所有人都和我一开始一样怀着一颗猎奇的心情等待着，谁知道等到他们看到自己的首相正在和一头猪做爱的时候，大多数人却被恶心的闭上了双眼，垂下了头。\n\n首相选择做这件事竟然是因为所谓的“民意倾向”，所谓的twitter上和脸书上的热门讨论决定了这一切，然而这样一大群好事者却又是怀着一颗怎么样的心态去对待这件事，是想看笑话，还是站着说话不腰疼。他们有没有想过如果这种事发生在自己身上会怎么样?\n\n网络信息的发达让这个社会变得越来越麻木不仁，一件事只要区区五分钟就可以传遍全球，什么变的也都不再是秘密。堂堂的一个首相，最后也竟然成为网络时代的傀儡。到底什么事才是我们真心想做的，到底什么事我们才能像过去一样，冷静的在那坐一下午听一听我们的内心到底是怎么想。\n\n绑架公主的嫌疑犯切下了自己的手指头威胁首相换来了首相出丑。却也成为了一位出名的艺术家。这种天大的讽刺真是让人啼笑皆非。如今这个时代，要的就是“炒作”不是么，连罗玉凤这种一米四七的大龅牙顶着自诩“学富五车，倾国倾城”的光环，靠自己的炒作圆了她“美国梦。”那么还有什么不可能？\n## EP02\n这一集是让我看的最难过的一集。如果说第一集已经反映出了现代人与人之间的麻木不仁，那这一集简直把这种关系表达到了极致。这个时代的人他们生活在一个高智能，全虚拟的时代，他们穿着同一种衣服，每个人靠在健身房骑单车赚点数过话，这里的点数就好像《时间规划局》里面一样，点数就是金钱。\n\n这个时代的人每天循规蹈矩的要看着固定的节目，吃固定的东西，努力的踩自行车挣着点数。生活没有一样在变，他们甚至哪里都不用去，因为只要有个虚拟形象的自己存在着，他们一辈子待在健身房里也没什么不可以。\n\n男主角是这一群人中最抵抗这种虚拟体制的一个，直到他遇到了我们的“三小姐”【DOWNTON ABBEY扮演三小姐的女演员】，偶然厕所听到了三小姐的歌声。男主角第一次动了心，第一次在这个冰冷的全智能时代感受到了温暖和感情。他把哥哥留给自己的加上自己挣的1500万点送给三小姐，要带她一起去参加“达人秀”。\n\n三小姐在“达人秀”上唱歌的样子真是美极了，那首歌也真是无比动听，站在台上的三小姐就像是个天使一样纯净。演出很成功，当男主角和大家一样激动的时候，评委却说三小姐适合去成人频道当艳星。毫无感情的评委只想着怎么把三小姐身上的价值榨取到最高值，丝毫没有理会她刚刚如此动人的表演。\n\n当全场都在欢呼让三小姐接受这个条件的时候，男主角早已经被保镖从后台拖了出去。三小姐抱着一颗想当歌星的梦想来到这里，却最终还是屈服给了这样黑暗无情的体制，她答应了评委的要求。\n\n男主角的生活又回到了原样，周围的一切依旧是没有任何感情的虚拟世界，甚至因为点数不够无法调频被迫要看三小姐拍的porn。男主角受够了这样的生活，于是他决定自己努力再赚到1500万点重回达人秀拯救他们这个时代。\n\n当他回到达人秀的舞台上，他拿着玻璃片抵着喉咙，声嘶力竭的对着评委们嘶吼，如果他们不让他把这些话说完，那他就立刻自杀死在这里。他努力的发泄着，咆哮着，把自己对这个时代，这种体制的不满全部一股脑的都说了出来，他是真的受够了！\n\n可是当他结束他的发言时，评委们竟然说”这是他在这一段时间内看到的最真实的一场表演。”听到了么?他说的是“表演。”呵呵，在他们这个世界，哪里还有什么感情，哪里还有什么真实感，当男主角怀着一颗热血想要拯救这个世界的决心过去，可结果又是什么？\n\n片尾做了这样一个巨大的讽刺，男主角竟然也接受了评委的条件，答应每周2次在电视上做一场类似于他刚刚这样激昂的发言。如果说三小姐是因为想要摆脱每日蹬自行车辛苦的命运，那么她就算做了脱星也算是实现了自己的梦想。可这个男主角呢？可我们呢？\n\n我们是否还记得最初我们的梦想，记得我们当初傻乎乎的执着坚持是为了什么？还是我们像男主角一样，就算拼死拼活挣到了属于自己的1500万点，却最终还是丢掉了自己，最初的梦想早就被这个社会麻木的机制给吞噬了。\n## EP03\n这一个时代的人依旧是被高科技操纵着的玩偶。每一个人都在耳朵后面植入了芯片，可以把过去的记忆通过芯片记录进去。想看的时候就可以拿着“遥控器”把记忆的画面调出来看，无论哪一天，哪一年，关于哪个人的记忆，随时都可以翻出来场面再现。\n\n这一集的男主角一直在做着“困兽之斗”，所谓的“钻牛角尖”就就是形容他这一类走极端的人。男主角猜忌心太强，从一开始上司对他的工作考核就能看出来他把上司们每一个细节，话语都揣摩到了极致，想到了他会即将失业的可能。甚至当他妻子和他一起看他的回忆画面时，清楚的看见上司在他的考核报告上打了对勾，他还是不愿意相信。\n\n猜忌心太强不用害怕，只要有这个记忆芯片，怀疑哪里点哪里，so easy~当男主角怀疑自己的妻子和她的EX还有染的时候，他便拼命的询问妻子他们俩当年到底发生了什么，交往了多久。妻子告诉他那早就是很早以前一段荒唐的恋爱，可是他还是深深的质疑。一个人不断地反复地看着他和妻子共同参加晚宴时的片段。这样当然还没完，第二天竟然上门要挟这个男人，要求他删除他芯片里关于她妻子的所有回忆片段。\n\n就是当这个男人删除记忆的时候，男主角意外的发现在这个男人18个月以前的记忆力竟然还有他妻子的存在，那时他和他妻子已经结婚。他回到家里发了疯一样的逼着妻子把她18个月以前和这个男人的记忆画面调出来给他看。男主角麻木的目睹着她妻子和这个男人18个月以前的性爱画面，他竟然说”当我怀疑某件事的时候，当结果就如我所想的一样时，那样我还会感觉开心一点。”\n\n这个男主角的强迫症和猜忌心已经把他逼到了绝路。最后妻子带着孩子离开了他。男主角一个人在家里反复的播放着他和他前妻在一起时的美好画面，不难看出男主角后悔万分的表情和内心。于是最后他选择划开皮肤，把耳朵后面的芯片取了出来。于是这只“困兽”才最后得到了真正的解救。\n\n前一阵子看《当声音的色彩尝起来是甜的》这本书里曾经说过，人大脑里存在的记忆都是带有明显的个人色彩，因为每一件过去的事我们都会选择性的进行修改存在大脑里，所以有些事才会回忆起来觉得那么美好，即使当初的情形根本没有这么完美。而如果当时代进行到当每个人都要依靠记忆芯片来生活的话，那么曾经那些过去的我们修改过的美好还找的回来么？\n\n人们在这个物欲横流，信息发达的时代，已经失去了太多纯真和本能。我们会因为某些舆论改变自己的初衷，我们会因为体制的压迫和利诱放弃自己最初的梦想，我们会因为高科技的无情导致妻离子散。我们早就改变了太多太多。\n\n最后的我们会在哪里？又在等着谁来救赎？\n","source":"_posts/最初的自己要到哪里去找.md","raw":"---\ntitle: 最初的自己要到哪里去找?-转载于豆瓣\ncomments: true\ndate: 2017-04-20 21:14:21\nupdated: 2017-04-20 21:15:22\ncategories: Movie\ntags: [影评, 英剧]\n---\n\n## EP01\n第一集里面绑架了公主的绑匪提出要首相和一头猪性交，进行全国直播，不然的话他就将公主撕票。当时看到这里我还一度觉得这部片子应该是部喜剧，想看看这出闹剧到底是怎样搞笑的收场，怀着一颗猎奇的心态继续看下去，可是剧情发展越来越偏离我预想的轨道。\n<!--More-->\n\n最终首相在舆论压力之下被迫向全国直播他和一头猪进行了长达一个多小时的性交，换回了被绑架公主的一条命。但是可笑的是，公主在首相开始录像半个小时之前就被放了出来，可是竟然没有人发现。因为全国上下几乎所有的人几乎都涌在电视机前等着看首相进行这一场丑陋猥琐恶作剧式的拯救。\n\n空无一人的伦敦街道对比着街头爆满的酒吧，所有人都和我一开始一样怀着一颗猎奇的心情等待着，谁知道等到他们看到自己的首相正在和一头猪做爱的时候，大多数人却被恶心的闭上了双眼，垂下了头。\n\n首相选择做这件事竟然是因为所谓的“民意倾向”，所谓的twitter上和脸书上的热门讨论决定了这一切，然而这样一大群好事者却又是怀着一颗怎么样的心态去对待这件事，是想看笑话，还是站着说话不腰疼。他们有没有想过如果这种事发生在自己身上会怎么样?\n\n网络信息的发达让这个社会变得越来越麻木不仁，一件事只要区区五分钟就可以传遍全球，什么变的也都不再是秘密。堂堂的一个首相，最后也竟然成为网络时代的傀儡。到底什么事才是我们真心想做的，到底什么事我们才能像过去一样，冷静的在那坐一下午听一听我们的内心到底是怎么想。\n\n绑架公主的嫌疑犯切下了自己的手指头威胁首相换来了首相出丑。却也成为了一位出名的艺术家。这种天大的讽刺真是让人啼笑皆非。如今这个时代，要的就是“炒作”不是么，连罗玉凤这种一米四七的大龅牙顶着自诩“学富五车，倾国倾城”的光环，靠自己的炒作圆了她“美国梦。”那么还有什么不可能？\n## EP02\n这一集是让我看的最难过的一集。如果说第一集已经反映出了现代人与人之间的麻木不仁，那这一集简直把这种关系表达到了极致。这个时代的人他们生活在一个高智能，全虚拟的时代，他们穿着同一种衣服，每个人靠在健身房骑单车赚点数过话，这里的点数就好像《时间规划局》里面一样，点数就是金钱。\n\n这个时代的人每天循规蹈矩的要看着固定的节目，吃固定的东西，努力的踩自行车挣着点数。生活没有一样在变，他们甚至哪里都不用去，因为只要有个虚拟形象的自己存在着，他们一辈子待在健身房里也没什么不可以。\n\n男主角是这一群人中最抵抗这种虚拟体制的一个，直到他遇到了我们的“三小姐”【DOWNTON ABBEY扮演三小姐的女演员】，偶然厕所听到了三小姐的歌声。男主角第一次动了心，第一次在这个冰冷的全智能时代感受到了温暖和感情。他把哥哥留给自己的加上自己挣的1500万点送给三小姐，要带她一起去参加“达人秀”。\n\n三小姐在“达人秀”上唱歌的样子真是美极了，那首歌也真是无比动听，站在台上的三小姐就像是个天使一样纯净。演出很成功，当男主角和大家一样激动的时候，评委却说三小姐适合去成人频道当艳星。毫无感情的评委只想着怎么把三小姐身上的价值榨取到最高值，丝毫没有理会她刚刚如此动人的表演。\n\n当全场都在欢呼让三小姐接受这个条件的时候，男主角早已经被保镖从后台拖了出去。三小姐抱着一颗想当歌星的梦想来到这里，却最终还是屈服给了这样黑暗无情的体制，她答应了评委的要求。\n\n男主角的生活又回到了原样，周围的一切依旧是没有任何感情的虚拟世界，甚至因为点数不够无法调频被迫要看三小姐拍的porn。男主角受够了这样的生活，于是他决定自己努力再赚到1500万点重回达人秀拯救他们这个时代。\n\n当他回到达人秀的舞台上，他拿着玻璃片抵着喉咙，声嘶力竭的对着评委们嘶吼，如果他们不让他把这些话说完，那他就立刻自杀死在这里。他努力的发泄着，咆哮着，把自己对这个时代，这种体制的不满全部一股脑的都说了出来，他是真的受够了！\n\n可是当他结束他的发言时，评委们竟然说”这是他在这一段时间内看到的最真实的一场表演。”听到了么?他说的是“表演。”呵呵，在他们这个世界，哪里还有什么感情，哪里还有什么真实感，当男主角怀着一颗热血想要拯救这个世界的决心过去，可结果又是什么？\n\n片尾做了这样一个巨大的讽刺，男主角竟然也接受了评委的条件，答应每周2次在电视上做一场类似于他刚刚这样激昂的发言。如果说三小姐是因为想要摆脱每日蹬自行车辛苦的命运，那么她就算做了脱星也算是实现了自己的梦想。可这个男主角呢？可我们呢？\n\n我们是否还记得最初我们的梦想，记得我们当初傻乎乎的执着坚持是为了什么？还是我们像男主角一样，就算拼死拼活挣到了属于自己的1500万点，却最终还是丢掉了自己，最初的梦想早就被这个社会麻木的机制给吞噬了。\n## EP03\n这一个时代的人依旧是被高科技操纵着的玩偶。每一个人都在耳朵后面植入了芯片，可以把过去的记忆通过芯片记录进去。想看的时候就可以拿着“遥控器”把记忆的画面调出来看，无论哪一天，哪一年，关于哪个人的记忆，随时都可以翻出来场面再现。\n\n这一集的男主角一直在做着“困兽之斗”，所谓的“钻牛角尖”就就是形容他这一类走极端的人。男主角猜忌心太强，从一开始上司对他的工作考核就能看出来他把上司们每一个细节，话语都揣摩到了极致，想到了他会即将失业的可能。甚至当他妻子和他一起看他的回忆画面时，清楚的看见上司在他的考核报告上打了对勾，他还是不愿意相信。\n\n猜忌心太强不用害怕，只要有这个记忆芯片，怀疑哪里点哪里，so easy~当男主角怀疑自己的妻子和她的EX还有染的时候，他便拼命的询问妻子他们俩当年到底发生了什么，交往了多久。妻子告诉他那早就是很早以前一段荒唐的恋爱，可是他还是深深的质疑。一个人不断地反复地看着他和妻子共同参加晚宴时的片段。这样当然还没完，第二天竟然上门要挟这个男人，要求他删除他芯片里关于她妻子的所有回忆片段。\n\n就是当这个男人删除记忆的时候，男主角意外的发现在这个男人18个月以前的记忆力竟然还有他妻子的存在，那时他和他妻子已经结婚。他回到家里发了疯一样的逼着妻子把她18个月以前和这个男人的记忆画面调出来给他看。男主角麻木的目睹着她妻子和这个男人18个月以前的性爱画面，他竟然说”当我怀疑某件事的时候，当结果就如我所想的一样时，那样我还会感觉开心一点。”\n\n这个男主角的强迫症和猜忌心已经把他逼到了绝路。最后妻子带着孩子离开了他。男主角一个人在家里反复的播放着他和他前妻在一起时的美好画面，不难看出男主角后悔万分的表情和内心。于是最后他选择划开皮肤，把耳朵后面的芯片取了出来。于是这只“困兽”才最后得到了真正的解救。\n\n前一阵子看《当声音的色彩尝起来是甜的》这本书里曾经说过，人大脑里存在的记忆都是带有明显的个人色彩，因为每一件过去的事我们都会选择性的进行修改存在大脑里，所以有些事才会回忆起来觉得那么美好，即使当初的情形根本没有这么完美。而如果当时代进行到当每个人都要依靠记忆芯片来生活的话，那么曾经那些过去的我们修改过的美好还找的回来么？\n\n人们在这个物欲横流，信息发达的时代，已经失去了太多纯真和本能。我们会因为某些舆论改变自己的初衷，我们会因为体制的压迫和利诱放弃自己最初的梦想，我们会因为高科技的无情导致妻离子散。我们早就改变了太多太多。\n\n最后的我们会在哪里？又在等着谁来救赎？\n","slug":"最初的自己要到哪里去找","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfp002om2cayglnvv20","content":"<h2 id=\"EP01\"><a href=\"#EP01\" class=\"headerlink\" title=\"EP01\"></a>EP01</h2><p>第一集里面绑架了公主的绑匪提出要首相和一头猪性交，进行全国直播，不然的话他就将公主撕票。当时看到这里我还一度觉得这部片子应该是部喜剧，想看看这出闹剧到底是怎样搞笑的收场，怀着一颗猎奇的心态继续看下去，可是剧情发展越来越偏离我预想的轨道。<br><a id=\"more\"></a></p>\n<p>最终首相在舆论压力之下被迫向全国直播他和一头猪进行了长达一个多小时的性交，换回了被绑架公主的一条命。但是可笑的是，公主在首相开始录像半个小时之前就被放了出来，可是竟然没有人发现。因为全国上下几乎所有的人几乎都涌在电视机前等着看首相进行这一场丑陋猥琐恶作剧式的拯救。</p>\n<p>空无一人的伦敦街道对比着街头爆满的酒吧，所有人都和我一开始一样怀着一颗猎奇的心情等待着，谁知道等到他们看到自己的首相正在和一头猪做爱的时候，大多数人却被恶心的闭上了双眼，垂下了头。</p>\n<p>首相选择做这件事竟然是因为所谓的“民意倾向”，所谓的twitter上和脸书上的热门讨论决定了这一切，然而这样一大群好事者却又是怀着一颗怎么样的心态去对待这件事，是想看笑话，还是站着说话不腰疼。他们有没有想过如果这种事发生在自己身上会怎么样?</p>\n<p>网络信息的发达让这个社会变得越来越麻木不仁，一件事只要区区五分钟就可以传遍全球，什么变的也都不再是秘密。堂堂的一个首相，最后也竟然成为网络时代的傀儡。到底什么事才是我们真心想做的，到底什么事我们才能像过去一样，冷静的在那坐一下午听一听我们的内心到底是怎么想。</p>\n<p>绑架公主的嫌疑犯切下了自己的手指头威胁首相换来了首相出丑。却也成为了一位出名的艺术家。这种天大的讽刺真是让人啼笑皆非。如今这个时代，要的就是“炒作”不是么，连罗玉凤这种一米四七的大龅牙顶着自诩“学富五车，倾国倾城”的光环，靠自己的炒作圆了她“美国梦。”那么还有什么不可能？</p>\n<h2 id=\"EP02\"><a href=\"#EP02\" class=\"headerlink\" title=\"EP02\"></a>EP02</h2><p>这一集是让我看的最难过的一集。如果说第一集已经反映出了现代人与人之间的麻木不仁，那这一集简直把这种关系表达到了极致。这个时代的人他们生活在一个高智能，全虚拟的时代，他们穿着同一种衣服，每个人靠在健身房骑单车赚点数过话，这里的点数就好像《时间规划局》里面一样，点数就是金钱。</p>\n<p>这个时代的人每天循规蹈矩的要看着固定的节目，吃固定的东西，努力的踩自行车挣着点数。生活没有一样在变，他们甚至哪里都不用去，因为只要有个虚拟形象的自己存在着，他们一辈子待在健身房里也没什么不可以。</p>\n<p>男主角是这一群人中最抵抗这种虚拟体制的一个，直到他遇到了我们的“三小姐”【DOWNTON ABBEY扮演三小姐的女演员】，偶然厕所听到了三小姐的歌声。男主角第一次动了心，第一次在这个冰冷的全智能时代感受到了温暖和感情。他把哥哥留给自己的加上自己挣的1500万点送给三小姐，要带她一起去参加“达人秀”。</p>\n<p>三小姐在“达人秀”上唱歌的样子真是美极了，那首歌也真是无比动听，站在台上的三小姐就像是个天使一样纯净。演出很成功，当男主角和大家一样激动的时候，评委却说三小姐适合去成人频道当艳星。毫无感情的评委只想着怎么把三小姐身上的价值榨取到最高值，丝毫没有理会她刚刚如此动人的表演。</p>\n<p>当全场都在欢呼让三小姐接受这个条件的时候，男主角早已经被保镖从后台拖了出去。三小姐抱着一颗想当歌星的梦想来到这里，却最终还是屈服给了这样黑暗无情的体制，她答应了评委的要求。</p>\n<p>男主角的生活又回到了原样，周围的一切依旧是没有任何感情的虚拟世界，甚至因为点数不够无法调频被迫要看三小姐拍的porn。男主角受够了这样的生活，于是他决定自己努力再赚到1500万点重回达人秀拯救他们这个时代。</p>\n<p>当他回到达人秀的舞台上，他拿着玻璃片抵着喉咙，声嘶力竭的对着评委们嘶吼，如果他们不让他把这些话说完，那他就立刻自杀死在这里。他努力的发泄着，咆哮着，把自己对这个时代，这种体制的不满全部一股脑的都说了出来，他是真的受够了！</p>\n<p>可是当他结束他的发言时，评委们竟然说”这是他在这一段时间内看到的最真实的一场表演。”听到了么?他说的是“表演。”呵呵，在他们这个世界，哪里还有什么感情，哪里还有什么真实感，当男主角怀着一颗热血想要拯救这个世界的决心过去，可结果又是什么？</p>\n<p>片尾做了这样一个巨大的讽刺，男主角竟然也接受了评委的条件，答应每周2次在电视上做一场类似于他刚刚这样激昂的发言。如果说三小姐是因为想要摆脱每日蹬自行车辛苦的命运，那么她就算做了脱星也算是实现了自己的梦想。可这个男主角呢？可我们呢？</p>\n<p>我们是否还记得最初我们的梦想，记得我们当初傻乎乎的执着坚持是为了什么？还是我们像男主角一样，就算拼死拼活挣到了属于自己的1500万点，却最终还是丢掉了自己，最初的梦想早就被这个社会麻木的机制给吞噬了。</p>\n<h2 id=\"EP03\"><a href=\"#EP03\" class=\"headerlink\" title=\"EP03\"></a>EP03</h2><p>这一个时代的人依旧是被高科技操纵着的玩偶。每一个人都在耳朵后面植入了芯片，可以把过去的记忆通过芯片记录进去。想看的时候就可以拿着“遥控器”把记忆的画面调出来看，无论哪一天，哪一年，关于哪个人的记忆，随时都可以翻出来场面再现。</p>\n<p>这一集的男主角一直在做着“困兽之斗”，所谓的“钻牛角尖”就就是形容他这一类走极端的人。男主角猜忌心太强，从一开始上司对他的工作考核就能看出来他把上司们每一个细节，话语都揣摩到了极致，想到了他会即将失业的可能。甚至当他妻子和他一起看他的回忆画面时，清楚的看见上司在他的考核报告上打了对勾，他还是不愿意相信。</p>\n<p>猜忌心太强不用害怕，只要有这个记忆芯片，怀疑哪里点哪里，so easy~当男主角怀疑自己的妻子和她的EX还有染的时候，他便拼命的询问妻子他们俩当年到底发生了什么，交往了多久。妻子告诉他那早就是很早以前一段荒唐的恋爱，可是他还是深深的质疑。一个人不断地反复地看着他和妻子共同参加晚宴时的片段。这样当然还没完，第二天竟然上门要挟这个男人，要求他删除他芯片里关于她妻子的所有回忆片段。</p>\n<p>就是当这个男人删除记忆的时候，男主角意外的发现在这个男人18个月以前的记忆力竟然还有他妻子的存在，那时他和他妻子已经结婚。他回到家里发了疯一样的逼着妻子把她18个月以前和这个男人的记忆画面调出来给他看。男主角麻木的目睹着她妻子和这个男人18个月以前的性爱画面，他竟然说”当我怀疑某件事的时候，当结果就如我所想的一样时，那样我还会感觉开心一点。”</p>\n<p>这个男主角的强迫症和猜忌心已经把他逼到了绝路。最后妻子带着孩子离开了他。男主角一个人在家里反复的播放着他和他前妻在一起时的美好画面，不难看出男主角后悔万分的表情和内心。于是最后他选择划开皮肤，把耳朵后面的芯片取了出来。于是这只“困兽”才最后得到了真正的解救。</p>\n<p>前一阵子看《当声音的色彩尝起来是甜的》这本书里曾经说过，人大脑里存在的记忆都是带有明显的个人色彩，因为每一件过去的事我们都会选择性的进行修改存在大脑里，所以有些事才会回忆起来觉得那么美好，即使当初的情形根本没有这么完美。而如果当时代进行到当每个人都要依靠记忆芯片来生活的话，那么曾经那些过去的我们修改过的美好还找的回来么？</p>\n<p>人们在这个物欲横流，信息发达的时代，已经失去了太多纯真和本能。我们会因为某些舆论改变自己的初衷，我们会因为体制的压迫和利诱放弃自己最初的梦想，我们会因为高科技的无情导致妻离子散。我们早就改变了太多太多。</p>\n<p>最后的我们会在哪里？又在等着谁来救赎？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"EP01\"><a href=\"#EP01\" class=\"headerlink\" title=\"EP01\"></a>EP01</h2><p>第一集里面绑架了公主的绑匪提出要首相和一头猪性交，进行全国直播，不然的话他就将公主撕票。当时看到这里我还一度觉得这部片子应该是部喜剧，想看看这出闹剧到底是怎样搞笑的收场，怀着一颗猎奇的心态继续看下去，可是剧情发展越来越偏离我预想的轨道。<br>","more":"</p>\n<p>最终首相在舆论压力之下被迫向全国直播他和一头猪进行了长达一个多小时的性交，换回了被绑架公主的一条命。但是可笑的是，公主在首相开始录像半个小时之前就被放了出来，可是竟然没有人发现。因为全国上下几乎所有的人几乎都涌在电视机前等着看首相进行这一场丑陋猥琐恶作剧式的拯救。</p>\n<p>空无一人的伦敦街道对比着街头爆满的酒吧，所有人都和我一开始一样怀着一颗猎奇的心情等待着，谁知道等到他们看到自己的首相正在和一头猪做爱的时候，大多数人却被恶心的闭上了双眼，垂下了头。</p>\n<p>首相选择做这件事竟然是因为所谓的“民意倾向”，所谓的twitter上和脸书上的热门讨论决定了这一切，然而这样一大群好事者却又是怀着一颗怎么样的心态去对待这件事，是想看笑话，还是站着说话不腰疼。他们有没有想过如果这种事发生在自己身上会怎么样?</p>\n<p>网络信息的发达让这个社会变得越来越麻木不仁，一件事只要区区五分钟就可以传遍全球，什么变的也都不再是秘密。堂堂的一个首相，最后也竟然成为网络时代的傀儡。到底什么事才是我们真心想做的，到底什么事我们才能像过去一样，冷静的在那坐一下午听一听我们的内心到底是怎么想。</p>\n<p>绑架公主的嫌疑犯切下了自己的手指头威胁首相换来了首相出丑。却也成为了一位出名的艺术家。这种天大的讽刺真是让人啼笑皆非。如今这个时代，要的就是“炒作”不是么，连罗玉凤这种一米四七的大龅牙顶着自诩“学富五车，倾国倾城”的光环，靠自己的炒作圆了她“美国梦。”那么还有什么不可能？</p>\n<h2 id=\"EP02\"><a href=\"#EP02\" class=\"headerlink\" title=\"EP02\"></a>EP02</h2><p>这一集是让我看的最难过的一集。如果说第一集已经反映出了现代人与人之间的麻木不仁，那这一集简直把这种关系表达到了极致。这个时代的人他们生活在一个高智能，全虚拟的时代，他们穿着同一种衣服，每个人靠在健身房骑单车赚点数过话，这里的点数就好像《时间规划局》里面一样，点数就是金钱。</p>\n<p>这个时代的人每天循规蹈矩的要看着固定的节目，吃固定的东西，努力的踩自行车挣着点数。生活没有一样在变，他们甚至哪里都不用去，因为只要有个虚拟形象的自己存在着，他们一辈子待在健身房里也没什么不可以。</p>\n<p>男主角是这一群人中最抵抗这种虚拟体制的一个，直到他遇到了我们的“三小姐”【DOWNTON ABBEY扮演三小姐的女演员】，偶然厕所听到了三小姐的歌声。男主角第一次动了心，第一次在这个冰冷的全智能时代感受到了温暖和感情。他把哥哥留给自己的加上自己挣的1500万点送给三小姐，要带她一起去参加“达人秀”。</p>\n<p>三小姐在“达人秀”上唱歌的样子真是美极了，那首歌也真是无比动听，站在台上的三小姐就像是个天使一样纯净。演出很成功，当男主角和大家一样激动的时候，评委却说三小姐适合去成人频道当艳星。毫无感情的评委只想着怎么把三小姐身上的价值榨取到最高值，丝毫没有理会她刚刚如此动人的表演。</p>\n<p>当全场都在欢呼让三小姐接受这个条件的时候，男主角早已经被保镖从后台拖了出去。三小姐抱着一颗想当歌星的梦想来到这里，却最终还是屈服给了这样黑暗无情的体制，她答应了评委的要求。</p>\n<p>男主角的生活又回到了原样，周围的一切依旧是没有任何感情的虚拟世界，甚至因为点数不够无法调频被迫要看三小姐拍的porn。男主角受够了这样的生活，于是他决定自己努力再赚到1500万点重回达人秀拯救他们这个时代。</p>\n<p>当他回到达人秀的舞台上，他拿着玻璃片抵着喉咙，声嘶力竭的对着评委们嘶吼，如果他们不让他把这些话说完，那他就立刻自杀死在这里。他努力的发泄着，咆哮着，把自己对这个时代，这种体制的不满全部一股脑的都说了出来，他是真的受够了！</p>\n<p>可是当他结束他的发言时，评委们竟然说”这是他在这一段时间内看到的最真实的一场表演。”听到了么?他说的是“表演。”呵呵，在他们这个世界，哪里还有什么感情，哪里还有什么真实感，当男主角怀着一颗热血想要拯救这个世界的决心过去，可结果又是什么？</p>\n<p>片尾做了这样一个巨大的讽刺，男主角竟然也接受了评委的条件，答应每周2次在电视上做一场类似于他刚刚这样激昂的发言。如果说三小姐是因为想要摆脱每日蹬自行车辛苦的命运，那么她就算做了脱星也算是实现了自己的梦想。可这个男主角呢？可我们呢？</p>\n<p>我们是否还记得最初我们的梦想，记得我们当初傻乎乎的执着坚持是为了什么？还是我们像男主角一样，就算拼死拼活挣到了属于自己的1500万点，却最终还是丢掉了自己，最初的梦想早就被这个社会麻木的机制给吞噬了。</p>\n<h2 id=\"EP03\"><a href=\"#EP03\" class=\"headerlink\" title=\"EP03\"></a>EP03</h2><p>这一个时代的人依旧是被高科技操纵着的玩偶。每一个人都在耳朵后面植入了芯片，可以把过去的记忆通过芯片记录进去。想看的时候就可以拿着“遥控器”把记忆的画面调出来看，无论哪一天，哪一年，关于哪个人的记忆，随时都可以翻出来场面再现。</p>\n<p>这一集的男主角一直在做着“困兽之斗”，所谓的“钻牛角尖”就就是形容他这一类走极端的人。男主角猜忌心太强，从一开始上司对他的工作考核就能看出来他把上司们每一个细节，话语都揣摩到了极致，想到了他会即将失业的可能。甚至当他妻子和他一起看他的回忆画面时，清楚的看见上司在他的考核报告上打了对勾，他还是不愿意相信。</p>\n<p>猜忌心太强不用害怕，只要有这个记忆芯片，怀疑哪里点哪里，so easy~当男主角怀疑自己的妻子和她的EX还有染的时候，他便拼命的询问妻子他们俩当年到底发生了什么，交往了多久。妻子告诉他那早就是很早以前一段荒唐的恋爱，可是他还是深深的质疑。一个人不断地反复地看着他和妻子共同参加晚宴时的片段。这样当然还没完，第二天竟然上门要挟这个男人，要求他删除他芯片里关于她妻子的所有回忆片段。</p>\n<p>就是当这个男人删除记忆的时候，男主角意外的发现在这个男人18个月以前的记忆力竟然还有他妻子的存在，那时他和他妻子已经结婚。他回到家里发了疯一样的逼着妻子把她18个月以前和这个男人的记忆画面调出来给他看。男主角麻木的目睹着她妻子和这个男人18个月以前的性爱画面，他竟然说”当我怀疑某件事的时候，当结果就如我所想的一样时，那样我还会感觉开心一点。”</p>\n<p>这个男主角的强迫症和猜忌心已经把他逼到了绝路。最后妻子带着孩子离开了他。男主角一个人在家里反复的播放着他和他前妻在一起时的美好画面，不难看出男主角后悔万分的表情和内心。于是最后他选择划开皮肤，把耳朵后面的芯片取了出来。于是这只“困兽”才最后得到了真正的解救。</p>\n<p>前一阵子看《当声音的色彩尝起来是甜的》这本书里曾经说过，人大脑里存在的记忆都是带有明显的个人色彩，因为每一件过去的事我们都会选择性的进行修改存在大脑里，所以有些事才会回忆起来觉得那么美好，即使当初的情形根本没有这么完美。而如果当时代进行到当每个人都要依靠记忆芯片来生活的话，那么曾经那些过去的我们修改过的美好还找的回来么？</p>\n<p>人们在这个物欲横流，信息发达的时代，已经失去了太多纯真和本能。我们会因为某些舆论改变自己的初衷，我们会因为体制的压迫和利诱放弃自己最初的梦想，我们会因为高科技的无情导致妻离子散。我们早就改变了太多太多。</p>\n<p>最后的我们会在哪里？又在等着谁来救赎？</p>"},{"title":"湾区玩什么","comments":1,"date":"2017-09-26T02:10:07.000Z","updated":"2017-12-08T03:10:07.000Z","_content":"\n记录一下之前搜过，去过没去过的。   \n推荐一个网站 美国咕噜   \nupdated: 2017-12-07 19:10:07\n# 郊野\n## 赏花秋叶\n1. [] 三月份的Filoli Garden，以郁金香出名\n2. [] Napa valley的mustard festival\n3. [] Eastern Sierra\n4. [x] Lake Tahoe\n\n## Hiking\n1. [x] Yosemite\n2. [] 中半岛的一些Park\n3. [x] Golden Gate National Recreation Area\n4. [x] Lick Observatory\n\n## 海峡海滩\n1. [x] Point Reyes National Seashore [攻略](https://medium.com/@maggiema1981/%E9%9B%B7%E6%96%AF%E5%B2%AC%E4%B8%80%E6%97%A5%E6%B8%B8%E7%9A%84%E8%A1%8C%E7%A8%8B-%E5%8E%BBtomales-bay%E5%90%83%E7%94%9F%E8%9A%9D%E5%95%A6-dd6c396f057f)\n2. [x] Point Bonita Lighthouse\n3. [x] Pacifica (Surfing!)\n4. [x] Half Moon Bay\n5. [x] Pigeon Point Lighthouse\n6. [x] Santa Cruz\n7. [] Alamere Falls\n\n# 城镇\n1. [] Napa\n2. [x] Los Gatos\n3. [x] Monterey\n4. [x] Carmel-By-The-Sea\n\n# 三番美食\n1. [x] 御食园\n2. [x] 岭南小馆\n\n# 大湾区美食\n1. [x] Benihana - Cupertino\n2. [x] Boiling Beijing -- San Bruno\n3. [x] Chengdu Style Restaurant -- Berkeley\n4. [x] Crema Coffee Roasting Co(with Cake) -- Alameda, San Jose\n5. [x] 伏牛堂 -- Sunnyvale\n6. [] Dametra Cafe -- Carmel-by-the-sea\n7. [x] Soong Soong Chinese Restaurant 小二又一家\n8. [x] Xian Kitchen --Milpitas\n9. [x] Koi Palace - Milpitas 鲤鱼门早茶","source":"_posts/湾区玩什么.md","raw":"---\ntitle: 湾区玩什么\ncomments: true\ndate: 2017-09-25 19:10:07\nupdated: 2017-12-07 19:10:07\ncategories: Travel\ntags:\n---\n\n记录一下之前搜过，去过没去过的。   \n推荐一个网站 美国咕噜   \nupdated: 2017-12-07 19:10:07\n# 郊野\n## 赏花秋叶\n1. [] 三月份的Filoli Garden，以郁金香出名\n2. [] Napa valley的mustard festival\n3. [] Eastern Sierra\n4. [x] Lake Tahoe\n\n## Hiking\n1. [x] Yosemite\n2. [] 中半岛的一些Park\n3. [x] Golden Gate National Recreation Area\n4. [x] Lick Observatory\n\n## 海峡海滩\n1. [x] Point Reyes National Seashore [攻略](https://medium.com/@maggiema1981/%E9%9B%B7%E6%96%AF%E5%B2%AC%E4%B8%80%E6%97%A5%E6%B8%B8%E7%9A%84%E8%A1%8C%E7%A8%8B-%E5%8E%BBtomales-bay%E5%90%83%E7%94%9F%E8%9A%9D%E5%95%A6-dd6c396f057f)\n2. [x] Point Bonita Lighthouse\n3. [x] Pacifica (Surfing!)\n4. [x] Half Moon Bay\n5. [x] Pigeon Point Lighthouse\n6. [x] Santa Cruz\n7. [] Alamere Falls\n\n# 城镇\n1. [] Napa\n2. [x] Los Gatos\n3. [x] Monterey\n4. [x] Carmel-By-The-Sea\n\n# 三番美食\n1. [x] 御食园\n2. [x] 岭南小馆\n\n# 大湾区美食\n1. [x] Benihana - Cupertino\n2. [x] Boiling Beijing -- San Bruno\n3. [x] Chengdu Style Restaurant -- Berkeley\n4. [x] Crema Coffee Roasting Co(with Cake) -- Alameda, San Jose\n5. [x] 伏牛堂 -- Sunnyvale\n6. [] Dametra Cafe -- Carmel-by-the-sea\n7. [x] Soong Soong Chinese Restaurant 小二又一家\n8. [x] Xian Kitchen --Milpitas\n9. [x] Koi Palace - Milpitas 鲤鱼门早茶","slug":"湾区玩什么","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfq002sm2cayhcv8to7","content":"<p>记录一下之前搜过，去过没去过的。<br>推荐一个网站 美国咕噜<br>updated: 2017-12-07 19:10:07</p>\n<h1 id=\"郊野\"><a href=\"#郊野\" class=\"headerlink\" title=\"郊野\"></a>郊野</h1><h2 id=\"赏花秋叶\"><a href=\"#赏花秋叶\" class=\"headerlink\" title=\"赏花秋叶\"></a>赏花秋叶</h2><ol>\n<li>[] 三月份的Filoli Garden，以郁金香出名</li>\n<li>[] Napa valley的mustard festival</li>\n<li>[] Eastern Sierra</li>\n<li>[x] Lake Tahoe</li>\n</ol>\n<h2 id=\"Hiking\"><a href=\"#Hiking\" class=\"headerlink\" title=\"Hiking\"></a>Hiking</h2><ol>\n<li>[x] Yosemite</li>\n<li>[] 中半岛的一些Park</li>\n<li>[x] Golden Gate National Recreation Area</li>\n<li>[x] Lick Observatory</li>\n</ol>\n<h2 id=\"海峡海滩\"><a href=\"#海峡海滩\" class=\"headerlink\" title=\"海峡海滩\"></a>海峡海滩</h2><ol>\n<li>[x] Point Reyes National Seashore <a href=\"https://medium.com/@maggiema1981/%E9%9B%B7%E6%96%AF%E5%B2%AC%E4%B8%80%E6%97%A5%E6%B8%B8%E7%9A%84%E8%A1%8C%E7%A8%8B-%E5%8E%BBtomales-bay%E5%90%83%E7%94%9F%E8%9A%9D%E5%95%A6-dd6c396f057f\" target=\"_blank\" rel=\"noopener\">攻略</a></li>\n<li>[x] Point Bonita Lighthouse</li>\n<li>[x] Pacifica (Surfing!)</li>\n<li>[x] Half Moon Bay</li>\n<li>[x] Pigeon Point Lighthouse</li>\n<li>[x] Santa Cruz</li>\n<li>[] Alamere Falls</li>\n</ol>\n<h1 id=\"城镇\"><a href=\"#城镇\" class=\"headerlink\" title=\"城镇\"></a>城镇</h1><ol>\n<li>[] Napa</li>\n<li>[x] Los Gatos</li>\n<li>[x] Monterey</li>\n<li>[x] Carmel-By-The-Sea</li>\n</ol>\n<h1 id=\"三番美食\"><a href=\"#三番美食\" class=\"headerlink\" title=\"三番美食\"></a>三番美食</h1><ol>\n<li>[x] 御食园</li>\n<li>[x] 岭南小馆</li>\n</ol>\n<h1 id=\"大湾区美食\"><a href=\"#大湾区美食\" class=\"headerlink\" title=\"大湾区美食\"></a>大湾区美食</h1><ol>\n<li>[x] Benihana - Cupertino</li>\n<li>[x] Boiling Beijing – San Bruno</li>\n<li>[x] Chengdu Style Restaurant – Berkeley</li>\n<li>[x] Crema Coffee Roasting Co(with Cake) – Alameda, San Jose</li>\n<li>[x] 伏牛堂 – Sunnyvale</li>\n<li>[] Dametra Cafe – Carmel-by-the-sea</li>\n<li>[x] Soong Soong Chinese Restaurant 小二又一家</li>\n<li>[x] Xian Kitchen –Milpitas</li>\n<li>[x] Koi Palace - Milpitas 鲤鱼门早茶</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一下之前搜过，去过没去过的。<br>推荐一个网站 美国咕噜<br>updated: 2017-12-07 19:10:07</p>\n<h1 id=\"郊野\"><a href=\"#郊野\" class=\"headerlink\" title=\"郊野\"></a>郊野</h1><h2 id=\"赏花秋叶\"><a href=\"#赏花秋叶\" class=\"headerlink\" title=\"赏花秋叶\"></a>赏花秋叶</h2><ol>\n<li>[] 三月份的Filoli Garden，以郁金香出名</li>\n<li>[] Napa valley的mustard festival</li>\n<li>[] Eastern Sierra</li>\n<li>[x] Lake Tahoe</li>\n</ol>\n<h2 id=\"Hiking\"><a href=\"#Hiking\" class=\"headerlink\" title=\"Hiking\"></a>Hiking</h2><ol>\n<li>[x] Yosemite</li>\n<li>[] 中半岛的一些Park</li>\n<li>[x] Golden Gate National Recreation Area</li>\n<li>[x] Lick Observatory</li>\n</ol>\n<h2 id=\"海峡海滩\"><a href=\"#海峡海滩\" class=\"headerlink\" title=\"海峡海滩\"></a>海峡海滩</h2><ol>\n<li>[x] Point Reyes National Seashore <a href=\"https://medium.com/@maggiema1981/%E9%9B%B7%E6%96%AF%E5%B2%AC%E4%B8%80%E6%97%A5%E6%B8%B8%E7%9A%84%E8%A1%8C%E7%A8%8B-%E5%8E%BBtomales-bay%E5%90%83%E7%94%9F%E8%9A%9D%E5%95%A6-dd6c396f057f\" target=\"_blank\" rel=\"noopener\">攻略</a></li>\n<li>[x] Point Bonita Lighthouse</li>\n<li>[x] Pacifica (Surfing!)</li>\n<li>[x] Half Moon Bay</li>\n<li>[x] Pigeon Point Lighthouse</li>\n<li>[x] Santa Cruz</li>\n<li>[] Alamere Falls</li>\n</ol>\n<h1 id=\"城镇\"><a href=\"#城镇\" class=\"headerlink\" title=\"城镇\"></a>城镇</h1><ol>\n<li>[] Napa</li>\n<li>[x] Los Gatos</li>\n<li>[x] Monterey</li>\n<li>[x] Carmel-By-The-Sea</li>\n</ol>\n<h1 id=\"三番美食\"><a href=\"#三番美食\" class=\"headerlink\" title=\"三番美食\"></a>三番美食</h1><ol>\n<li>[x] 御食园</li>\n<li>[x] 岭南小馆</li>\n</ol>\n<h1 id=\"大湾区美食\"><a href=\"#大湾区美食\" class=\"headerlink\" title=\"大湾区美食\"></a>大湾区美食</h1><ol>\n<li>[x] Benihana - Cupertino</li>\n<li>[x] Boiling Beijing – San Bruno</li>\n<li>[x] Chengdu Style Restaurant – Berkeley</li>\n<li>[x] Crema Coffee Roasting Co(with Cake) – Alameda, San Jose</li>\n<li>[x] 伏牛堂 – Sunnyvale</li>\n<li>[] Dametra Cafe – Carmel-by-the-sea</li>\n<li>[x] Soong Soong Chinese Restaurant 小二又一家</li>\n<li>[x] Xian Kitchen –Milpitas</li>\n<li>[x] Koi Palace - Milpitas 鲤鱼门早茶</li>\n</ol>\n"},{"title":"理财规划-信用卡","comments":1,"date":"2017-04-21T16:25:14.000Z","updated":"2017-04-21T16:25:14.000Z","_content":"# 绪论-为什么要用信用卡？\n> 美国的移动支付领域实在是太差了  \n\n除此之外诸如购物保护退货Dispute，信用卡都有不可比拟的优势，另外几乎任何商店，小店都支持刷卡消费，所以个人观点是一切消费都以信用卡为主，并且还可以根据账单进行财务分析。\n<!--More-->\n# 主流信用卡公司介绍\n## Bank of America\n这家银行类似中国的国有银行性质，网店多，ATM机多，但他家的信用卡确实没什么值得称赞的地方。唯一的优点是在Branch可以免SSN，免信用历史开卡。\n### Better Balance Rewards\n基础设置是每月有一笔消费，每季度返还30，一年返还120（拥有BOA的Debit Card情况下）\n## CitiBank\n这家银行的信用卡入门难而且价值也不太大，个人也没有多涉猎。他家信用卡新政策是同一类产品24个月只能拿一次开卡奖励（ThankyouPoint），所以我周围也没什么人用。\n## Chase\n开卡奖励丰厚，居家良品。网店多服务好。目前的政策是两年五卡-就是两年内出现在你的信用报告上的任何银行信用卡数量不能超过五个，不然无论你信用分数多好都不可能批卡（[例外情况见此文](https://www.uscreditcardguide.com/chase-selected-for-you/)）  \n### 基础卡介绍：\n### Freedom\n每季度5%的返点\n### Freedom Unlimited\n全部1.5%返点\n### Chase Sapphire Preferred (CSP)\n吃饭旅行2%返点，年费`$95`\n### Chase Sapphire Reserve (CSR)\n吃饭旅行3%返点，旅行年费报销`$300`,年费`$450`\n## Amex\n运通公司可以无SSN批卡但需要有一定的信用历史。一旦入门，信用额度会很高并且每三个月还可以提升三倍额度。缺点是有些商家不收Amex。\n### 基础卡\n#### 普通卡系列\n普通的EveryDay系列，其他酒店联名卡。\n#### 签帐卡\n就是出了账单全部要还清\n典型的是中等的Gold，Premier Gold到高端的Platinum直至Centurion（也就是黑卡）# 个人所拥有的信用卡。\n## Discover\n有了SSN，不需要信用历史可以申请学生版。特点Refer有`$50`奖励，GPA3.0之上还会有额外奖励，回国可以当银联刷！缺点是有些商家不收Discover卡。\n# 个人拥有的信用卡\n> 撸羊毛历史\n\n## BOA\n### Better Balance Rewards\n![](https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2014/10/bankamericard-better-balance-rewards-credit-card.png?w=255&ssl=1)  \n开学后申请的第一张卡，纯粹为了每年`$120`收益，现沦为抽屉卡。\n## Citi\n### Thankyou Perferred for Student\n![](https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/citi-thankyou-preferred-credit-cards-for-college-students.jpg?w=229&ssl=1)  \n不需要SSN便可申请，当时为了积累点数便用它交学费，但是当时额度低才`$2000`。后来因为Citi政策原因，点数贬值便沦为抽屉卡。\n## Chase\n### Freedom Unlimited\n![](https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/cfu.png?resize=300%2C189&ssl=1)  \n申请的时候只批了此卡，便用来交学费，1.5%的返点还是不错的\n### Chase IHG\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/07/chase-ihg.jpg?w=288&ssl=1)  \nIHG洲际联名信用卡，3个月消费`$2000`返80000点积分，并且送Platinum的IHG会员，年费`¥49`，每年送一晚Free Night\n## Amex\n### EveryDay Perferred\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Screen-Shot-2017-02-02-at-19.38.28-.png?resize=300%2C191&ssl=1)  \n超市 3x MR，加油 2x，其他类别 1x  \n如果每个月消费次数达到30次以上，当月消费所得的MR多给50%：超市 4.5x MR ，加油 3x ，其他类别 1.5x \n### Amex Platinum for Ameriprise\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/amex_platinum.gif?resize=300%2C189&ssl=1)  \n当时申请是为了各种待遇享受，一年后关  \n年费`$550`，首年免年费  \n- 每年（Calendar Year）可以报销 `$200` 的航空杂费  \n- 每月送`$15` uber credit，12月送`$35`，即一年共`$200`。每月没用掉的 credit 会自动过期。  \n- 机场贵宾休息室待遇  \n- 赠送各类酒店Gold会员  \n\n### Amex Gold for Ameriprise\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/american-express-gold-card.jpg?resize=300%2C189&ssl=1)  \n开卡奖励三个月消费`$1000`送25000MR点数，首年免年费，一年后关\n### Amex Hilton\n![](https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/02/hilton-hhonors.png?w=240&ssl=1)  \n免年费卡，开卡3个月内消费满 `$2000` 可得 80,000 Hilton HHonors Points \n## Discover\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Discover-it-cash-credit-card-blue.png?w=205&ssl=1)  \n季度5%返现，特别是可以买Apple产品也是5%，并且第一年一切翻倍\n# 关于积分\n个人观点，网上总是说积分点数值多少钱，换成航空里程多么值，但是也需要有一定的旅行计划并且能用才好。像我这次回国机票用的就是运通的点数，1:1，虽说换成航空里程会更值钱，然而里程数一般是不会变的，机票却有可能打特价，这时候再用里程退换不就亏本了么？  \n另外积分点数最佳的使用方法是节假日兑换。\n# 财务理财软件\n主推Mint，可以绑定所有信用卡，借记卡并且分门别类，设置Budget，从而更好的掌握自己的花销情况。\n# 补充\n信用卡使用量力而行，万不可超出自己的预支或为了开卡奖励无脑消费\n## 参考\n- [北美信用卡指南](https://www.uscreditcardguide.com/zh/)  \n- [美国信用卡101](https://www.uscreditcards101.com/zh/)  \n- [北美牧羊场](https://travelafterwork.com/)\n","source":"_posts/理财规划-信用卡.md","raw":"---\ntitle: 理财规划-信用卡\ncomments: true\ndate: 2017-04-21 09:25:14\nupdated: 2017-04-21 09:25:14\ncategories: Finance\ntags: [credit card, Chase, Amex]\n---\n# 绪论-为什么要用信用卡？\n> 美国的移动支付领域实在是太差了  \n\n除此之外诸如购物保护退货Dispute，信用卡都有不可比拟的优势，另外几乎任何商店，小店都支持刷卡消费，所以个人观点是一切消费都以信用卡为主，并且还可以根据账单进行财务分析。\n<!--More-->\n# 主流信用卡公司介绍\n## Bank of America\n这家银行类似中国的国有银行性质，网店多，ATM机多，但他家的信用卡确实没什么值得称赞的地方。唯一的优点是在Branch可以免SSN，免信用历史开卡。\n### Better Balance Rewards\n基础设置是每月有一笔消费，每季度返还30，一年返还120（拥有BOA的Debit Card情况下）\n## CitiBank\n这家银行的信用卡入门难而且价值也不太大，个人也没有多涉猎。他家信用卡新政策是同一类产品24个月只能拿一次开卡奖励（ThankyouPoint），所以我周围也没什么人用。\n## Chase\n开卡奖励丰厚，居家良品。网店多服务好。目前的政策是两年五卡-就是两年内出现在你的信用报告上的任何银行信用卡数量不能超过五个，不然无论你信用分数多好都不可能批卡（[例外情况见此文](https://www.uscreditcardguide.com/chase-selected-for-you/)）  \n### 基础卡介绍：\n### Freedom\n每季度5%的返点\n### Freedom Unlimited\n全部1.5%返点\n### Chase Sapphire Preferred (CSP)\n吃饭旅行2%返点，年费`$95`\n### Chase Sapphire Reserve (CSR)\n吃饭旅行3%返点，旅行年费报销`$300`,年费`$450`\n## Amex\n运通公司可以无SSN批卡但需要有一定的信用历史。一旦入门，信用额度会很高并且每三个月还可以提升三倍额度。缺点是有些商家不收Amex。\n### 基础卡\n#### 普通卡系列\n普通的EveryDay系列，其他酒店联名卡。\n#### 签帐卡\n就是出了账单全部要还清\n典型的是中等的Gold，Premier Gold到高端的Platinum直至Centurion（也就是黑卡）# 个人所拥有的信用卡。\n## Discover\n有了SSN，不需要信用历史可以申请学生版。特点Refer有`$50`奖励，GPA3.0之上还会有额外奖励，回国可以当银联刷！缺点是有些商家不收Discover卡。\n# 个人拥有的信用卡\n> 撸羊毛历史\n\n## BOA\n### Better Balance Rewards\n![](https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2014/10/bankamericard-better-balance-rewards-credit-card.png?w=255&ssl=1)  \n开学后申请的第一张卡，纯粹为了每年`$120`收益，现沦为抽屉卡。\n## Citi\n### Thankyou Perferred for Student\n![](https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/citi-thankyou-preferred-credit-cards-for-college-students.jpg?w=229&ssl=1)  \n不需要SSN便可申请，当时为了积累点数便用它交学费，但是当时额度低才`$2000`。后来因为Citi政策原因，点数贬值便沦为抽屉卡。\n## Chase\n### Freedom Unlimited\n![](https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/cfu.png?resize=300%2C189&ssl=1)  \n申请的时候只批了此卡，便用来交学费，1.5%的返点还是不错的\n### Chase IHG\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/07/chase-ihg.jpg?w=288&ssl=1)  \nIHG洲际联名信用卡，3个月消费`$2000`返80000点积分，并且送Platinum的IHG会员，年费`¥49`，每年送一晚Free Night\n## Amex\n### EveryDay Perferred\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Screen-Shot-2017-02-02-at-19.38.28-.png?resize=300%2C191&ssl=1)  \n超市 3x MR，加油 2x，其他类别 1x  \n如果每个月消费次数达到30次以上，当月消费所得的MR多给50%：超市 4.5x MR ，加油 3x ，其他类别 1.5x \n### Amex Platinum for Ameriprise\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/amex_platinum.gif?resize=300%2C189&ssl=1)  \n当时申请是为了各种待遇享受，一年后关  \n年费`$550`，首年免年费  \n- 每年（Calendar Year）可以报销 `$200` 的航空杂费  \n- 每月送`$15` uber credit，12月送`$35`，即一年共`$200`。每月没用掉的 credit 会自动过期。  \n- 机场贵宾休息室待遇  \n- 赠送各类酒店Gold会员  \n\n### Amex Gold for Ameriprise\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/american-express-gold-card.jpg?resize=300%2C189&ssl=1)  \n开卡奖励三个月消费`$1000`送25000MR点数，首年免年费，一年后关\n### Amex Hilton\n![](https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/02/hilton-hhonors.png?w=240&ssl=1)  \n免年费卡，开卡3个月内消费满 `$2000` 可得 80,000 Hilton HHonors Points \n## Discover\n![](https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Discover-it-cash-credit-card-blue.png?w=205&ssl=1)  \n季度5%返现，特别是可以买Apple产品也是5%，并且第一年一切翻倍\n# 关于积分\n个人观点，网上总是说积分点数值多少钱，换成航空里程多么值，但是也需要有一定的旅行计划并且能用才好。像我这次回国机票用的就是运通的点数，1:1，虽说换成航空里程会更值钱，然而里程数一般是不会变的，机票却有可能打特价，这时候再用里程退换不就亏本了么？  \n另外积分点数最佳的使用方法是节假日兑换。\n# 财务理财软件\n主推Mint，可以绑定所有信用卡，借记卡并且分门别类，设置Budget，从而更好的掌握自己的花销情况。\n# 补充\n信用卡使用量力而行，万不可超出自己的预支或为了开卡奖励无脑消费\n## 参考\n- [北美信用卡指南](https://www.uscreditcardguide.com/zh/)  \n- [美国信用卡101](https://www.uscreditcards101.com/zh/)  \n- [北美牧羊场](https://travelafterwork.com/)\n","slug":"理财规划-信用卡","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfr002vm2cantf2xou3","content":"<h1 id=\"绪论-为什么要用信用卡？\"><a href=\"#绪论-为什么要用信用卡？\" class=\"headerlink\" title=\"绪论-为什么要用信用卡？\"></a>绪论-为什么要用信用卡？</h1><blockquote>\n<p>美国的移动支付领域实在是太差了  </p>\n</blockquote>\n<p>除此之外诸如购物保护退货Dispute，信用卡都有不可比拟的优势，另外几乎任何商店，小店都支持刷卡消费，所以个人观点是一切消费都以信用卡为主，并且还可以根据账单进行财务分析。<br><a id=\"more\"></a></p>\n<h1 id=\"主流信用卡公司介绍\"><a href=\"#主流信用卡公司介绍\" class=\"headerlink\" title=\"主流信用卡公司介绍\"></a>主流信用卡公司介绍</h1><h2 id=\"Bank-of-America\"><a href=\"#Bank-of-America\" class=\"headerlink\" title=\"Bank of America\"></a>Bank of America</h2><p>这家银行类似中国的国有银行性质，网店多，ATM机多，但他家的信用卡确实没什么值得称赞的地方。唯一的优点是在Branch可以免SSN，免信用历史开卡。</p>\n<h3 id=\"Better-Balance-Rewards\"><a href=\"#Better-Balance-Rewards\" class=\"headerlink\" title=\"Better Balance Rewards\"></a>Better Balance Rewards</h3><p>基础设置是每月有一笔消费，每季度返还30，一年返还120（拥有BOA的Debit Card情况下）</p>\n<h2 id=\"CitiBank\"><a href=\"#CitiBank\" class=\"headerlink\" title=\"CitiBank\"></a>CitiBank</h2><p>这家银行的信用卡入门难而且价值也不太大，个人也没有多涉猎。他家信用卡新政策是同一类产品24个月只能拿一次开卡奖励（ThankyouPoint），所以我周围也没什么人用。</p>\n<h2 id=\"Chase\"><a href=\"#Chase\" class=\"headerlink\" title=\"Chase\"></a>Chase</h2><p>开卡奖励丰厚，居家良品。网店多服务好。目前的政策是两年五卡-就是两年内出现在你的信用报告上的任何银行信用卡数量不能超过五个，不然无论你信用分数多好都不可能批卡（<a href=\"https://www.uscreditcardguide.com/chase-selected-for-you/\" target=\"_blank\" rel=\"noopener\">例外情况见此文</a>）  </p>\n<h3 id=\"基础卡介绍：\"><a href=\"#基础卡介绍：\" class=\"headerlink\" title=\"基础卡介绍：\"></a>基础卡介绍：</h3><h3 id=\"Freedom\"><a href=\"#Freedom\" class=\"headerlink\" title=\"Freedom\"></a>Freedom</h3><p>每季度5%的返点</p>\n<h3 id=\"Freedom-Unlimited\"><a href=\"#Freedom-Unlimited\" class=\"headerlink\" title=\"Freedom Unlimited\"></a>Freedom Unlimited</h3><p>全部1.5%返点</p>\n<h3 id=\"Chase-Sapphire-Preferred-CSP\"><a href=\"#Chase-Sapphire-Preferred-CSP\" class=\"headerlink\" title=\"Chase Sapphire Preferred (CSP)\"></a>Chase Sapphire Preferred (CSP)</h3><p>吃饭旅行2%返点，年费<code>$95</code></p>\n<h3 id=\"Chase-Sapphire-Reserve-CSR\"><a href=\"#Chase-Sapphire-Reserve-CSR\" class=\"headerlink\" title=\"Chase Sapphire Reserve (CSR)\"></a>Chase Sapphire Reserve (CSR)</h3><p>吃饭旅行3%返点，旅行年费报销<code>$300</code>,年费<code>$450</code></p>\n<h2 id=\"Amex\"><a href=\"#Amex\" class=\"headerlink\" title=\"Amex\"></a>Amex</h2><p>运通公司可以无SSN批卡但需要有一定的信用历史。一旦入门，信用额度会很高并且每三个月还可以提升三倍额度。缺点是有些商家不收Amex。</p>\n<h3 id=\"基础卡\"><a href=\"#基础卡\" class=\"headerlink\" title=\"基础卡\"></a>基础卡</h3><h4 id=\"普通卡系列\"><a href=\"#普通卡系列\" class=\"headerlink\" title=\"普通卡系列\"></a>普通卡系列</h4><p>普通的EveryDay系列，其他酒店联名卡。</p>\n<h4 id=\"签帐卡\"><a href=\"#签帐卡\" class=\"headerlink\" title=\"签帐卡\"></a>签帐卡</h4><p>就是出了账单全部要还清<br>典型的是中等的Gold，Premier Gold到高端的Platinum直至Centurion（也就是黑卡）# 个人所拥有的信用卡。</p>\n<h2 id=\"Discover\"><a href=\"#Discover\" class=\"headerlink\" title=\"Discover\"></a>Discover</h2><p>有了SSN，不需要信用历史可以申请学生版。特点Refer有<code>$50</code>奖励，GPA3.0之上还会有额外奖励，回国可以当银联刷！缺点是有些商家不收Discover卡。</p>\n<h1 id=\"个人拥有的信用卡\"><a href=\"#个人拥有的信用卡\" class=\"headerlink\" title=\"个人拥有的信用卡\"></a>个人拥有的信用卡</h1><blockquote>\n<p>撸羊毛历史</p>\n</blockquote>\n<h2 id=\"BOA\"><a href=\"#BOA\" class=\"headerlink\" title=\"BOA\"></a>BOA</h2><h3 id=\"Better-Balance-Rewards-1\"><a href=\"#Better-Balance-Rewards-1\" class=\"headerlink\" title=\"Better Balance Rewards\"></a>Better Balance Rewards</h3><p><img src=\"https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2014/10/bankamericard-better-balance-rewards-credit-card.png?w=255&amp;ssl=1\" alt=\"\"><br>开学后申请的第一张卡，纯粹为了每年<code>$120</code>收益，现沦为抽屉卡。</p>\n<h2 id=\"Citi\"><a href=\"#Citi\" class=\"headerlink\" title=\"Citi\"></a>Citi</h2><h3 id=\"Thankyou-Perferred-for-Student\"><a href=\"#Thankyou-Perferred-for-Student\" class=\"headerlink\" title=\"Thankyou Perferred for Student\"></a>Thankyou Perferred for Student</h3><p><img src=\"https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/citi-thankyou-preferred-credit-cards-for-college-students.jpg?w=229&amp;ssl=1\" alt=\"\"><br>不需要SSN便可申请，当时为了积累点数便用它交学费，但是当时额度低才<code>$2000</code>。后来因为Citi政策原因，点数贬值便沦为抽屉卡。</p>\n<h2 id=\"Chase-1\"><a href=\"#Chase-1\" class=\"headerlink\" title=\"Chase\"></a>Chase</h2><h3 id=\"Freedom-Unlimited-1\"><a href=\"#Freedom-Unlimited-1\" class=\"headerlink\" title=\"Freedom Unlimited\"></a>Freedom Unlimited</h3><p><img src=\"https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/cfu.png?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>申请的时候只批了此卡，便用来交学费，1.5%的返点还是不错的</p>\n<h3 id=\"Chase-IHG\"><a href=\"#Chase-IHG\" class=\"headerlink\" title=\"Chase IHG\"></a>Chase IHG</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/07/chase-ihg.jpg?w=288&amp;ssl=1\" alt=\"\"><br>IHG洲际联名信用卡，3个月消费<code>$2000</code>返80000点积分，并且送Platinum的IHG会员，年费<code>¥49</code>，每年送一晚Free Night</p>\n<h2 id=\"Amex-1\"><a href=\"#Amex-1\" class=\"headerlink\" title=\"Amex\"></a>Amex</h2><h3 id=\"EveryDay-Perferred\"><a href=\"#EveryDay-Perferred\" class=\"headerlink\" title=\"EveryDay Perferred\"></a>EveryDay Perferred</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Screen-Shot-2017-02-02-at-19.38.28-.png?resize=300%2C191&amp;ssl=1\" alt=\"\"><br>超市 3x MR，加油 2x，其他类别 1x<br>如果每个月消费次数达到30次以上，当月消费所得的MR多给50%：超市 4.5x MR ，加油 3x ，其他类别 1.5x </p>\n<h3 id=\"Amex-Platinum-for-Ameriprise\"><a href=\"#Amex-Platinum-for-Ameriprise\" class=\"headerlink\" title=\"Amex Platinum for Ameriprise\"></a>Amex Platinum for Ameriprise</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/amex_platinum.gif?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>当时申请是为了各种待遇享受，一年后关<br>年费<code>$550</code>，首年免年费  </p>\n<ul>\n<li>每年（Calendar Year）可以报销 <code>$200</code> 的航空杂费  </li>\n<li>每月送<code>$15</code> uber credit，12月送<code>$35</code>，即一年共<code>$200</code>。每月没用掉的 credit 会自动过期。  </li>\n<li>机场贵宾休息室待遇  </li>\n<li>赠送各类酒店Gold会员  </li>\n</ul>\n<h3 id=\"Amex-Gold-for-Ameriprise\"><a href=\"#Amex-Gold-for-Ameriprise\" class=\"headerlink\" title=\"Amex Gold for Ameriprise\"></a>Amex Gold for Ameriprise</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/american-express-gold-card.jpg?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>开卡奖励三个月消费<code>$1000</code>送25000MR点数，首年免年费，一年后关</p>\n<h3 id=\"Amex-Hilton\"><a href=\"#Amex-Hilton\" class=\"headerlink\" title=\"Amex Hilton\"></a>Amex Hilton</h3><p><img src=\"https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/02/hilton-hhonors.png?w=240&amp;ssl=1\" alt=\"\"><br>免年费卡，开卡3个月内消费满 <code>$2000</code> 可得 80,000 Hilton HHonors Points </p>\n<h2 id=\"Discover-1\"><a href=\"#Discover-1\" class=\"headerlink\" title=\"Discover\"></a>Discover</h2><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Discover-it-cash-credit-card-blue.png?w=205&amp;ssl=1\" alt=\"\"><br>季度5%返现，特别是可以买Apple产品也是5%，并且第一年一切翻倍</p>\n<h1 id=\"关于积分\"><a href=\"#关于积分\" class=\"headerlink\" title=\"关于积分\"></a>关于积分</h1><p>个人观点，网上总是说积分点数值多少钱，换成航空里程多么值，但是也需要有一定的旅行计划并且能用才好。像我这次回国机票用的就是运通的点数，1:1，虽说换成航空里程会更值钱，然而里程数一般是不会变的，机票却有可能打特价，这时候再用里程退换不就亏本了么？<br>另外积分点数最佳的使用方法是节假日兑换。</p>\n<h1 id=\"财务理财软件\"><a href=\"#财务理财软件\" class=\"headerlink\" title=\"财务理财软件\"></a>财务理财软件</h1><p>主推Mint，可以绑定所有信用卡，借记卡并且分门别类，设置Budget，从而更好的掌握自己的花销情况。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>信用卡使用量力而行，万不可超出自己的预支或为了开卡奖励无脑消费</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.uscreditcardguide.com/zh/\" target=\"_blank\" rel=\"noopener\">北美信用卡指南</a>  </li>\n<li><a href=\"https://www.uscreditcards101.com/zh/\" target=\"_blank\" rel=\"noopener\">美国信用卡101</a>  </li>\n<li><a href=\"https://travelafterwork.com/\" target=\"_blank\" rel=\"noopener\">北美牧羊场</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"绪论-为什么要用信用卡？\"><a href=\"#绪论-为什么要用信用卡？\" class=\"headerlink\" title=\"绪论-为什么要用信用卡？\"></a>绪论-为什么要用信用卡？</h1><blockquote>\n<p>美国的移动支付领域实在是太差了  </p>\n</blockquote>\n<p>除此之外诸如购物保护退货Dispute，信用卡都有不可比拟的优势，另外几乎任何商店，小店都支持刷卡消费，所以个人观点是一切消费都以信用卡为主，并且还可以根据账单进行财务分析。<br>","more":"</p>\n<h1 id=\"主流信用卡公司介绍\"><a href=\"#主流信用卡公司介绍\" class=\"headerlink\" title=\"主流信用卡公司介绍\"></a>主流信用卡公司介绍</h1><h2 id=\"Bank-of-America\"><a href=\"#Bank-of-America\" class=\"headerlink\" title=\"Bank of America\"></a>Bank of America</h2><p>这家银行类似中国的国有银行性质，网店多，ATM机多，但他家的信用卡确实没什么值得称赞的地方。唯一的优点是在Branch可以免SSN，免信用历史开卡。</p>\n<h3 id=\"Better-Balance-Rewards\"><a href=\"#Better-Balance-Rewards\" class=\"headerlink\" title=\"Better Balance Rewards\"></a>Better Balance Rewards</h3><p>基础设置是每月有一笔消费，每季度返还30，一年返还120（拥有BOA的Debit Card情况下）</p>\n<h2 id=\"CitiBank\"><a href=\"#CitiBank\" class=\"headerlink\" title=\"CitiBank\"></a>CitiBank</h2><p>这家银行的信用卡入门难而且价值也不太大，个人也没有多涉猎。他家信用卡新政策是同一类产品24个月只能拿一次开卡奖励（ThankyouPoint），所以我周围也没什么人用。</p>\n<h2 id=\"Chase\"><a href=\"#Chase\" class=\"headerlink\" title=\"Chase\"></a>Chase</h2><p>开卡奖励丰厚，居家良品。网店多服务好。目前的政策是两年五卡-就是两年内出现在你的信用报告上的任何银行信用卡数量不能超过五个，不然无论你信用分数多好都不可能批卡（<a href=\"https://www.uscreditcardguide.com/chase-selected-for-you/\" target=\"_blank\" rel=\"noopener\">例外情况见此文</a>）  </p>\n<h3 id=\"基础卡介绍：\"><a href=\"#基础卡介绍：\" class=\"headerlink\" title=\"基础卡介绍：\"></a>基础卡介绍：</h3><h3 id=\"Freedom\"><a href=\"#Freedom\" class=\"headerlink\" title=\"Freedom\"></a>Freedom</h3><p>每季度5%的返点</p>\n<h3 id=\"Freedom-Unlimited\"><a href=\"#Freedom-Unlimited\" class=\"headerlink\" title=\"Freedom Unlimited\"></a>Freedom Unlimited</h3><p>全部1.5%返点</p>\n<h3 id=\"Chase-Sapphire-Preferred-CSP\"><a href=\"#Chase-Sapphire-Preferred-CSP\" class=\"headerlink\" title=\"Chase Sapphire Preferred (CSP)\"></a>Chase Sapphire Preferred (CSP)</h3><p>吃饭旅行2%返点，年费<code>$95</code></p>\n<h3 id=\"Chase-Sapphire-Reserve-CSR\"><a href=\"#Chase-Sapphire-Reserve-CSR\" class=\"headerlink\" title=\"Chase Sapphire Reserve (CSR)\"></a>Chase Sapphire Reserve (CSR)</h3><p>吃饭旅行3%返点，旅行年费报销<code>$300</code>,年费<code>$450</code></p>\n<h2 id=\"Amex\"><a href=\"#Amex\" class=\"headerlink\" title=\"Amex\"></a>Amex</h2><p>运通公司可以无SSN批卡但需要有一定的信用历史。一旦入门，信用额度会很高并且每三个月还可以提升三倍额度。缺点是有些商家不收Amex。</p>\n<h3 id=\"基础卡\"><a href=\"#基础卡\" class=\"headerlink\" title=\"基础卡\"></a>基础卡</h3><h4 id=\"普通卡系列\"><a href=\"#普通卡系列\" class=\"headerlink\" title=\"普通卡系列\"></a>普通卡系列</h4><p>普通的EveryDay系列，其他酒店联名卡。</p>\n<h4 id=\"签帐卡\"><a href=\"#签帐卡\" class=\"headerlink\" title=\"签帐卡\"></a>签帐卡</h4><p>就是出了账单全部要还清<br>典型的是中等的Gold，Premier Gold到高端的Platinum直至Centurion（也就是黑卡）# 个人所拥有的信用卡。</p>\n<h2 id=\"Discover\"><a href=\"#Discover\" class=\"headerlink\" title=\"Discover\"></a>Discover</h2><p>有了SSN，不需要信用历史可以申请学生版。特点Refer有<code>$50</code>奖励，GPA3.0之上还会有额外奖励，回国可以当银联刷！缺点是有些商家不收Discover卡。</p>\n<h1 id=\"个人拥有的信用卡\"><a href=\"#个人拥有的信用卡\" class=\"headerlink\" title=\"个人拥有的信用卡\"></a>个人拥有的信用卡</h1><blockquote>\n<p>撸羊毛历史</p>\n</blockquote>\n<h2 id=\"BOA\"><a href=\"#BOA\" class=\"headerlink\" title=\"BOA\"></a>BOA</h2><h3 id=\"Better-Balance-Rewards-1\"><a href=\"#Better-Balance-Rewards-1\" class=\"headerlink\" title=\"Better Balance Rewards\"></a>Better Balance Rewards</h3><p><img src=\"https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2014/10/bankamericard-better-balance-rewards-credit-card.png?w=255&amp;ssl=1\" alt=\"\"><br>开学后申请的第一张卡，纯粹为了每年<code>$120</code>收益，现沦为抽屉卡。</p>\n<h2 id=\"Citi\"><a href=\"#Citi\" class=\"headerlink\" title=\"Citi\"></a>Citi</h2><h3 id=\"Thankyou-Perferred-for-Student\"><a href=\"#Thankyou-Perferred-for-Student\" class=\"headerlink\" title=\"Thankyou Perferred for Student\"></a>Thankyou Perferred for Student</h3><p><img src=\"https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/citi-thankyou-preferred-credit-cards-for-college-students.jpg?w=229&amp;ssl=1\" alt=\"\"><br>不需要SSN便可申请，当时为了积累点数便用它交学费，但是当时额度低才<code>$2000</code>。后来因为Citi政策原因，点数贬值便沦为抽屉卡。</p>\n<h2 id=\"Chase-1\"><a href=\"#Chase-1\" class=\"headerlink\" title=\"Chase\"></a>Chase</h2><h3 id=\"Freedom-Unlimited-1\"><a href=\"#Freedom-Unlimited-1\" class=\"headerlink\" title=\"Freedom Unlimited\"></a>Freedom Unlimited</h3><p><img src=\"https://i1.wp.com/www.uscreditcardguide.com/wp-content/uploads/cfu.png?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>申请的时候只批了此卡，便用来交学费，1.5%的返点还是不错的</p>\n<h3 id=\"Chase-IHG\"><a href=\"#Chase-IHG\" class=\"headerlink\" title=\"Chase IHG\"></a>Chase IHG</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/07/chase-ihg.jpg?w=288&amp;ssl=1\" alt=\"\"><br>IHG洲际联名信用卡，3个月消费<code>$2000</code>返80000点积分，并且送Platinum的IHG会员，年费<code>¥49</code>，每年送一晚Free Night</p>\n<h2 id=\"Amex-1\"><a href=\"#Amex-1\" class=\"headerlink\" title=\"Amex\"></a>Amex</h2><h3 id=\"EveryDay-Perferred\"><a href=\"#EveryDay-Perferred\" class=\"headerlink\" title=\"EveryDay Perferred\"></a>EveryDay Perferred</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Screen-Shot-2017-02-02-at-19.38.28-.png?resize=300%2C191&amp;ssl=1\" alt=\"\"><br>超市 3x MR，加油 2x，其他类别 1x<br>如果每个月消费次数达到30次以上，当月消费所得的MR多给50%：超市 4.5x MR ，加油 3x ，其他类别 1.5x </p>\n<h3 id=\"Amex-Platinum-for-Ameriprise\"><a href=\"#Amex-Platinum-for-Ameriprise\" class=\"headerlink\" title=\"Amex Platinum for Ameriprise\"></a>Amex Platinum for Ameriprise</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/amex_platinum.gif?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>当时申请是为了各种待遇享受，一年后关<br>年费<code>$550</code>，首年免年费  </p>\n<ul>\n<li>每年（Calendar Year）可以报销 <code>$200</code> 的航空杂费  </li>\n<li>每月送<code>$15</code> uber credit，12月送<code>$35</code>，即一年共<code>$200</code>。每月没用掉的 credit 会自动过期。  </li>\n<li>机场贵宾休息室待遇  </li>\n<li>赠送各类酒店Gold会员  </li>\n</ul>\n<h3 id=\"Amex-Gold-for-Ameriprise\"><a href=\"#Amex-Gold-for-Ameriprise\" class=\"headerlink\" title=\"Amex Gold for Ameriprise\"></a>Amex Gold for Ameriprise</h3><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/american-express-gold-card.jpg?resize=300%2C189&amp;ssl=1\" alt=\"\"><br>开卡奖励三个月消费<code>$1000</code>送25000MR点数，首年免年费，一年后关</p>\n<h3 id=\"Amex-Hilton\"><a href=\"#Amex-Hilton\" class=\"headerlink\" title=\"Amex Hilton\"></a>Amex Hilton</h3><p><img src=\"https://i0.wp.com/www.uscreditcardguide.com/wp-content/uploads/2015/02/hilton-hhonors.png?w=240&amp;ssl=1\" alt=\"\"><br>免年费卡，开卡3个月内消费满 <code>$2000</code> 可得 80,000 Hilton HHonors Points </p>\n<h2 id=\"Discover-1\"><a href=\"#Discover-1\" class=\"headerlink\" title=\"Discover\"></a>Discover</h2><p><img src=\"https://i2.wp.com/www.uscreditcardguide.com/wp-content/uploads/Discover-it-cash-credit-card-blue.png?w=205&amp;ssl=1\" alt=\"\"><br>季度5%返现，特别是可以买Apple产品也是5%，并且第一年一切翻倍</p>\n<h1 id=\"关于积分\"><a href=\"#关于积分\" class=\"headerlink\" title=\"关于积分\"></a>关于积分</h1><p>个人观点，网上总是说积分点数值多少钱，换成航空里程多么值，但是也需要有一定的旅行计划并且能用才好。像我这次回国机票用的就是运通的点数，1:1，虽说换成航空里程会更值钱，然而里程数一般是不会变的，机票却有可能打特价，这时候再用里程退换不就亏本了么？<br>另外积分点数最佳的使用方法是节假日兑换。</p>\n<h1 id=\"财务理财软件\"><a href=\"#财务理财软件\" class=\"headerlink\" title=\"财务理财软件\"></a>财务理财软件</h1><p>主推Mint，可以绑定所有信用卡，借记卡并且分门别类，设置Budget，从而更好的掌握自己的花销情况。</p>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><p>信用卡使用量力而行，万不可超出自己的预支或为了开卡奖励无脑消费</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.uscreditcardguide.com/zh/\" target=\"_blank\" rel=\"noopener\">北美信用卡指南</a>  </li>\n<li><a href=\"https://www.uscreditcards101.com/zh/\" target=\"_blank\" rel=\"noopener\">美国信用卡101</a>  </li>\n<li><a href=\"https://travelafterwork.com/\" target=\"_blank\" rel=\"noopener\">北美牧羊场</a></li>\n</ul>"},{"title":"生产力与实用性工具","comments":1,"date":"2017-04-21T05:46:51.000Z","updated":"2017-04-23T00:47:52.000Z","_content":"# 生产力工具\n## 编程类\n1. [Homebrew](https://brew.sh/)\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n2. [JetBrains系列](https://www.jetbrains.com)(可以使用学生优惠)\n * [IntelliJ](https://www.jetbrains.com/idea)\n * [PyCharm](https://www.jetbrains.com/pycharm)\n * [WebStorm](https://www.jetbrains.com/webstorm)\n * [RubyMine](https://www.jetbrains.com/ruby)\n * [AppCode](https://www.jetbrains.com/objc)\n <!--More-->\n3. [Sublime Text 3](https://www.sublimetext.com/3)\n4. [iTerm 2(终端)](https://www.iterm2.com/)\n5. [Go2Shell](http://zipzapmac.com/go2shell)\n6. [MacDown（比较好用的MarkDown编辑器）](https://macdown.uranusjr.com/)\n7. [Dash(文档)](https://kapeli.com/dash)\n\n\n## 实用类\n1. [Maipo（微博）](http://weiboformac.sinaapp.com/)\n2. [Alfred 3](https://www.alfredapp.com/)\n3. [Halo （豆瓣音乐）](http://olsa1d2zk.bkt.clouddn.com/Halo_v1.5.3.zip)\n4. [Near Lock （距离解锁）](https://nearlock.me/)\n5. [RescueTime （统计工作效率软件）](https://www.rescuetime.com/)\n6. [FreshBackMac （自动换壁纸）](http://arkanath.com/FreshBackMac/)\n7. [PopcornTime （娱乐休闲）](https://popcorn-time.to/)\n\n## IOS\n1. [Notion （智能邮件集合）](https://notion.ai/)\n2. [Mint （财务整理）](https://mint.intuit.com/)\n3. [Robinhood （小额美股投资）](https://robinhood.com)\n4. [Moves （位置记录）](https://www.moves-app.com/)\n5. [Gyroscope （健康数据整合）](https://gyrosco.pe/)\n\n\n\n\n\n","source":"_posts/生产力与实用性工具.md","raw":"---\ntitle: 生产力与实用性工具\ncomments: true\ndate: 2017-04-20 22:46:51\nupdated: 2017-04-22 17:47:52\ncategories: Technology\ntags: [Tools, Mac, IOS]\n---\n# 生产力工具\n## 编程类\n1. [Homebrew](https://brew.sh/)\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n2. [JetBrains系列](https://www.jetbrains.com)(可以使用学生优惠)\n * [IntelliJ](https://www.jetbrains.com/idea)\n * [PyCharm](https://www.jetbrains.com/pycharm)\n * [WebStorm](https://www.jetbrains.com/webstorm)\n * [RubyMine](https://www.jetbrains.com/ruby)\n * [AppCode](https://www.jetbrains.com/objc)\n <!--More-->\n3. [Sublime Text 3](https://www.sublimetext.com/3)\n4. [iTerm 2(终端)](https://www.iterm2.com/)\n5. [Go2Shell](http://zipzapmac.com/go2shell)\n6. [MacDown（比较好用的MarkDown编辑器）](https://macdown.uranusjr.com/)\n7. [Dash(文档)](https://kapeli.com/dash)\n\n\n## 实用类\n1. [Maipo（微博）](http://weiboformac.sinaapp.com/)\n2. [Alfred 3](https://www.alfredapp.com/)\n3. [Halo （豆瓣音乐）](http://olsa1d2zk.bkt.clouddn.com/Halo_v1.5.3.zip)\n4. [Near Lock （距离解锁）](https://nearlock.me/)\n5. [RescueTime （统计工作效率软件）](https://www.rescuetime.com/)\n6. [FreshBackMac （自动换壁纸）](http://arkanath.com/FreshBackMac/)\n7. [PopcornTime （娱乐休闲）](https://popcorn-time.to/)\n\n## IOS\n1. [Notion （智能邮件集合）](https://notion.ai/)\n2. [Mint （财务整理）](https://mint.intuit.com/)\n3. [Robinhood （小额美股投资）](https://robinhood.com)\n4. [Moves （位置记录）](https://www.moves-app.com/)\n5. [Gyroscope （健康数据整合）](https://gyrosco.pe/)\n\n\n\n\n\n","slug":"生产力与实用性工具","published":1,"layout":"post","photos":[],"link":"","_id":"cjgd3hdfr002ym2ca7735f7bg","content":"<h1 id=\"生产力工具\"><a href=\"#生产力工具\" class=\"headerlink\" title=\"生产力工具\"></a>生产力工具</h1><h2 id=\"编程类\"><a href=\"#编程类\" class=\"headerlink\" title=\"编程类\"></a>编程类</h2><ol>\n<li><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://www.jetbrains.com\" target=\"_blank\" rel=\"noopener\">JetBrains系列</a>(可以使用学生优惠)</p>\n<ul>\n<li><a href=\"https://www.jetbrains.com/idea\" target=\"_blank\" rel=\"noopener\">IntelliJ</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n<li><a href=\"https://www.jetbrains.com/webstorm\" target=\"_blank\" rel=\"noopener\">WebStorm</a></li>\n<li><a href=\"https://www.jetbrains.com/ruby\" target=\"_blank\" rel=\"noopener\">RubyMine</a></li>\n<li><a href=\"https://www.jetbrains.com/objc\" target=\"_blank\" rel=\"noopener\">AppCode</a><a id=\"more\"></a></li>\n</ul>\n</li>\n<li><a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">Sublime Text 3</a></li>\n<li><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm 2(终端)</a></li>\n<li><a href=\"http://zipzapmac.com/go2shell\" target=\"_blank\" rel=\"noopener\">Go2Shell</a></li>\n<li><a href=\"https://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">MacDown（比较好用的MarkDown编辑器）</a></li>\n<li><a href=\"https://kapeli.com/dash\" target=\"_blank\" rel=\"noopener\">Dash(文档)</a></li>\n</ol>\n<h2 id=\"实用类\"><a href=\"#实用类\" class=\"headerlink\" title=\"实用类\"></a>实用类</h2><ol>\n<li><a href=\"http://weiboformac.sinaapp.com/\" target=\"_blank\" rel=\"noopener\">Maipo（微博）</a></li>\n<li><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred 3</a></li>\n<li><a href=\"http://olsa1d2zk.bkt.clouddn.com/Halo_v1.5.3.zip\" target=\"_blank\" rel=\"noopener\">Halo （豆瓣音乐）</a></li>\n<li><a href=\"https://nearlock.me/\" target=\"_blank\" rel=\"noopener\">Near Lock （距离解锁）</a></li>\n<li><a href=\"https://www.rescuetime.com/\" target=\"_blank\" rel=\"noopener\">RescueTime （统计工作效率软件）</a></li>\n<li><a href=\"http://arkanath.com/FreshBackMac/\" target=\"_blank\" rel=\"noopener\">FreshBackMac （自动换壁纸）</a></li>\n<li><a href=\"https://popcorn-time.to/\" target=\"_blank\" rel=\"noopener\">PopcornTime （娱乐休闲）</a></li>\n</ol>\n<h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><ol>\n<li><a href=\"https://notion.ai/\" target=\"_blank\" rel=\"noopener\">Notion （智能邮件集合）</a></li>\n<li><a href=\"https://mint.intuit.com/\" target=\"_blank\" rel=\"noopener\">Mint （财务整理）</a></li>\n<li><a href=\"https://robinhood.com\" target=\"_blank\" rel=\"noopener\">Robinhood （小额美股投资）</a></li>\n<li><a href=\"https://www.moves-app.com/\" target=\"_blank\" rel=\"noopener\">Moves （位置记录）</a></li>\n<li><a href=\"https://gyrosco.pe/\" target=\"_blank\" rel=\"noopener\">Gyroscope （健康数据整合）</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"生产力工具\"><a href=\"#生产力工具\" class=\"headerlink\" title=\"生产力工具\"></a>生产力工具</h1><h2 id=\"编程类\"><a href=\"#编程类\" class=\"headerlink\" title=\"编程类\"></a>编程类</h2><ol>\n<li><p><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://www.jetbrains.com\" target=\"_blank\" rel=\"noopener\">JetBrains系列</a>(可以使用学生优惠)</p>\n<ul>\n<li><a href=\"https://www.jetbrains.com/idea\" target=\"_blank\" rel=\"noopener\">IntelliJ</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n<li><a href=\"https://www.jetbrains.com/webstorm\" target=\"_blank\" rel=\"noopener\">WebStorm</a></li>\n<li><a href=\"https://www.jetbrains.com/ruby\" target=\"_blank\" rel=\"noopener\">RubyMine</a></li>\n<li><a href=\"https://www.jetbrains.com/objc\" target=\"_blank\" rel=\"noopener\">AppCode</a>","more":"</li>\n</ul>\n</li>\n<li><a href=\"https://www.sublimetext.com/3\" target=\"_blank\" rel=\"noopener\">Sublime Text 3</a></li>\n<li><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm 2(终端)</a></li>\n<li><a href=\"http://zipzapmac.com/go2shell\" target=\"_blank\" rel=\"noopener\">Go2Shell</a></li>\n<li><a href=\"https://macdown.uranusjr.com/\" target=\"_blank\" rel=\"noopener\">MacDown（比较好用的MarkDown编辑器）</a></li>\n<li><a href=\"https://kapeli.com/dash\" target=\"_blank\" rel=\"noopener\">Dash(文档)</a></li>\n</ol>\n<h2 id=\"实用类\"><a href=\"#实用类\" class=\"headerlink\" title=\"实用类\"></a>实用类</h2><ol>\n<li><a href=\"http://weiboformac.sinaapp.com/\" target=\"_blank\" rel=\"noopener\">Maipo（微博）</a></li>\n<li><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred 3</a></li>\n<li><a href=\"http://olsa1d2zk.bkt.clouddn.com/Halo_v1.5.3.zip\" target=\"_blank\" rel=\"noopener\">Halo （豆瓣音乐）</a></li>\n<li><a href=\"https://nearlock.me/\" target=\"_blank\" rel=\"noopener\">Near Lock （距离解锁）</a></li>\n<li><a href=\"https://www.rescuetime.com/\" target=\"_blank\" rel=\"noopener\">RescueTime （统计工作效率软件）</a></li>\n<li><a href=\"http://arkanath.com/FreshBackMac/\" target=\"_blank\" rel=\"noopener\">FreshBackMac （自动换壁纸）</a></li>\n<li><a href=\"https://popcorn-time.to/\" target=\"_blank\" rel=\"noopener\">PopcornTime （娱乐休闲）</a></li>\n</ol>\n<h2 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h2><ol>\n<li><a href=\"https://notion.ai/\" target=\"_blank\" rel=\"noopener\">Notion （智能邮件集合）</a></li>\n<li><a href=\"https://mint.intuit.com/\" target=\"_blank\" rel=\"noopener\">Mint （财务整理）</a></li>\n<li><a href=\"https://robinhood.com\" target=\"_blank\" rel=\"noopener\">Robinhood （小额美股投资）</a></li>\n<li><a href=\"https://www.moves-app.com/\" target=\"_blank\" rel=\"noopener\">Moves （位置记录）</a></li>\n<li><a href=\"https://gyrosco.pe/\" target=\"_blank\" rel=\"noopener\">Gyroscope （健康数据整合）</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgd3hdef0000m2cae3lku92c","category_id":"cjgd3hdek0004m2cac5xj3f2z","_id":"cjgd3hdes000fm2cauaj19d9a"},{"post_id":"cjgd3hdem0006m2cay4t82bi7","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdey000rm2cawutap5n2"},{"post_id":"cjgd3hden0008m2ca2k9g3y6i","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf0000xm2caf5kwclku"},{"post_id":"cjgd3hdeo0009m2cacvzloutz","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf30013m2cabcvsrpwh"},{"post_id":"cjgd3hdf10010m2ca7b0b7nwp","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf50018m2ca2rup1kit"},{"post_id":"cjgd3hdeq000dm2ca2pl0fd1u","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf6001cm2cak6u9awtl"},{"post_id":"cjgd3hdf20011m2ca1goyjtrr","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf7001fm2cablk2g1gq"},{"post_id":"cjgd3hdf30014m2ca0agn8eec","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdf9001jm2casqpg53ep"},{"post_id":"cjgd3hdei0002m2ca3gdmw3oi","category_id":"cjgd3hdep000am2ca6r491hez","_id":"cjgd3hdfa001mm2caugo7uf17"},{"post_id":"cjgd3hdei0002m2ca3gdmw3oi","category_id":"cjgd3hdf30012m2capmshp8ng","_id":"cjgd3hdfb001pm2cagy4qdh91"},{"post_id":"cjgd3hder000em2cas59ft1vy","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdfe001um2cakqlc5bi5"},{"post_id":"cjgd3hdf8001im2caytlic6ou","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdff001wm2cadpww7de4"},{"post_id":"cjgd3hdfa001lm2cao4fvblbi","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdfg0020m2cawzy28pe4"},{"post_id":"cjgd3hdet000im2cahyn82wr8","category_id":"cjgd3hdf8001hm2cad6vxqq34","_id":"cjgd3hdfi0023m2cagwm93ung"},{"post_id":"cjgd3hdfd001tm2cazwy063xx","category_id":"cjgd3hdes000gm2ca8xni5pvg","_id":"cjgd3hdfj0027m2ca65nkfnsg"},{"post_id":"cjgd3hdeu000km2catwzrr4r3","category_id":"cjgd3hdfb001qm2caie9yax5l","_id":"cjgd3hdfk002am2ca5tm7bhso"},{"post_id":"cjgd3hdev000om2ca7pofh5x5","category_id":"cjgd3hdff001xm2caedhimgl8","_id":"cjgd3hdfl002em2caa187btvj"},{"post_id":"cjgd3hdew000pm2ca93r687f2","category_id":"cjgd3hdfi0024m2cayf647cq1","_id":"cjgd3hdfn002km2car84bkjjv"},{"post_id":"cjgd3hdey000tm2cacjl4cujt","category_id":"cjgd3hdfi0024m2cayf647cq1","_id":"cjgd3hdfp002rm2caocyne1lh"},{"post_id":"cjgd3hdez000vm2cayzn9vuyg","category_id":"cjgd3hdfi0024m2cayf647cq1","_id":"cjgd3hdfr002xm2ca0syvi6tu"},{"post_id":"cjgd3hdfq002sm2cayhcv8to7","category_id":"cjgd3hdfi0024m2cayf647cq1","_id":"cjgd3hdft0031m2caqoluilix"},{"post_id":"cjgd3hdf40017m2cag2nq8aoq","category_id":"cjgd3hdfp002qm2cahgbpllq8","_id":"cjgd3hdft0034m2cavqbg3nr0"},{"post_id":"cjgd3hdfr002ym2ca7735f7bg","category_id":"cjgd3hdfb001qm2caie9yax5l","_id":"cjgd3hdfu0036m2ca9zrnx383"},{"post_id":"cjgd3hdf5001bm2ca33rwnu1y","category_id":"cjgd3hdfp002qm2cahgbpllq8","_id":"cjgd3hdfu003am2car6w00a0j"},{"post_id":"cjgd3hdf7001em2cam2t8t5m5","category_id":"cjgd3hdfp002qm2cahgbpllq8","_id":"cjgd3hdfv003dm2ca9e5dnl8l"},{"post_id":"cjgd3hdfb001om2caynnlob9e","category_id":"cjgd3hdfi0024m2cayf647cq1","_id":"cjgd3hdfw003fm2ca7wlay7cx"},{"post_id":"cjgd3hdfg001zm2cavagoxmvu","category_id":"cjgd3hdfv003cm2can0z3vfhm","_id":"cjgd3hdfw003im2cabbaa4vt0"},{"post_id":"cjgd3hdfh0022m2caq3yo1aut","category_id":"cjgd3hdfw003gm2ca13aspryv","_id":"cjgd3hdfx003nm2carlc28m2l"},{"post_id":"cjgd3hdfm002hm2caps7mh8gs","category_id":"cjgd3hdfy003sm2cankfvdjhs","_id":"cjgd3hdg0003zm2canoxaxeg4"},{"post_id":"cjgd3hdfn002lm2caj8m9ckn4","category_id":"cjgd3hdfp002qm2cahgbpllq8","_id":"cjgd3hdg00041m2ca81dmu5o0"},{"post_id":"cjgd3hdfp002om2cayglnvv20","category_id":"cjgd3hdg0003ym2cal81rg1cf","_id":"cjgd3hdg10046m2caav2jnvoe"},{"post_id":"cjgd3hdfr002vm2cantf2xou3","category_id":"cjgd3hdg00042m2caeb9ri2qr","_id":"cjgd3hdg30049m2cawasizbfx"},{"post_id":"cjgd3hdfk0029m2ca1xrnsnk8","category_id":"cjgd3hdfx003pm2cayt6zt5ox","_id":"cjgd3hdg4004hm2cali565rba"},{"post_id":"cjgd3hdfk0029m2ca1xrnsnk8","category_id":"cjgd3hdg3004am2cabstnvguy","_id":"cjgd3hdg5004jm2caimhy9tsd"},{"post_id":"cjgd3hdfi0026m2caoh92kjqk","category_id":"cjgd3hdfx003jm2cahvy8aaw0","_id":"cjgd3hdg5004lm2cawi243idt"},{"post_id":"cjgd3hdfi0026m2caoh92kjqk","category_id":"cjgd3hdg20047m2ca9299nyf1","_id":"cjgd3hdg5004nm2caxfjvgjwm"},{"post_id":"cjgd3hdfi0026m2caoh92kjqk","category_id":"cjgd3hdg4004em2caf56o7qtw","_id":"cjgd3hdg6004pm2cagegn8rhk"}],"PostTag":[{"post_id":"cjgd3hdef0000m2cae3lku92c","tag_id":"cjgd3hdel0005m2cap9xj12fg","_id":"cjgd3hdep000cm2cai8x420yv"},{"post_id":"cjgd3hdei0002m2ca3gdmw3oi","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdet000jm2ca4p12e7b7"},{"post_id":"cjgd3hdet000im2cahyn82wr8","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdev000nm2ca5f8gehvf"},{"post_id":"cjgd3hdem0006m2cay4t82bi7","tag_id":"cjgd3hdes000hm2ca1bvwfs7b","_id":"cjgd3hdez000um2caix7xivgv"},{"post_id":"cjgd3hdem0006m2cay4t82bi7","tag_id":"cjgd3hdev000mm2cab8c4lkwr","_id":"cjgd3hdf0000ym2carmur0v7w"},{"post_id":"cjgd3hden0008m2ca2k9g3y6i","tag_id":"cjgd3hdev000mm2cab8c4lkwr","_id":"cjgd3hdf40016m2cau5p4ky29"},{"post_id":"cjgd3hden0008m2ca2k9g3y6i","tag_id":"cjgd3hdf1000zm2ca29sszi7g","_id":"cjgd3hdf5001am2ca36be5270"},{"post_id":"cjgd3hdeo0009m2cacvzloutz","tag_id":"cjgd3hdf40015m2ca7vpo7gea","_id":"cjgd3hdf8001gm2cai0h8fjfp"},{"post_id":"cjgd3hdeq000dm2ca2pl0fd1u","tag_id":"cjgd3hdf6001dm2cay4v8ndvk","_id":"cjgd3hdfa001nm2cazc3aywci"},{"post_id":"cjgd3hdfa001lm2cao4fvblbi","tag_id":"cjgd3hdf9001km2calmm1bt9k","_id":"cjgd3hdfc001rm2cac5u6xpii"},{"post_id":"cjgd3hdfe001vm2catwbtisxq","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdfh0021m2ca5n0a82cm"},{"post_id":"cjgd3hder000em2cas59ft1vy","tag_id":"cjgd3hdf9001km2calmm1bt9k","_id":"cjgd3hdfk0028m2cak58q5c8r"},{"post_id":"cjgd3hder000em2cas59ft1vy","tag_id":"cjgd3hdf1000zm2ca29sszi7g","_id":"cjgd3hdfl002bm2cadpqmpoe3"},{"post_id":"cjgd3hder000em2cas59ft1vy","tag_id":"cjgd3hdev000mm2cab8c4lkwr","_id":"cjgd3hdfm002gm2caeetm36nf"},{"post_id":"cjgd3hdfh0022m2caq3yo1aut","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdfn002im2camzu4gdgf"},{"post_id":"cjgd3hdfi0026m2caoh92kjqk","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdfo002nm2ca4l70yyhj"},{"post_id":"cjgd3hdfk0029m2ca1xrnsnk8","tag_id":"cjgd3hdep000bm2ca579xvntb","_id":"cjgd3hdfp002pm2casgmwrzf4"},{"post_id":"cjgd3hdeu000km2catwzrr4r3","tag_id":"cjgd3hdfi0025m2cabk3jr3qf","_id":"cjgd3hdfq002um2caiz4xolqx"},{"post_id":"cjgd3hdev000om2ca7pofh5x5","tag_id":"cjgd3hdfm002fm2ca5755xinw","_id":"cjgd3hdfr002wm2cas8hpl0bj"},{"post_id":"cjgd3hdew000pm2ca93r687f2","tag_id":"cjgd3hdfo002mm2can6qfbqhv","_id":"cjgd3hdft0032m2cav7rdcf98"},{"post_id":"cjgd3hdew000pm2ca93r687f2","tag_id":"cjgd3hdfq002tm2ca1mlb58qj","_id":"cjgd3hdfu0035m2caszwcbc5z"},{"post_id":"cjgd3hdey000tm2cacjl4cujt","tag_id":"cjgd3hdft0030m2capmk2afrs","_id":"cjgd3hdfu0038m2ca2wbsty8n"},{"post_id":"cjgd3hdez000vm2cayzn9vuyg","tag_id":"cjgd3hdfu0037m2catb2ostmx","_id":"cjgd3hdfx003km2cau4u8jsc0"},{"post_id":"cjgd3hdez000vm2cayzn9vuyg","tag_id":"cjgd3hdfv003bm2caq2estpp9","_id":"cjgd3hdfx003lm2cajzfqed91"},{"post_id":"cjgd3hdez000vm2cayzn9vuyg","tag_id":"cjgd3hdfv003em2ca81pl8wp0","_id":"cjgd3hdfx003om2carq6dhdwl"},{"post_id":"cjgd3hdf10010m2ca7b0b7nwp","tag_id":"cjgd3hdfw003hm2ca9agrvev6","_id":"cjgd3hdfy003qm2ca7xz0o9w7"},{"post_id":"cjgd3hdf20011m2ca1goyjtrr","tag_id":"cjgd3hdfx003mm2catnc2fjgx","_id":"cjgd3hdfz003vm2cahsy25omw"},{"post_id":"cjgd3hdf20011m2ca1goyjtrr","tag_id":"cjgd3hdfy003rm2carkf5yssd","_id":"cjgd3hdfz003wm2cassdjki64"},{"post_id":"cjgd3hdf30014m2ca0agn8eec","tag_id":"cjgd3hdf9001km2calmm1bt9k","_id":"cjgd3hdg00043m2ca0uycvc0g"},{"post_id":"cjgd3hdf30014m2ca0agn8eec","tag_id":"cjgd3hdfz003xm2cagiveri8d","_id":"cjgd3hdg10044m2cafqcbaa0r"},{"post_id":"cjgd3hdf40017m2cag2nq8aoq","tag_id":"cjgd3hdg00040m2calu7900ho","_id":"cjgd3hdg3004bm2cano8fmlln"},{"post_id":"cjgd3hdf40017m2cag2nq8aoq","tag_id":"cjgd3hdg10045m2ca4y5kd8iw","_id":"cjgd3hdg3004cm2cakgis02iz"},{"post_id":"cjgd3hdf5001bm2ca33rwnu1y","tag_id":"cjgd3hdg20048m2cab1fosgux","_id":"cjgd3hdg4004fm2cab6wkx3yd"},{"post_id":"cjgd3hdf7001em2cam2t8t5m5","tag_id":"cjgd3hdg3004dm2ca0apirf4j","_id":"cjgd3hdg4004im2ca6fzwasit"},{"post_id":"cjgd3hdf8001im2caytlic6ou","tag_id":"cjgd3hdg4004gm2caj4mmjza2","_id":"cjgd3hdg5004mm2ca3yag3dmk"},{"post_id":"cjgd3hdfd001tm2cazwy063xx","tag_id":"cjgd3hdg5004km2cav50ee2wz","_id":"cjgd3hdg6004qm2ca1zqrv1lr"},{"post_id":"cjgd3hdfg001zm2cavagoxmvu","tag_id":"cjgd3hdg5004om2cah7z44kyk","_id":"cjgd3hdg6004tm2ca6mwq8ylq"},{"post_id":"cjgd3hdfg001zm2cavagoxmvu","tag_id":"cjgd3hdg6004rm2cab0e4on1e","_id":"cjgd3hdg7004um2ca48k2pj8d"},{"post_id":"cjgd3hdfm002hm2caps7mh8gs","tag_id":"cjgd3hdg6004sm2cai447914z","_id":"cjgd3hdg7004wm2canu616kf9"},{"post_id":"cjgd3hdfn002lm2caj8m9ckn4","tag_id":"cjgd3hdg7004vm2cabjv124fw","_id":"cjgd3hdg8004zm2cajfg62l8q"},{"post_id":"cjgd3hdfn002lm2caj8m9ckn4","tag_id":"cjgd3hdg7004xm2cave5an8zn","_id":"cjgd3hdg80050m2cae0iv1860"},{"post_id":"cjgd3hdfp002om2cayglnvv20","tag_id":"cjgd3hdg7004ym2ca282rll5k","_id":"cjgd3hdg90053m2cavk3p7i6i"},{"post_id":"cjgd3hdfp002om2cayglnvv20","tag_id":"cjgd3hdg80051m2cat65tg9vk","_id":"cjgd3hdg90054m2cax53fecjl"},{"post_id":"cjgd3hdfr002vm2cantf2xou3","tag_id":"cjgd3hdg90052m2cauzcuh5u9","_id":"cjgd3hdga0058m2ca6nhwqawk"},{"post_id":"cjgd3hdfr002vm2cantf2xou3","tag_id":"cjgd3hdg90055m2caub0r099w","_id":"cjgd3hdga0059m2ca8qfj5h07"},{"post_id":"cjgd3hdfr002vm2cantf2xou3","tag_id":"cjgd3hdg90056m2ca9ztnk144","_id":"cjgd3hdga005bm2cal7zo8mlt"},{"post_id":"cjgd3hdfr002ym2ca7735f7bg","tag_id":"cjgd3hdga0057m2cany1dx1bo","_id":"cjgd3hdgb005dm2cae4stvkjx"},{"post_id":"cjgd3hdfr002ym2ca7735f7bg","tag_id":"cjgd3hdga005am2caj6xfj6ts","_id":"cjgd3hdgb005em2cakhcrzur6"},{"post_id":"cjgd3hdfr002ym2ca7735f7bg","tag_id":"cjgd3hdga005cm2ca1hincwjr","_id":"cjgd3hdgb005fm2cau171i7aj"}],"Tag":[{"name":"Football","_id":"cjgd3hdel0005m2cap9xj12fg"},{"name":"Leetcode","_id":"cjgd3hdep000bm2ca579xvntb"},{"name":"Backtracking","_id":"cjgd3hdes000hm2ca1bvwfs7b"},{"name":"DFS","_id":"cjgd3hdev000mm2cab8c4lkwr"},{"name":"BFS","_id":"cjgd3hdf1000zm2ca29sszi7g"},{"name":"DP","_id":"cjgd3hdf40015m2ca7vpo7gea"},{"name":"Design","_id":"cjgd3hdf6001dm2cay4v8ndvk"},{"name":"String","_id":"cjgd3hdf9001km2calmm1bt9k"},{"name":"配置","_id":"cjgd3hdfi0025m2cabk3jr3qf"},{"name":"Indeed","_id":"cjgd3hdfm002fm2ca5755xinw"},{"name":"New York","_id":"cjgd3hdfo002mm2can6qfbqhv"},{"name":"Boston","_id":"cjgd3hdfq002tm2ca1mlb58qj"},{"name":"RhodeIsland","_id":"cjgd3hdft0030m2capmk2afrs"},{"name":"border","_id":"cjgd3hdfu0037m2catb2ostmx"},{"name":"library","_id":"cjgd3hdfv003bm2caq2estpp9"},{"name":"Vermont","_id":"cjgd3hdfv003em2ca81pl8wp0"},{"name":"Website","_id":"cjgd3hdfw003hm2ca9agrvev6"},{"name":"LinkedList","_id":"cjgd3hdfx003mm2catnc2fjgx"},{"name":"TwoPointer","_id":"cjgd3hdfy003rm2carkf5yssd"},{"name":"SlidingWindow","_id":"cjgd3hdfz003xm2cagiveri8d"},{"name":"Newsletter","_id":"cjgd3hdg00040m2calu7900ho"},{"name":"Product","_id":"cjgd3hdg10045m2ca4y5kd8iw"},{"name":"Love","_id":"cjgd3hdg20048m2cab1fosgux"},{"name":"Quote","_id":"cjgd3hdg3004dm2ca0apirf4j"},{"name":"stack","_id":"cjgd3hdg4004gm2caj4mmjza2"},{"name":"TopLogicalSort","_id":"cjgd3hdg5004km2cav50ee2wz"},{"name":"USC","_id":"cjgd3hdg5004om2cah7z44kyk"},{"name":"Rental","_id":"cjgd3hdg6004rm2cab0e4on1e"},{"name":"方庄","_id":"cjgd3hdg6004sm2cai447914z"},{"name":"签名","_id":"cjgd3hdg7004vm2cabjv124fw"},{"name":"过往","_id":"cjgd3hdg7004xm2cave5an8zn"},{"name":"影评","_id":"cjgd3hdg7004ym2ca282rll5k"},{"name":"英剧","_id":"cjgd3hdg80051m2cat65tg9vk"},{"name":"credit card","_id":"cjgd3hdg90052m2cauzcuh5u9"},{"name":"Chase","_id":"cjgd3hdg90055m2caub0r099w"},{"name":"Amex","_id":"cjgd3hdg90056m2ca9ztnk144"},{"name":"Tools","_id":"cjgd3hdga0057m2cany1dx1bo"},{"name":"Mac","_id":"cjgd3hdga005am2caj6xfj6ts"},{"name":"IOS","_id":"cjgd3hdga005cm2ca1hincwjr"}]}}